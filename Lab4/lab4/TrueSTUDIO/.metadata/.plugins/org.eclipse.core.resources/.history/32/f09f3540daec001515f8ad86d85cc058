/*============================================================================
Name:          main.c
Author:        Lasse Karagiannis
Compile with:  Atollic TrueSTUDIO® for ARM®, Built on Eclipse.
			   Version: 5.4.0 Build id: 20151109-1237
Date:          2016-03-18
Description:   Lab4 The program reads the buttons on the TM1638 chip
                LED & Key Evaluation board
======================================================================================*/

/* Includes ------------------------------------------------------------------*/
#include "stm32f4xx_hal.h"
#include "cmsis_os.h"

#include <math.h>

#define STB(x)		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, x)			//A3
#define CLK(x)		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, x)			//A4
#define DIO(x)		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, x)			//A5
#define rDIO		HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)				//A5
#define LD2(x)		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, x); 	//LD2
#define HIGH		GPIO_PIN_SET
#define LOW			GPIO_PIN_RESET
#define CDELAY		udelay(1);

#define DATA		0x40
#define TESTMODE	0x08
#define FIXED		0x04
#define READ		0x02

#define DISPLAY		0x80	//+ intensity
#define	ON			0x08

#define ADDRESS		0xc0	//+ address

uint8_t transfermode;
uint8_t Key[4]={0};
uint8_t transmit[]= "transmitting";

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart2;

osThreadId defaultTaskHandle;

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
static void MX_USART2_UART_Init(void);
void StartDefaultTask(void const * argument);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void sendbyte(uint8_t data);
void udelay(volatile unsigned int delay);

void sendInstruction(uint8_t data);
void sendInstructionRead();
void sendStartAdress(uint8_t data);
void sendMultipleData(uint8_t data, int count);
uint8_t decodeKeyPressJens(uint32_t value);
uint8_t read4BytesAndDecode();
uint8_t decodeHexToSevenSegment(uint8_t digit);
void LightUpLedAtPositionDecodedFromHexValue(uint8_t value);
void LightUpLedAtPositionDecodedFromBitPattern(uint8_t value);
void sendValueToSegments(uint8_t value);
void clearSegmentsAndLEDs(void);
void writeHexValueToSegmentAtAdress(uint8_t value, uint8_t position);
void LightUpLedAtPositionDecodedFromHexValue(uint8_t hexValue);
void writeIntValueToSegments(uint32_t value);
uint32_t read4BytesAndConvertToInt(void);
uint8_t readKeysAndDecodeInternalScan(void);

int main(void)
{

  	uint8_t received;

  	HAL_Init();
  	SystemClock_Config();
  	MX_GPIO_Init();
  	MX_TIM2_Init();
  	MX_USART2_UART_Init();
  	HAL_SuspendTick();

  	STB(HIGH);
  	DIO(HIGH);
  	CLK(HIGH);
  	CDELAY;

  	clearSegmentsAndLEDs();
  	//writeHexValueToSegmentAtAdress(0x00,ADDRESS +12 );
  	writeIntValueToSegments(0x12345678);



  	while (1)
  	{

  		//uReceivedData = read4BytesAndConvertToInt();
  		received = readKeysAndDecodeInternalScan();
  		if(received > 0){
  		   clearSegmentsAndLEDs();
  		   //writeIntValueToSegments(uReceivedData);
  		   writeHexValueToSegmentAtAdress(received, 0xC0);

  		}
  		//HAL_UART_Transmit(&huart2,transmit,sizeof(transmit)-1,HAL_MAX_DELAY);
  		udelay(5000);
  	}
}

uint8_t readKeysAndDecodeInternalScan()
{
	int i,j;
		uint8_t received = 0;
		uint8_t keys = 0;

		sendInstructionRead();//Read
		DIO(HIGH);
		CDELAY;
	for(i = 0; i < 4; i++ )
	{
		for(j = 0; j < 8; j++)
		{
			CLK(LOW);
			CDELAY;
			CLK(HIGH);

			if(rDIO){
				received = received | (0x01 << j); //setting the bit at position j
			}
			CDELAY;
			CDELAY;
		}
		keys |= received << i;
		received = 0;
	}
		CLK(LOW);
		DIO(LOW);
		STB(HIGH);
		CLK(HIGH);
		DIO(HIGH);
		return keys;
}

void clearSegmentsAndLEDs(void){
	sendInstruction(0x8F); //Lights up
	sendInstruction(0x40); //Command, write to chip, chip autoincrements
	sendStartAdress(0xC0);//Send start adress

		// Sendinging (data,count)
	sendMultipleData(0x00, 16);

}

void writeHexValueToSegmentAtAdress(uint8_t value, uint8_t adress)
{
		uint8_t data;
		uint8_t sendString[10];
	//Decoding low nibble to segment display
		 uint8_t lowMask = 0x0F;
		 uint8_t lowNibble;
		 lowNibble= value & lowMask;
		 lowNibble = decodeHexToSevenSegment(lowNibble);

		//Decoding high nibble to segment display
		 uint8_t highMask = 0xF0;
		 uint8_t highNibble;
		 highNibble= value & highMask;
		 highNibble = highNibble >> 4 ;
		 highNibble = decodeHexToSevenSegment(highNibble);



		 sendInstruction(DATA|FIXED);    //Command, write to chip, chip no autoincrements
		 sendStartAdress(adress+2);
		 sendMultipleData(lowNibble, 1); // One byte


		 sendInstruction(DATA|FIXED); //No auto increment
		 sendStartAdress(adress);
		 sendMultipleData(highNibble, 1);

		 data = highNibble | lowNibble;
		 sprintf(sendString,"%u",data);
		 HAL_UART_Transmit(&huart2,data,sizeof(data),HAL_MAX_DELAY);

}

void writeIntValueToSegments(uint32_t value)
{
	uint8_t adress = 0xC0;
	uint8_t extractedNibblesInByteFormat[8];
	uint32_t mask = 0x0F;
	uint32_t extractedNibbleAs32bit;
	uint8_t nibble;
	uint8_t i;
	for(i = 0; i < 8; i++){
		extractedNibbleAs32bit = mask & value;
		extractedNibbleAs32bit = extractedNibbleAs32bit >> 4*i;
		nibble = (uint8_t)extractedNibbleAs32bit;
		nibble = decodeHexToSevenSegment(nibble);
		extractedNibblesInByteFormat[i] = nibble;
		mask = mask << 4;
	}
	for(i = 0; i < 8; i++){
		sendInstruction(DATA|FIXED);    //Command, write to chip, chip no autoincrements
		sendStartAdress(adress +2*i);
		sendMultipleData(extractedNibblesInByteFormat[7-i], 1); // One byte
		}


}


void udelay(volatile unsigned int delay)
{
	delay*=11.206;
	for (;delay!=0;delay--);
}

void sendbyte(uint8_t data)
{
	uint8_t i;
  //i = i << 1
	for(i=0x1;i!=0;i<<=1)
	{
		DIO(data & i);
		CLK(LOW);
		CDELAY;
		CLK(HIGH);
		CDELAY;
	}
}

uint8_t decodeKeyPressJens(uint32_t value)
{
	return	(value & 0x00000001)<<7  |
			(value & 0x00000100)>>2  |
			(value & 0x00010000)>>11 |
			(value & 0x01000000)>>20 |
			(value & 0x00000010)>>1  |
			(value & 0x00001000)>>10 |
			(value & 0x00100000)>>19 |
			(value & 0x10000000)>>28;
}

uint8_t read4BytesAndDecode(void)
{
	int j;

	uint8_t received = 0;
	uint32_t temp = 0;;
	GPIO_PinState input;
	sendInstructionRead();//Read
	DIO(HIGH);
	CDELAY;

		for(j = 0; j < 32; j++)
		{
			CLK(LOW);
			CDELAY;
			CLK(HIGH);
			input = rDIO;
			if(input == 1){
				temp = temp | (0x01 << j); //setting the bit at position j
			}
			CDELAY;
		}
	 STB(HIGH);
	 received = decodeKeyPressJens(temp);
	return received;
}

uint32_t read4BytesAndConvertToInt()
{
	int j;
	uint32_t received = 0;

	sendInstructionRead();//Read
	DIO(HIGH);
	CDELAY;

	for(j = 0; j < 32; j++)
	{
		CLK(LOW);
		CDELAY;
		CLK(HIGH);

		if(rDIO){
			received = received | (0x01 << j); //setting the bit at position j
		}
		CDELAY;
		CDELAY;
	}
	CLK(LOW);
	DIO(LOW);
	STB(HIGH);
	CLK(HIGH);
	DIO(HIGH);
	return received;
}



uint8_t decodeHexToSevenSegment(uint8_t digit){

	switch(digit){

	case 0: return 0x3F;
	case 1: return 0x06;
	case 2: return 0x5B;
	case 3: return 0x4F;
	case 4: return 0x66;
	case 5: return 0x6D;
	case 6: return 0x7D;
	case 7: return 0x07;
	case 8: return 0x7F;
	case 9: return 0x6F;
	case 0x0A: return 0xB7;
	case 0x0B: return 0xFF;
	case 0x0C: return 0x39;
	case 0x0D: return 0xDE;
	case 0x0E: return 0x79;
	case 0x0F: return 0x71;
	default: return 0x00;


	}
}
void LightUpLedAtPositionDecodedFromHexValue(uint8_t value)
{
	double dValue = (double)value;
	double dI;
	double dTempValue;
	int i;

	//No auto-increment
	sendInstruction(DATA|FIXED);

	//LEDs are on odd adresses
	uint8_t startAdress = 0xCF;
	sendStartAdress(startAdress);
	for(i = 7; i >= 0; i--){
		dI = (double) i;
		dTempValue = dValue/pow(2.0,dI);
		if(dTempValue >= 1.0){
			sendMultipleData(0xFF,1);
			dValue = dValue - dTempValue;
		}else
		{
			sendMultipleData(0x00,1);
		}
		startAdress -= 2;
		sendStartAdress(startAdress);
	}

}


void LightUpLedAtPositionDecodedFromBitPattern(uint8_t value)
{
	//No auto-increment
	sendInstruction(DATA|FIXED);

	//LEDs are on odd adresses
	uint8_t startAdress = 0xCF;//Adress for rightmost LED
	sendStartAdress(startAdress);
	uint8_t i;

		for(i=0x1;i!=0;i<<=1)
		{
			if(value & i)
				sendMultipleData(0xFF,1);//1 Byte
			else
				sendMultipleData(0x00,1);

			startAdress -= 2;
			sendStartAdress(startAdress);
		}

}

void sendValueToSegments(uint8_t value)
{

	//Decoding low nibble to segment display
	 uint8_t lowMask = 0x0F;
	 uint8_t lowNibble;
	 lowNibble= value & lowMask;
	 lowNibble = decodeHexToSevenSegment(lowNibble);

	//Decoding high nibble to segment display
	 uint8_t highMask = 0xF0;
	 uint8_t highNibble;
	 highNibble= value & highMask;
	 highNibble = decodeHexToSevenSegment(highNibble);



	//Starting sending real data to the 2 right most segment displays
	//Command, write to chip, chip no autoincrements
	sendInstruction(DATA|FIXED);

	//Send start adress
	sendStartAdress(0xCC);
	highNibble = 4 >> highNibble;
	sendMultipleData(highNibble, 1);

	//Command, write to chip, chip no autoincrements
	sendInstruction(DATA|FIXED);
	sendStartAdress(0xCE);//Send start adress
	sendMultipleData(lowNibble, 1);


}


void sendInstruction(uint8_t data)
{
	STB(LOW);
	CDELAY;
	sendbyte(data);
	CDELAY;
	STB(HIGH);
	CDELAY;
}
void sendInstructionRead(void)
{
	STB(LOW);
	CDELAY;
	sendbyte(0x42);
	CDELAY;

	//CDELAY;
}

void sendStartAdress(uint8_t data)
{
	STB(LOW);
	CDELAY;
	sendbyte(data);
	CDELAY;
}

void sendMultipleData(uint8_t data, int count)
{
	int i;
	for(i = 0; i < count; i++)
			sendbyte(data);

	CDELAY;
	STB(HIGH);
	CDELAY;
}



/** System Clock Configuration
*/
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
}

/* TIM2 init function */
void MX_TIM2_Init(void)
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 0xffffffff;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim2);

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);

  HAL_TIM_PWM_Init(&htim2);

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);

}

/* USART2 init function */
void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  HAL_UART_Init(&huart2);

}

/** Configure pins as 
        * Analog 
        * Input 
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
  __GPIOH_CLK_ENABLE();
  __GPIOA_CLK_ENABLE();
  __GPIOB_CLK_ENABLE();

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END 5 */ 
}

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
