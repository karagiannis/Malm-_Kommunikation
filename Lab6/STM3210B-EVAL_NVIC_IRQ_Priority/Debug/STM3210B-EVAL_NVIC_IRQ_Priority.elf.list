
STM3210B-EVAL_NVIC_IRQ_Priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cc4  0800010c  0800010c  0000810c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08000dd0  08000dd0  00008dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08000dd4  08000dd4  00008dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000030  20000000  08000dd8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000020  20000030  08000e08  00010030  2**2
                  ALLOC
  6 ._user_heap_stack 00000100  20000050  08000e08  00010050  2**0
                  ALLOC
  7 .ARM.attributes 00000029  00000000  00000000  00010030  2**0
                  CONTENTS, READONLY
  8 .debug_info   00003845  00000000  00000000  00010059  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000d34  00000000  00000000  0001389e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000410  00000000  00000000  000145d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000388  00000000  00000000  000149e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000190b  00000000  00000000  00014d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000177b  00000000  00000000  0001667b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000082  00000000  00000000  00017df6  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00000bbc  00000000  00000000  00017e78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08000db8 	.word	0x08000db8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4803      	ldr	r0, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	08000db8 	.word	0x08000db8
 8000148:	20000034 	.word	0x20000034

0800014c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000150:	4b15      	ldr	r3, [pc, #84]	; (80001a8 <SystemInit+0x5c>)
 8000152:	4a15      	ldr	r2, [pc, #84]	; (80001a8 <SystemInit+0x5c>)
 8000154:	6812      	ldr	r2, [r2, #0]
 8000156:	f042 0201 	orr.w	r2, r2, #1
 800015a:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800015c:	4a12      	ldr	r2, [pc, #72]	; (80001a8 <SystemInit+0x5c>)
 800015e:	4b12      	ldr	r3, [pc, #72]	; (80001a8 <SystemInit+0x5c>)
 8000160:	6859      	ldr	r1, [r3, #4]
 8000162:	4b12      	ldr	r3, [pc, #72]	; (80001ac <SystemInit+0x60>)
 8000164:	400b      	ands	r3, r1
 8000166:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000168:	4a0f      	ldr	r2, [pc, #60]	; (80001a8 <SystemInit+0x5c>)
 800016a:	4b0f      	ldr	r3, [pc, #60]	; (80001a8 <SystemInit+0x5c>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000176:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000178:	4b0b      	ldr	r3, [pc, #44]	; (80001a8 <SystemInit+0x5c>)
 800017a:	4a0b      	ldr	r2, [pc, #44]	; (80001a8 <SystemInit+0x5c>)
 800017c:	6812      	ldr	r2, [r2, #0]
 800017e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000182:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000184:	4b08      	ldr	r3, [pc, #32]	; (80001a8 <SystemInit+0x5c>)
 8000186:	4a08      	ldr	r2, [pc, #32]	; (80001a8 <SystemInit+0x5c>)
 8000188:	6852      	ldr	r2, [r2, #4]
 800018a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800018e:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000190:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <SystemInit+0x5c>)
 8000192:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000196:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000198:	f000 f80c 	bl	80001b4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <SystemInit+0x64>)
 800019e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80001a2:	609a      	str	r2, [r3, #8]
#endif 
}
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	40021000 	.word	0x40021000
 80001ac:	f8ff0000 	.word	0xf8ff0000
 80001b0:	e000ed00 	.word	0xe000ed00

080001b4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80001b8:	f000 f802 	bl	80001c0 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop

080001c0 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80001c0:	b480      	push	{r7}
 80001c2:	b083      	sub	sp, #12
 80001c4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80001c6:	2300      	movs	r3, #0
 80001c8:	607b      	str	r3, [r7, #4]
 80001ca:	2300      	movs	r3, #0
 80001cc:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80001ce:	4b3a      	ldr	r3, [pc, #232]	; (80002b8 <SetSysClockTo72+0xf8>)
 80001d0:	4a39      	ldr	r2, [pc, #228]	; (80002b8 <SetSysClockTo72+0xf8>)
 80001d2:	6812      	ldr	r2, [r2, #0]
 80001d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80001d8:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80001da:	4b37      	ldr	r3, [pc, #220]	; (80002b8 <SetSysClockTo72+0xf8>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001e2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d103      	bne.n	80001f8 <SetSysClockTo72+0x38>
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80001f6:	d1f0      	bne.n	80001da <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80001f8:	4b2f      	ldr	r3, [pc, #188]	; (80002b8 <SetSysClockTo72+0xf8>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000200:	2b00      	cmp	r3, #0
 8000202:	d002      	beq.n	800020a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000204:	2301      	movs	r3, #1
 8000206:	603b      	str	r3, [r7, #0]
 8000208:	e001      	b.n	800020e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800020a:	2300      	movs	r3, #0
 800020c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	2b01      	cmp	r3, #1
 8000212:	d14b      	bne.n	80002ac <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000214:	4b29      	ldr	r3, [pc, #164]	; (80002bc <SetSysClockTo72+0xfc>)
 8000216:	4a29      	ldr	r2, [pc, #164]	; (80002bc <SetSysClockTo72+0xfc>)
 8000218:	6812      	ldr	r2, [r2, #0]
 800021a:	f042 0210 	orr.w	r2, r2, #16
 800021e:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000220:	4b26      	ldr	r3, [pc, #152]	; (80002bc <SetSysClockTo72+0xfc>)
 8000222:	4a26      	ldr	r2, [pc, #152]	; (80002bc <SetSysClockTo72+0xfc>)
 8000224:	6812      	ldr	r2, [r2, #0]
 8000226:	f022 0203 	bic.w	r2, r2, #3
 800022a:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800022c:	4b23      	ldr	r3, [pc, #140]	; (80002bc <SetSysClockTo72+0xfc>)
 800022e:	4a23      	ldr	r2, [pc, #140]	; (80002bc <SetSysClockTo72+0xfc>)
 8000230:	6812      	ldr	r2, [r2, #0]
 8000232:	f042 0202 	orr.w	r2, r2, #2
 8000236:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000238:	4b1f      	ldr	r3, [pc, #124]	; (80002b8 <SetSysClockTo72+0xf8>)
 800023a:	4a1f      	ldr	r2, [pc, #124]	; (80002b8 <SetSysClockTo72+0xf8>)
 800023c:	6852      	ldr	r2, [r2, #4]
 800023e:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000240:	4b1d      	ldr	r3, [pc, #116]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000242:	4a1d      	ldr	r2, [pc, #116]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000244:	6852      	ldr	r2, [r2, #4]
 8000246:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000248:	4b1b      	ldr	r3, [pc, #108]	; (80002b8 <SetSysClockTo72+0xf8>)
 800024a:	4a1b      	ldr	r2, [pc, #108]	; (80002b8 <SetSysClockTo72+0xf8>)
 800024c:	6852      	ldr	r2, [r2, #4]
 800024e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000252:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000254:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000256:	4a18      	ldr	r2, [pc, #96]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000258:	6852      	ldr	r2, [r2, #4]
 800025a:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800025e:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000262:	4a15      	ldr	r2, [pc, #84]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000264:	6852      	ldr	r2, [r2, #4]
 8000266:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 800026a:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <SetSysClockTo72+0xf8>)
 800026e:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000270:	6812      	ldr	r2, [r2, #0]
 8000272:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000276:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000278:	bf00      	nop
 800027a:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <SetSysClockTo72+0xf8>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000282:	2b00      	cmp	r3, #0
 8000284:	d0f9      	beq.n	800027a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000286:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000288:	4a0b      	ldr	r2, [pc, #44]	; (80002b8 <SetSysClockTo72+0xf8>)
 800028a:	6852      	ldr	r2, [r2, #4]
 800028c:	f022 0203 	bic.w	r2, r2, #3
 8000290:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000292:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000294:	4a08      	ldr	r2, [pc, #32]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000296:	6852      	ldr	r2, [r2, #4]
 8000298:	f042 0202 	orr.w	r2, r2, #2
 800029c:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800029e:	bf00      	nop
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <SetSysClockTo72+0xf8>)
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	f003 030c 	and.w	r3, r3, #12
 80002a8:	2b08      	cmp	r3, #8
 80002aa:	d1f9      	bne.n	80002a0 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	40021000 	.word	0x40021000
 80002bc:	40022000 	.word	0x40022000

080002c0 <NVIC_GetPriorityGrouping>:
  Priority grouping is SCB->AIRCR [10:8] PRIGROUP field.

    \return                Priority grouping field
 */
static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 80002c4:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <NVIC_GetPriorityGrouping+0x18>)
 80002c6:	68db      	ldr	r3, [r3, #12]
 80002c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80002cc:	0a1b      	lsrs	r3, r3, #8
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	e000ed00 	.word	0xe000ed00

080002dc <NVIC_GetActive>:
    \param [in]      IRQn  Number of the interrupt for get active
    \return             0  Interrupt status is not active
    \return             1  Interrupt status is active
 */
static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
  return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if active else 0 */
 80002e6:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <NVIC_GetActive+0x3c>)
 80002e8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80002ec:	0952      	lsrs	r2, r2, #5
 80002ee:	3280      	adds	r2, #128	; 0x80
 80002f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	f003 031f 	and.w	r3, r3, #31
 80002fa:	2101      	movs	r1, #1
 80002fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000300:	4013      	ands	r3, r2
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <NVIC_GetActive+0x2e>
 8000306:	2301      	movs	r3, #1
 8000308:	e000      	b.n	800030c <NVIC_GetActive+0x30>
 800030a:	2300      	movs	r3, #0
}
 800030c:	4618      	mov	r0, r3
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	e000e100 	.word	0xe000e100

0800031c <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	6039      	str	r1, [r7, #0]
 8000326:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032c:	2b00      	cmp	r3, #0
 800032e:	da0b      	bge.n	8000348 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000330:	490d      	ldr	r1, [pc, #52]	; (8000368 <NVIC_SetPriority+0x4c>)
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	f003 030f 	and.w	r3, r3, #15
 8000338:	3b04      	subs	r3, #4
 800033a:	683a      	ldr	r2, [r7, #0]
 800033c:	b2d2      	uxtb	r2, r2
 800033e:	0112      	lsls	r2, r2, #4
 8000340:	b2d2      	uxtb	r2, r2
 8000342:	440b      	add	r3, r1
 8000344:	761a      	strb	r2, [r3, #24]
 8000346:	e009      	b.n	800035c <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000348:	4908      	ldr	r1, [pc, #32]	; (800036c <NVIC_SetPriority+0x50>)
 800034a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034e:	683a      	ldr	r2, [r7, #0]
 8000350:	b2d2      	uxtb	r2, r2
 8000352:	0112      	lsls	r2, r2, #4
 8000354:	b2d2      	uxtb	r2, r2
 8000356:	440b      	add	r3, r1
 8000358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	e000ed00 	.word	0xe000ed00
 800036c:	e000e100 	.word	0xe000e100

08000370 <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0)
    \param [in]       SubPriority  Sub priority value (starting from 0)
    \return                        Encoded priority for the interrupt
 */
static __INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000370:	b480      	push	{r7}
 8000372:	b089      	sub	sp, #36	; 0x24
 8000374:	af00      	add	r7, sp, #0
 8000376:	60f8      	str	r0, [r7, #12]
 8000378:	60b9      	str	r1, [r7, #8]
 800037a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	f003 0307 	and.w	r3, r3, #7
 8000382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8000384:	69fb      	ldr	r3, [r7, #28]
 8000386:	f1c3 0307 	rsb	r3, r3, #7
 800038a:	2b04      	cmp	r3, #4
 800038c:	bf28      	it	cs
 800038e:	2304      	movcs	r3, #4
 8000390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8000392:	69fb      	ldr	r3, [r7, #28]
 8000394:	3304      	adds	r3, #4
 8000396:	2b06      	cmp	r3, #6
 8000398:	d902      	bls.n	80003a0 <NVIC_EncodePriority+0x30>
 800039a:	69fb      	ldr	r3, [r7, #28]
 800039c:	3b03      	subs	r3, #3
 800039e:	e000      	b.n	80003a2 <NVIC_EncodePriority+0x32>
 80003a0:	2300      	movs	r3, #0
 80003a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 80003a4:	69bb      	ldr	r3, [r7, #24]
 80003a6:	2201      	movs	r2, #1
 80003a8:	fa02 f303 	lsl.w	r3, r2, r3
 80003ac:	3b01      	subs	r3, #1
 80003ae:	461a      	mov	r2, r3
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	401a      	ands	r2, r3
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	409a      	lsls	r2, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 80003b8:	697b      	ldr	r3, [r7, #20]
 80003ba:	2101      	movs	r1, #1
 80003bc:	fa01 f303 	lsl.w	r3, r1, r3
 80003c0:	3b01      	subs	r3, #1
 80003c2:	4619      	mov	r1, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 80003c8:	4313      	orrs	r3, r2
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
         );
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	3724      	adds	r7, #36	; 0x24
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop

080003d8 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
}
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr

080003e4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80003e8:	e7fe      	b.n	80003e8 <HardFault_Handler+0x4>
 80003ea:	bf00      	nop

080003ec <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80003f0:	e7fe      	b.n	80003f0 <MemManage_Handler+0x4>
 80003f2:	bf00      	nop

080003f4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80003f8:	e7fe      	b.n	80003f8 <BusFault_Handler+0x4>
 80003fa:	bf00      	nop

080003fc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000400:	e7fe      	b.n	8000400 <UsageFault_Handler+0x4>
 8000402:	bf00      	nop

08000404 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
}
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
}
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr

0800041c <PendSV_Handler>:
  * @brief  This function handles PendSV_Handler exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
}
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* If the EXTI0 IRQ Handler was preempted by SysTick Handler */
  if(NVIC_GetActive(WAKEUP_BUTTON_EXTI_IRQn) != 0)
 800042c:	2006      	movs	r0, #6
 800042e:	f7ff ff55 	bl	80002dc <NVIC_GetActive>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d002      	beq.n	800043e <SysTick_Handler+0x16>
  {
    PreemptionOccured = 1;
 8000438:	4b01      	ldr	r3, [pc, #4]	; (8000440 <SysTick_Handler+0x18>)
 800043a:	2201      	movs	r2, #1
 800043c:	701a      	strb	r2, [r3, #0]
  }
}
 800043e:	bd80      	pop	{r7, pc}
 8000440:	2000004c 	.word	0x2000004c

08000444 <EXTI0_IRQHandler>:
  * @brief  This function handles External interrupt Line 0 request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* Generate SysTick exception */
  SCB->ICSR |= 0x04000000;
 8000448:	4b04      	ldr	r3, [pc, #16]	; (800045c <EXTI0_IRQHandler+0x18>)
 800044a:	4a04      	ldr	r2, [pc, #16]	; (800045c <EXTI0_IRQHandler+0x18>)
 800044c:	6852      	ldr	r2, [r2, #4]
 800044e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000452:	605a      	str	r2, [r3, #4]
  
  /* Clear WAKEUP_BUTTON_EXTI_LINE pending bit */
  EXTI_ClearITPendingBit(WAKEUP_BUTTON_EXTI_LINE);
 8000454:	2001      	movs	r0, #1
 8000456:	f000 fbc5 	bl	8000be4 <EXTI_ClearITPendingBit>
}
 800045a:	bd80      	pop	{r7, pc}
 800045c:	e000ed00 	.word	0xe000ed00

08000460 <EXTI9_5_IRQHandler>:
  * @brief  This function handles External lines 9 to 5 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI9_5_IRQHandler(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
  NVIC_InitTypeDef NVIC_InitStructure;
  
  if(EXTI_GetITStatus(KEY_BUTTON_EXTI_LINE) != RESET)
 8000466:	f44f 7000 	mov.w	r0, #512	; 0x200
 800046a:	f000 fb97 	bl	8000b9c <EXTI_GetITStatus>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d032      	beq.n	80004da <EXTI9_5_IRQHandler+0x7a>
  {
    PreemptionPriorityValue = !PreemptionPriorityValue;
 8000474:	4b1a      	ldr	r3, [pc, #104]	; (80004e0 <EXTI9_5_IRQHandler+0x80>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	bf14      	ite	ne
 800047c:	2300      	movne	r3, #0
 800047e:	2301      	moveq	r3, #1
 8000480:	b2db      	uxtb	r3, r3
 8000482:	461a      	mov	r2, r3
 8000484:	4b16      	ldr	r3, [pc, #88]	; (80004e0 <EXTI9_5_IRQHandler+0x80>)
 8000486:	701a      	strb	r2, [r3, #0]
    PreemptionOccured = 0;
 8000488:	4b16      	ldr	r3, [pc, #88]	; (80004e4 <EXTI9_5_IRQHandler+0x84>)
 800048a:	2200      	movs	r2, #0
 800048c:	701a      	strb	r2, [r3, #0]

    /* Modify the WAKEUP_BUTTON_EXTI_IRQn Interrupt Preemption Priority */
    NVIC_InitStructure.NVIC_IRQChannel = WAKEUP_BUTTON_EXTI_IRQn;
 800048e:	2306      	movs	r3, #6
 8000490:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = PreemptionPriorityValue;
 8000492:	4b13      	ldr	r3, [pc, #76]	; (80004e0 <EXTI9_5_IRQHandler+0x80>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800049c:	2301      	movs	r3, #1
 800049e:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	4618      	mov	r0, r3
 80004a4:	f000 fbbe 	bl	8000c24 <NVIC_Init>
    
    /* Configure the SysTick Handler Priority: Preemption priority and subpriority */
    NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), !PreemptionPriorityValue, 0));    
 80004a8:	f7ff ff0a 	bl	80002c0 <NVIC_GetPriorityGrouping>
 80004ac:	4602      	mov	r2, r0
 80004ae:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <EXTI9_5_IRQHandler+0x80>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	bf14      	ite	ne
 80004b6:	2300      	movne	r3, #0
 80004b8:	2301      	moveq	r3, #1
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	4610      	mov	r0, r2
 80004be:	4619      	mov	r1, r3
 80004c0:	2200      	movs	r2, #0
 80004c2:	f7ff ff55 	bl	8000370 <NVIC_EncodePriority>
 80004c6:	4603      	mov	r3, r0
 80004c8:	f04f 30ff 	mov.w	r0, #4294967295
 80004cc:	4619      	mov	r1, r3
 80004ce:	f7ff ff25 	bl	800031c <NVIC_SetPriority>

    /* Clear KEY_BUTTON_EXTI_LINE pending bit */
    EXTI_ClearITPendingBit(KEY_BUTTON_EXTI_LINE);
 80004d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004d6:	f000 fb85 	bl	8000be4 <EXTI_ClearITPendingBit>
  }
}
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	2000004d 	.word	0x2000004d
 80004e4:	2000004c 	.word	0x2000004c

080004e8 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80004e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80004ea:	f000 b804 	b.w	80004f6 <LoopCopyDataInit>

080004ee <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <LoopFillZerobss+0x16>)
	ldr	r3, [r3, r1]
 80004f0:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80004f2:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80004f4:	3104      	adds	r1, #4

080004f6 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80004f6:	480c      	ldr	r0, [pc, #48]	; (8000528 <LoopFillZerobss+0x1a>)
	ldr	r3, =_edata
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <LoopFillZerobss+0x1e>)
	adds	r2, r0, r1
 80004fa:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80004fc:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80004fe:	f4ff aff6 	bcc.w	80004ee <CopyDataInit>
	ldr	r2, =_sbss
 8000502:	4a0b      	ldr	r2, [pc, #44]	; (8000530 <LoopFillZerobss+0x22>)
	b	LoopFillZerobss
 8000504:	f000 b803 	b.w	800050e <LoopFillZerobss>

08000508 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000508:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800050a:	f842 3b04 	str.w	r3, [r2], #4

0800050e <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <LoopFillZerobss+0x26>)
	cmp	r2, r3
 8000510:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000512:	f4ff aff9 	bcc.w	8000508 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000516:	f7ff fe19 	bl	800014c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800051a:	f000 fbe3 	bl	8000ce4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800051e:	f000 f879 	bl	8000614 <main>
	bx	lr
 8000522:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000524:	08000dd8 	.word	0x08000dd8
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000528:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800052c:	20000030 	.word	0x20000030
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000530:	20000030 	.word	0x20000030
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000534:	20000050 	.word	0x20000050

08000538 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000538:	f7ff bffe 	b.w	8000538 <ADC1_2_IRQHandler>

0800053c <NVIC_GetPriorityGrouping>:
  Priority grouping is SCB->AIRCR [10:8] PRIGROUP field.

    \return                Priority grouping field
 */
static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8000540:	4b04      	ldr	r3, [pc, #16]	; (8000554 <NVIC_GetPriorityGrouping+0x18>)
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000548:	0a1b      	lsrs	r3, r3, #8
}
 800054a:	4618      	mov	r0, r3
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	6039      	str	r1, [r7, #0]
 8000562:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000568:	2b00      	cmp	r3, #0
 800056a:	da0b      	bge.n	8000584 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800056c:	490d      	ldr	r1, [pc, #52]	; (80005a4 <NVIC_SetPriority+0x4c>)
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	f003 030f 	and.w	r3, r3, #15
 8000574:	3b04      	subs	r3, #4
 8000576:	683a      	ldr	r2, [r7, #0]
 8000578:	b2d2      	uxtb	r2, r2
 800057a:	0112      	lsls	r2, r2, #4
 800057c:	b2d2      	uxtb	r2, r2
 800057e:	440b      	add	r3, r1
 8000580:	761a      	strb	r2, [r3, #24]
 8000582:	e009      	b.n	8000598 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000584:	4908      	ldr	r1, [pc, #32]	; (80005a8 <NVIC_SetPriority+0x50>)
 8000586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058a:	683a      	ldr	r2, [r7, #0]
 800058c:	b2d2      	uxtb	r2, r2
 800058e:	0112      	lsls	r2, r2, #4
 8000590:	b2d2      	uxtb	r2, r2
 8000592:	440b      	add	r3, r1
 8000594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	e000ed00 	.word	0xe000ed00
 80005a8:	e000e100 	.word	0xe000e100

080005ac <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0)
    \param [in]       SubPriority  Sub priority value (starting from 0)
    \return                        Encoded priority for the interrupt
 */
static __INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b089      	sub	sp, #36	; 0x24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	f003 0307 	and.w	r3, r3, #7
 80005be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 80005c0:	69fb      	ldr	r3, [r7, #28]
 80005c2:	f1c3 0307 	rsb	r3, r3, #7
 80005c6:	2b04      	cmp	r3, #4
 80005c8:	bf28      	it	cs
 80005ca:	2304      	movcs	r3, #4
 80005cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 80005ce:	69fb      	ldr	r3, [r7, #28]
 80005d0:	3304      	adds	r3, #4
 80005d2:	2b06      	cmp	r3, #6
 80005d4:	d902      	bls.n	80005dc <NVIC_EncodePriority+0x30>
 80005d6:	69fb      	ldr	r3, [r7, #28]
 80005d8:	3b03      	subs	r3, #3
 80005da:	e000      	b.n	80005de <NVIC_EncodePriority+0x32>
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 80005e0:	69bb      	ldr	r3, [r7, #24]
 80005e2:	2201      	movs	r2, #1
 80005e4:	fa02 f303 	lsl.w	r3, r2, r3
 80005e8:	3b01      	subs	r3, #1
 80005ea:	461a      	mov	r2, r3
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	401a      	ands	r2, r3
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	409a      	lsls	r2, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	2101      	movs	r1, #1
 80005f8:	fa01 f303 	lsl.w	r3, r1, r3
 80005fc:	3b01      	subs	r3, #1
 80005fe:	4619      	mov	r1, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 8000604:	4313      	orrs	r3, r2
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
         );
}
 8000606:	4618      	mov	r0, r3
 8000608:	3724      	adds	r7, #36	; 0x24
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <main>:
  * @brief  Main program.
  * @param  None
  * @retval None
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
       To reconfigure the default setting of SystemInit() function, refer to
       system_stm32f10x.c file
     */     
       
  /* NVIC configuration ------------------------------------------------------*/
  NVIC_Config();     
 8000618:	f000 f850 	bl	80006bc <NVIC_Config>
  
  /* Initialize LED1..LED4, Key and Sel Joystick Buttons mounted on STM3210X-EVAL 
     board */       
  STM_EVAL_LEDInit(LED1);
 800061c:	2000      	movs	r0, #0
 800061e:	f000 f883 	bl	8000728 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED2);
 8000622:	2001      	movs	r0, #1
 8000624:	f000 f880 	bl	8000728 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED3);
 8000628:	2002      	movs	r0, #2
 800062a:	f000 f87d 	bl	8000728 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED4);
 800062e:	2003      	movs	r0, #3
 8000630:	f000 f87a 	bl	8000728 <STM_EVAL_LEDInit>
  STM_EVAL_PBInit(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000634:	2002      	movs	r0, #2
 8000636:	2101      	movs	r1, #1
 8000638:	f000 f8be 	bl	80007b8 <STM_EVAL_PBInit>
  STM_EVAL_PBInit(BUTTON_WAKEUP, BUTTON_MODE_EXTI); 
 800063c:	2000      	movs	r0, #0
 800063e:	2101      	movs	r1, #1
 8000640:	f000 f8ba 	bl	80007b8 <STM_EVAL_PBInit>

  /* Configure the SysTick Handler Priority: Preemption priority and subpriority */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), !PreemptionPriorityValue, 0));
 8000644:	f7ff ff7a 	bl	800053c <NVIC_GetPriorityGrouping>
 8000648:	4602      	mov	r2, r0
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <main+0x9c>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	2b00      	cmp	r3, #0
 8000652:	bf14      	ite	ne
 8000654:	2300      	movne	r3, #0
 8000656:	2301      	moveq	r3, #1
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4610      	mov	r0, r2
 800065c:	4619      	mov	r1, r3
 800065e:	2200      	movs	r2, #0
 8000660:	f7ff ffa4 	bl	80005ac <NVIC_EncodePriority>
 8000664:	4603      	mov	r3, r0
 8000666:	f04f 30ff 	mov.w	r0, #4294967295
 800066a:	4619      	mov	r1, r3
 800066c:	f7ff ff74 	bl	8000558 <NVIC_SetPriority>

  while (1)
  {
    if(PreemptionOccured != 0)
 8000670:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <main+0xa0>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	2b00      	cmp	r3, #0
 8000678:	d018      	beq.n	80006ac <main+0x98>
    {
      /* Toggel The lED1 */
      STM_EVAL_LEDToggle(LED1);
 800067a:	2000      	movs	r0, #0
 800067c:	f000 f87e 	bl	800077c <STM_EVAL_LEDToggle>
      
      /* Insert delay Time */
      Delay(0x5FFFF);
 8000680:	480d      	ldr	r0, [pc, #52]	; (80006b8 <main+0xa4>)
 8000682:	f000 f841 	bl	8000708 <Delay>
      
      STM_EVAL_LEDToggle(LED2);
 8000686:	2001      	movs	r0, #1
 8000688:	f000 f878 	bl	800077c <STM_EVAL_LEDToggle>
      
      Delay(0x5FFFF);
 800068c:	480a      	ldr	r0, [pc, #40]	; (80006b8 <main+0xa4>)
 800068e:	f000 f83b 	bl	8000708 <Delay>
      
      STM_EVAL_LEDToggle(LED3);
 8000692:	2002      	movs	r0, #2
 8000694:	f000 f872 	bl	800077c <STM_EVAL_LEDToggle>
      
      Delay(0x5FFFF);
 8000698:	4807      	ldr	r0, [pc, #28]	; (80006b8 <main+0xa4>)
 800069a:	f000 f835 	bl	8000708 <Delay>
      
      STM_EVAL_LEDToggle(LED4);
 800069e:	2003      	movs	r0, #3
 80006a0:	f000 f86c 	bl	800077c <STM_EVAL_LEDToggle>
      
      Delay(0x5FFFF); 
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <main+0xa4>)
 80006a6:	f000 f82f 	bl	8000708 <Delay>
    }
  }
 80006aa:	e7e1      	b.n	8000670 <main+0x5c>
 80006ac:	e7e0      	b.n	8000670 <main+0x5c>
 80006ae:	bf00      	nop
 80006b0:	2000004d 	.word	0x2000004d
 80006b4:	2000004c 	.word	0x2000004c
 80006b8:	0005ffff 	.word	0x0005ffff

080006bc <NVIC_Config>:
  * @brief  Configures the NVIC interrupts.
  * @param  None
  * @retval None
  */
void NVIC_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
  /* Configure the preemption priority and subpriority:
     - 1 bits for pre-emption priority: possible value are 0 or 1 
     - 3 bits for subpriority: possible value are 0..7
     - Lower values gives higher priority  
   */
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 80006c2:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80006c6:	f000 fa9b 	bl	8000c00 <NVIC_PriorityGroupConfig>
  
  /* Enable the WAKEUP_BUTTON_EXTI_IRQn Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = WAKEUP_BUTTON_EXTI_IRQn;
 80006ca:	2306      	movs	r3, #6
 80006cc:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = PreemptionPriorityValue;
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <NVIC_Config+0x48>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80006da:	2301      	movs	r3, #1
 80006dc:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fa9f 	bl	8000c24 <NVIC_Init>
  
  /* Enable the KEY_BUTTON_EXTI_IRQn Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = KEY_BUTTON_EXTI_IRQn;
 80006e6:	2317      	movs	r3, #23
 80006e8:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80006f2:	2301      	movs	r3, #1
 80006f4:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 fa93 	bl	8000c24 <NVIC_Init>
}
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	2000004d 	.word	0x2000004d

08000708 <Delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
void Delay(__IO uint32_t nCount)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 8000710:	e002      	b.n	8000718 <Delay+0x10>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	3b01      	subs	r3, #1
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1f9      	bne.n	8000712 <Delay+0xa>
}
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <STM_EVAL_LEDInit>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_APB2PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8000732:	79fa      	ldrb	r2, [r7, #7]
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <STM_EVAL_LEDInit+0x48>)
 8000736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800073a:	4618      	mov	r0, r3
 800073c:	2101      	movs	r1, #1
 800073e:	f000 f8a7 	bl	8000890 <RCC_APB2PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8000742:	79fa      	ldrb	r2, [r7, #7]
 8000744:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <STM_EVAL_LEDInit+0x4c>)
 8000746:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800074a:	81bb      	strh	r3, [r7, #12]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800074c:	2310      	movs	r3, #16
 800074e:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000750:	2303      	movs	r3, #3
 8000752:	73bb      	strb	r3, [r7, #14]

  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8000754:	79fa      	ldrb	r2, [r7, #7]
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <STM_EVAL_LEDInit+0x50>)
 8000758:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	4610      	mov	r0, r2
 8000762:	4619      	mov	r1, r3
 8000764:	f000 f8b2 	bl	80008cc <GPIO_Init>
}
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	08000d38 	.word	0x08000d38
 8000774:	08000d30 	.word	0x08000d30
 8000778:	20000000 	.word	0x20000000

0800077c <STM_EVAL_LEDToggle>:
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8000786:	79fa      	ldrb	r2, [r7, #7]
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <STM_EVAL_LEDToggle+0x34>)
 800078a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800078e:	79f9      	ldrb	r1, [r7, #7]
 8000790:	4a07      	ldr	r2, [pc, #28]	; (80007b0 <STM_EVAL_LEDToggle+0x34>)
 8000792:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000796:	68d1      	ldr	r1, [r2, #12]
 8000798:	79f8      	ldrb	r0, [r7, #7]
 800079a:	4a06      	ldr	r2, [pc, #24]	; (80007b4 <STM_EVAL_LEDToggle+0x38>)
 800079c:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 80007a0:	404a      	eors	r2, r1
 80007a2:	60da      	str	r2, [r3, #12]
}
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	20000000 	.word	0x20000000
 80007b4:	08000d30 	.word	0x08000d30

080007b8 <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                     generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4602      	mov	r2, r0
 80007c0:	460b      	mov	r3, r1
 80007c2:	71fa      	strb	r2, [r7, #7]
 80007c4:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_APB2PeriphClockCmd(BUTTON_CLK[Button] | RCC_APB2Periph_AFIO, ENABLE);
 80007c6:	79fa      	ldrb	r2, [r7, #7]
 80007c8:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <STM_EVAL_PBInit+0xbc>)
 80007ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	4618      	mov	r0, r3
 80007d4:	2101      	movs	r1, #1
 80007d6:	f000 f85b 	bl	8000890 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input floating */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80007da:	2304      	movs	r3, #4
 80007dc:	75fb      	strb	r3, [r7, #23]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 80007de:	79fa      	ldrb	r2, [r7, #7]
 80007e0:	4b25      	ldr	r3, [pc, #148]	; (8000878 <STM_EVAL_PBInit+0xc0>)
 80007e2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007e6:	82bb      	strh	r3, [r7, #20]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 80007e8:	79fa      	ldrb	r2, [r7, #7]
 80007ea:	4b24      	ldr	r3, [pc, #144]	; (800087c <STM_EVAL_PBInit+0xc4>)
 80007ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4610      	mov	r0, r2
 80007f6:	4619      	mov	r1, r3
 80007f8:	f000 f868 	bl	80008cc <GPIO_Init>


  if (Button_Mode == BUTTON_MODE_EXTI)
 80007fc:	79bb      	ldrb	r3, [r7, #6]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d134      	bne.n	800086c <STM_EVAL_PBInit+0xb4>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    GPIO_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8000802:	79fa      	ldrb	r2, [r7, #7]
 8000804:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <STM_EVAL_PBInit+0xc8>)
 8000806:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800080a:	b2da      	uxtb	r2, r3
 800080c:	79f9      	ldrb	r1, [r7, #7]
 800080e:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <STM_EVAL_PBInit+0xcc>)
 8000810:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	4610      	mov	r0, r2
 8000818:	4619      	mov	r1, r3
 800081a:	f000 f913 	bl	8000a44 <GPIO_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 800081e:	79fa      	ldrb	r2, [r7, #7]
 8000820:	4b19      	ldr	r3, [pc, #100]	; (8000888 <STM_EVAL_PBInit+0xd0>)
 8000822:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000826:	60fb      	str	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000828:	2300      	movs	r3, #0
 800082a:	743b      	strb	r3, [r7, #16]

    if(Button != BUTTON_WAKEUP)
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d002      	beq.n	8000838 <STM_EVAL_PBInit+0x80>
    {
      EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;  
 8000832:	230c      	movs	r3, #12
 8000834:	747b      	strb	r3, [r7, #17]
 8000836:	e001      	b.n	800083c <STM_EVAL_PBInit+0x84>
    }
    else
    {
      EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8000838:	2308      	movs	r3, #8
 800083a:	747b      	strb	r3, [r7, #17]
    }
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800083c:	2301      	movs	r3, #1
 800083e:	74bb      	strb	r3, [r7, #18]
    EXTI_Init(&EXTI_InitStructure);
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	4618      	mov	r0, r3
 8000846:	f000 f93b 	bl	8000ac0 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 800084a:	79fa      	ldrb	r2, [r7, #7]
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <STM_EVAL_PBInit+0xd4>)
 800084e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	723b      	strb	r3, [r7, #8]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8000856:	230f      	movs	r3, #15
 8000858:	727b      	strb	r3, [r7, #9]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 800085a:	230f      	movs	r3, #15
 800085c:	72bb      	strb	r3, [r7, #10]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800085e:	2301      	movs	r3, #1
 8000860:	72fb      	strb	r3, [r7, #11]

    NVIC_Init(&NVIC_InitStructure); 
 8000862:	f107 0308 	add.w	r3, r7, #8
 8000866:	4618      	mov	r0, r3
 8000868:	f000 f9dc 	bl	8000c24 <NVIC_Init>
  }
}
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	08000d58 	.word	0x08000d58
 8000878:	08000d48 	.word	0x08000d48
 800087c:	20000010 	.word	0x20000010
 8000880:	08000d88 	.word	0x08000d88
 8000884:	08000d98 	.word	0x08000d98
 8000888:	08000d78 	.word	0x08000d78
 800088c:	08000da8 	.word	0x08000da8

08000890 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	460b      	mov	r3, r1
 800089a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800089c:	78fb      	ldrb	r3, [r7, #3]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d006      	beq.n	80008b0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <RCC_APB2PeriphClockCmd+0x38>)
 80008a4:	4a08      	ldr	r2, [pc, #32]	; (80008c8 <RCC_APB2PeriphClockCmd+0x38>)
 80008a6:	6991      	ldr	r1, [r2, #24]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	430a      	orrs	r2, r1
 80008ac:	619a      	str	r2, [r3, #24]
 80008ae:	e006      	b.n	80008be <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <RCC_APB2PeriphClockCmd+0x38>)
 80008b2:	4a05      	ldr	r2, [pc, #20]	; (80008c8 <RCC_APB2PeriphClockCmd+0x38>)
 80008b4:	6991      	ldr	r1, [r2, #24]
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	43d2      	mvns	r2, r2
 80008ba:	400a      	ands	r2, r1
 80008bc:	619a      	str	r2, [r3, #24]
  }
}
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	40021000 	.word	0x40021000

080008cc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b089      	sub	sp, #36	; 0x24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	78db      	ldrb	r3, [r3, #3]
 80008f2:	f003 030f 	and.w	r3, r3, #15
 80008f6:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	78db      	ldrb	r3, [r3, #3]
 80008fc:	f003 0310 	and.w	r3, r3, #16
 8000900:	2b00      	cmp	r3, #0
 8000902:	d004      	beq.n	800090e <GPIO_Init+0x42>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	789b      	ldrb	r3, [r3, #2]
 8000908:	69fa      	ldr	r2, [r7, #28]
 800090a:	4313      	orrs	r3, r2
 800090c:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	b2db      	uxtb	r3, r3
 8000914:	2b00      	cmp	r3, #0
 8000916:	d044      	beq.n	80009a2 <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
 8000922:	e038      	b.n	8000996 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	2201      	movs	r2, #1
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	461a      	mov	r2, r3
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	4013      	ands	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	429a      	cmp	r2, r3
 8000940:	d126      	bne.n	8000990 <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	220f      	movs	r2, #15
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	43db      	mvns	r3, r3
 8000956:	697a      	ldr	r2, [r7, #20]
 8000958:	4013      	ands	r3, r2
 800095a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	69fa      	ldr	r2, [r7, #28]
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	697a      	ldr	r2, [r7, #20]
 8000966:	4313      	orrs	r3, r2
 8000968:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	78db      	ldrb	r3, [r3, #3]
 800096e:	2b28      	cmp	r3, #40	; 0x28
 8000970:	d105      	bne.n	800097e <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	2201      	movs	r2, #1
 8000976:	409a      	lsls	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	615a      	str	r2, [r3, #20]
 800097c:	e008      	b.n	8000990 <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	78db      	ldrb	r3, [r3, #3]
 8000982:	2b48      	cmp	r3, #72	; 0x48
 8000984:	d104      	bne.n	8000990 <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	2201      	movs	r2, #1
 800098a:	409a      	lsls	r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	3301      	adds	r3, #1
 8000994:	61bb      	str	r3, [r7, #24]
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	2b07      	cmp	r3, #7
 800099a:	d9c3      	bls.n	8000924 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	697a      	ldr	r2, [r7, #20]
 80009a0:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	2bff      	cmp	r3, #255	; 0xff
 80009a8:	d946      	bls.n	8000a38 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
 80009b4:	e03a      	b.n	8000a2c <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	3308      	adds	r3, #8
 80009ba:	2201      	movs	r2, #1
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	4013      	ands	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d127      	bne.n	8000a26 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	220f      	movs	r2, #15
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	43db      	mvns	r3, r3
 80009ea:	697a      	ldr	r2, [r7, #20]
 80009ec:	4013      	ands	r3, r2
 80009ee:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	69fa      	ldr	r2, [r7, #28]
 80009f4:	fa02 f303 	lsl.w	r3, r2, r3
 80009f8:	697a      	ldr	r2, [r7, #20]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	78db      	ldrb	r3, [r3, #3]
 8000a02:	2b28      	cmp	r3, #40	; 0x28
 8000a04:	d105      	bne.n	8000a12 <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000a06:	69bb      	ldr	r3, [r7, #24]
 8000a08:	3308      	adds	r3, #8
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	409a      	lsls	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	78db      	ldrb	r3, [r3, #3]
 8000a16:	2b48      	cmp	r3, #72	; 0x48
 8000a18:	d105      	bne.n	8000a26 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	3308      	adds	r3, #8
 8000a1e:	2201      	movs	r2, #1
 8000a20:	409a      	lsls	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	61bb      	str	r3, [r7, #24]
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	2b07      	cmp	r3, #7
 8000a30:	d9c1      	bls.n	80009b6 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	697a      	ldr	r2, [r7, #20]
 8000a36:	605a      	str	r2, [r3, #4]
  }
}
 8000a38:	3724      	adds	r7, #36	; 0x24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8000a44:	b490      	push	{r4, r7}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4602      	mov	r2, r0
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	71fa      	strb	r2, [r7, #7]
 8000a50:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8000a56:	79bb      	ldrb	r3, [r7, #6]
 8000a58:	f003 0303 	and.w	r3, r3, #3
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	220f      	movs	r2, #15
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <GPIO_EXTILineConfig+0x78>)
 8000a68:	79ba      	ldrb	r2, [r7, #6]
 8000a6a:	0892      	lsrs	r2, r2, #2
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	4913      	ldr	r1, [pc, #76]	; (8000abc <GPIO_EXTILineConfig+0x78>)
 8000a70:	79b8      	ldrb	r0, [r7, #6]
 8000a72:	0880      	lsrs	r0, r0, #2
 8000a74:	b2c0      	uxtb	r0, r0
 8000a76:	3002      	adds	r0, #2
 8000a78:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000a7c:	68f9      	ldr	r1, [r7, #12]
 8000a7e:	43c9      	mvns	r1, r1
 8000a80:	4001      	ands	r1, r0
 8000a82:	3202      	adds	r2, #2
 8000a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <GPIO_EXTILineConfig+0x78>)
 8000a8a:	79ba      	ldrb	r2, [r7, #6]
 8000a8c:	0892      	lsrs	r2, r2, #2
 8000a8e:	b2d2      	uxtb	r2, r2
 8000a90:	490a      	ldr	r1, [pc, #40]	; (8000abc <GPIO_EXTILineConfig+0x78>)
 8000a92:	79b8      	ldrb	r0, [r7, #6]
 8000a94:	0880      	lsrs	r0, r0, #2
 8000a96:	b2c0      	uxtb	r0, r0
 8000a98:	3002      	adds	r0, #2
 8000a9a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000a9e:	79fc      	ldrb	r4, [r7, #7]
 8000aa0:	79b9      	ldrb	r1, [r7, #6]
 8000aa2:	f001 0103 	and.w	r1, r1, #3
 8000aa6:	0089      	lsls	r1, r1, #2
 8000aa8:	fa04 f101 	lsl.w	r1, r4, r1
 8000aac:	4301      	orrs	r1, r0
 8000aae:	3202      	adds	r2, #2
 8000ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc90      	pop	{r4, r7}
 8000aba:	4770      	bx	lr
 8000abc:	40010000 	.word	0x40010000

08000ac0 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000acc:	4b32      	ldr	r3, [pc, #200]	; (8000b98 <EXTI_Init+0xd8>)
 8000ace:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	799b      	ldrb	r3, [r3, #6]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d04d      	beq.n	8000b74 <EXTI_Init+0xb4>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000ad8:	4b2f      	ldr	r3, [pc, #188]	; (8000b98 <EXTI_Init+0xd8>)
 8000ada:	4a2f      	ldr	r2, [pc, #188]	; (8000b98 <EXTI_Init+0xd8>)
 8000adc:	6811      	ldr	r1, [r2, #0]
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	6812      	ldr	r2, [r2, #0]
 8000ae2:	43d2      	mvns	r2, r2
 8000ae4:	400a      	ands	r2, r1
 8000ae6:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000ae8:	4b2b      	ldr	r3, [pc, #172]	; (8000b98 <EXTI_Init+0xd8>)
 8000aea:	4a2b      	ldr	r2, [pc, #172]	; (8000b98 <EXTI_Init+0xd8>)
 8000aec:	6851      	ldr	r1, [r2, #4]
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	6812      	ldr	r2, [r2, #0]
 8000af2:	43d2      	mvns	r2, r2
 8000af4:	400a      	ands	r2, r1
 8000af6:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	791b      	ldrb	r3, [r3, #4]
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	4413      	add	r3, r2
 8000b00:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	6811      	ldr	r1, [r2, #0]
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	6812      	ldr	r2, [r2, #0]
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000b10:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <EXTI_Init+0xd8>)
 8000b12:	4a21      	ldr	r2, [pc, #132]	; (8000b98 <EXTI_Init+0xd8>)
 8000b14:	6891      	ldr	r1, [r2, #8]
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	6812      	ldr	r2, [r2, #0]
 8000b1a:	43d2      	mvns	r2, r2
 8000b1c:	400a      	ands	r2, r1
 8000b1e:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000b20:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <EXTI_Init+0xd8>)
 8000b22:	4a1d      	ldr	r2, [pc, #116]	; (8000b98 <EXTI_Init+0xd8>)
 8000b24:	68d1      	ldr	r1, [r2, #12]
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	6812      	ldr	r2, [r2, #0]
 8000b2a:	43d2      	mvns	r2, r2
 8000b2c:	400a      	ands	r2, r1
 8000b2e:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	795b      	ldrb	r3, [r3, #5]
 8000b34:	2b10      	cmp	r3, #16
 8000b36:	d10e      	bne.n	8000b56 <EXTI_Init+0x96>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <EXTI_Init+0xd8>)
 8000b3a:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <EXTI_Init+0xd8>)
 8000b3c:	6891      	ldr	r1, [r2, #8]
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	6812      	ldr	r2, [r2, #0]
 8000b42:	430a      	orrs	r2, r1
 8000b44:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <EXTI_Init+0xd8>)
 8000b48:	4a13      	ldr	r2, [pc, #76]	; (8000b98 <EXTI_Init+0xd8>)
 8000b4a:	68d1      	ldr	r1, [r2, #12]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	6812      	ldr	r2, [r2, #0]
 8000b50:	430a      	orrs	r2, r1
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	e01b      	b.n	8000b8e <EXTI_Init+0xce>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <EXTI_Init+0xd8>)
 8000b58:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	795b      	ldrb	r3, [r3, #5]
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	4413      	add	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	6811      	ldr	r1, [r2, #0]
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	6812      	ldr	r2, [r2, #0]
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	e00c      	b.n	8000b8e <EXTI_Init+0xce>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	791b      	ldrb	r3, [r3, #4]
 8000b78:	68fa      	ldr	r2, [r7, #12]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	68fa      	ldr	r2, [r7, #12]
 8000b82:	6811      	ldr	r1, [r2, #0]
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	6812      	ldr	r2, [r2, #0]
 8000b88:	43d2      	mvns	r2, r2
 8000b8a:	400a      	ands	r2, r1
 8000b8c:	601a      	str	r2, [r3, #0]
  }
}
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	40010400 	.word	0x40010400

08000b9c <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <EXTI_GetITStatus+0x44>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <EXTI_GetITStatus+0x44>)
 8000bb8:	695a      	ldr	r2, [r3, #20]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d005      	beq.n	8000bce <EXTI_GetITStatus+0x32>
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d002      	beq.n	8000bce <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	73fb      	strb	r3, [r7, #15]
 8000bcc:	e001      	b.n	8000bd2 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	40010400 	.word	0x40010400

08000be4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <EXTI_ClearITPendingBit+0x18>)
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	615a      	str	r2, [r3, #20]
}
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	40010400 	.word	0x40010400

08000c00 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000c08:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <NVIC_PriorityGroupConfig+0x20>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c14:	60d3      	str	r3, [r2, #12]
}
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b087      	sub	sp, #28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	2300      	movs	r3, #0
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	230f      	movs	r3, #15
 8000c36:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	78db      	ldrb	r3, [r3, #3]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d038      	beq.n	8000cb2 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000c40:	4b26      	ldr	r3, [pc, #152]	; (8000cdc <NVIC_Init+0xb8>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	43db      	mvns	r3, r3
 8000c46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000c4a:	0a1b      	lsrs	r3, r3, #8
 8000c4c:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	f1c3 0304 	rsb	r3, r3, #4
 8000c54:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c5e:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	785b      	ldrb	r3, [r3, #1]
 8000c64:	461a      	mov	r2, r3
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	789b      	ldrb	r3, [r3, #2]
 8000c72:	461a      	mov	r2, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4013      	ands	r3, r2
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	011b      	lsls	r3, r3, #4
 8000c82:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000c84:	4916      	ldr	r1, [pc, #88]	; (8000ce0 <NVIC_Init+0xbc>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	440b      	add	r3, r1
 8000c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <NVIC_Init+0xbc>)
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	7812      	ldrb	r2, [r2, #0]
 8000c9a:	0952      	lsrs	r2, r2, #5
 8000c9c:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	7809      	ldrb	r1, [r1, #0]
 8000ca2:	f001 011f 	and.w	r1, r1, #31
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000cb0:	e00e      	b.n	8000cd0 <NVIC_Init+0xac>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <NVIC_Init+0xbc>)
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	7812      	ldrb	r2, [r2, #0]
 8000cb8:	0952      	lsrs	r2, r2, #5
 8000cba:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000cbc:	6879      	ldr	r1, [r7, #4]
 8000cbe:	7809      	ldrb	r1, [r1, #0]
 8000cc0:	f001 011f 	and.w	r1, r1, #31
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000cca:	3220      	adds	r2, #32
 8000ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000cd0:	371c      	adds	r7, #28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00
 8000ce0:	e000e100 	.word	0xe000e100

08000ce4 <__libc_init_array>:
 8000ce4:	b570      	push	{r4, r5, r6, lr}
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <__libc_init_array+0x3c>)
 8000ce8:	4d0e      	ldr	r5, [pc, #56]	; (8000d24 <__libc_init_array+0x40>)
 8000cea:	2400      	movs	r4, #0
 8000cec:	1aed      	subs	r5, r5, r3
 8000cee:	10ad      	asrs	r5, r5, #2
 8000cf0:	461e      	mov	r6, r3
 8000cf2:	42ac      	cmp	r4, r5
 8000cf4:	d004      	beq.n	8000d00 <__libc_init_array+0x1c>
 8000cf6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8000cfa:	4790      	blx	r2
 8000cfc:	3401      	adds	r4, #1
 8000cfe:	e7f8      	b.n	8000cf2 <__libc_init_array+0xe>
 8000d00:	f000 f85a 	bl	8000db8 <_init>
 8000d04:	4d08      	ldr	r5, [pc, #32]	; (8000d28 <__libc_init_array+0x44>)
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <__libc_init_array+0x48>)
 8000d08:	2400      	movs	r4, #0
 8000d0a:	1aed      	subs	r5, r5, r3
 8000d0c:	10ad      	asrs	r5, r5, #2
 8000d0e:	461e      	mov	r6, r3
 8000d10:	42ac      	cmp	r4, r5
 8000d12:	d004      	beq.n	8000d1e <__libc_init_array+0x3a>
 8000d14:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8000d18:	4790      	blx	r2
 8000d1a:	3401      	adds	r4, #1
 8000d1c:	e7f8      	b.n	8000d10 <__libc_init_array+0x2c>
 8000d1e:	bd70      	pop	{r4, r5, r6, pc}
 8000d20:	08000dd0 	.word	0x08000dd0
 8000d24:	08000dd0 	.word	0x08000dd0
 8000d28:	08000dd4 	.word	0x08000dd4
 8000d2c:	08000dd0 	.word	0x08000dd0

08000d30 <GPIO_PIN>:
 8000d30:	00800040 02000100                       @.......

08000d38 <GPIO_CLK>:
 8000d38:	00000010 00000010 00000010 00000010     ................

08000d48 <BUTTON_PIN>:
 8000d48:	20000001 00010200 01000002 10004000     ... .........@..

08000d58 <BUTTON_CLK>:
 8000d58:	00000004 00000010 00000008 00000040     ............@...
 8000d68:	00000040 00000020 00000020 00000020     @... ... ... ...

08000d78 <BUTTON_EXTI_LINE>:
 8000d78:	20000001 00010200 01000002 10004000     ... .........@..

08000d88 <BUTTON_PORT_SOURCE>:
 8000d88:	00020000 00040001 00030004 00030003     ................

08000d98 <BUTTON_PIN_SOURCE>:
 8000d98:	000d0000 00000009 00080001 000c000e     ................

08000da8 <BUTTON_IRQn>:
 8000da8:	00280006 00060017 00170007 00280028     ..(.........(.(.

08000db8 <_init>:
 8000db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dba:	bf00      	nop
 8000dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dbe:	bc08      	pop	{r3}
 8000dc0:	469e      	mov	lr, r3
 8000dc2:	4770      	bx	lr

08000dc4 <_fini>:
 8000dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc6:	bf00      	nop
 8000dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dca:	bc08      	pop	{r3}
 8000dcc:	469e      	mov	lr, r3
 8000dce:	4770      	bx	lr
