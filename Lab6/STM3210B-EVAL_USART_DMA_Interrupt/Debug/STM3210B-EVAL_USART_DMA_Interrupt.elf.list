
STM3210B-EVAL_USART_DMA_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001174  0800010c  0800010c  0000810c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08001280  08001280  00009280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08001284  08001284  00009284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000009c  20000000  08001288  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000000bc  2000009c  08001324  0001009c  2**2
                  ALLOC
  6 ._user_heap_stack 00000100  20000158  08001324  00010158  2**0
                  ALLOC
  7 .ARM.attributes 00000029  00000000  00000000  0001009c  2**0
                  CONTENTS, READONLY
  8 .debug_info   000032a9  00000000  00000000  000100c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000ba7  00000000  00000000  0001336e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000488  00000000  00000000  00013f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000400  00000000  00000000  000143a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000019af  00000000  00000000  000147a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000179a  00000000  00000000  0001614f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000082  00000000  00000000  000178e9  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00000d58  00000000  00000000  0001796c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001268 	.word	0x08001268

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4803      	ldr	r0, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	08001268 	.word	0x08001268
 8000148:	200000a0 	.word	0x200000a0

0800014c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000150:	4b15      	ldr	r3, [pc, #84]	; (80001a8 <SystemInit+0x5c>)
 8000152:	4a15      	ldr	r2, [pc, #84]	; (80001a8 <SystemInit+0x5c>)
 8000154:	6812      	ldr	r2, [r2, #0]
 8000156:	f042 0201 	orr.w	r2, r2, #1
 800015a:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800015c:	4a12      	ldr	r2, [pc, #72]	; (80001a8 <SystemInit+0x5c>)
 800015e:	4b12      	ldr	r3, [pc, #72]	; (80001a8 <SystemInit+0x5c>)
 8000160:	6859      	ldr	r1, [r3, #4]
 8000162:	4b12      	ldr	r3, [pc, #72]	; (80001ac <SystemInit+0x60>)
 8000164:	400b      	ands	r3, r1
 8000166:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000168:	4a0f      	ldr	r2, [pc, #60]	; (80001a8 <SystemInit+0x5c>)
 800016a:	4b0f      	ldr	r3, [pc, #60]	; (80001a8 <SystemInit+0x5c>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000176:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000178:	4b0b      	ldr	r3, [pc, #44]	; (80001a8 <SystemInit+0x5c>)
 800017a:	4a0b      	ldr	r2, [pc, #44]	; (80001a8 <SystemInit+0x5c>)
 800017c:	6812      	ldr	r2, [r2, #0]
 800017e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000182:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000184:	4b08      	ldr	r3, [pc, #32]	; (80001a8 <SystemInit+0x5c>)
 8000186:	4a08      	ldr	r2, [pc, #32]	; (80001a8 <SystemInit+0x5c>)
 8000188:	6852      	ldr	r2, [r2, #4]
 800018a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800018e:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000190:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <SystemInit+0x5c>)
 8000192:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000196:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000198:	f000 f80c 	bl	80001b4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <SystemInit+0x64>)
 800019e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80001a2:	609a      	str	r2, [r3, #8]
#endif 
}
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	40021000 	.word	0x40021000
 80001ac:	f8ff0000 	.word	0xf8ff0000
 80001b0:	e000ed00 	.word	0xe000ed00

080001b4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80001b8:	f000 f802 	bl	80001c0 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop

080001c0 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80001c0:	b480      	push	{r7}
 80001c2:	b083      	sub	sp, #12
 80001c4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80001c6:	2300      	movs	r3, #0
 80001c8:	607b      	str	r3, [r7, #4]
 80001ca:	2300      	movs	r3, #0
 80001cc:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80001ce:	4b3a      	ldr	r3, [pc, #232]	; (80002b8 <SetSysClockTo72+0xf8>)
 80001d0:	4a39      	ldr	r2, [pc, #228]	; (80002b8 <SetSysClockTo72+0xf8>)
 80001d2:	6812      	ldr	r2, [r2, #0]
 80001d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80001d8:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80001da:	4b37      	ldr	r3, [pc, #220]	; (80002b8 <SetSysClockTo72+0xf8>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001e2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d103      	bne.n	80001f8 <SetSysClockTo72+0x38>
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80001f6:	d1f0      	bne.n	80001da <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80001f8:	4b2f      	ldr	r3, [pc, #188]	; (80002b8 <SetSysClockTo72+0xf8>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000200:	2b00      	cmp	r3, #0
 8000202:	d002      	beq.n	800020a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000204:	2301      	movs	r3, #1
 8000206:	603b      	str	r3, [r7, #0]
 8000208:	e001      	b.n	800020e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800020a:	2300      	movs	r3, #0
 800020c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	2b01      	cmp	r3, #1
 8000212:	d14b      	bne.n	80002ac <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000214:	4b29      	ldr	r3, [pc, #164]	; (80002bc <SetSysClockTo72+0xfc>)
 8000216:	4a29      	ldr	r2, [pc, #164]	; (80002bc <SetSysClockTo72+0xfc>)
 8000218:	6812      	ldr	r2, [r2, #0]
 800021a:	f042 0210 	orr.w	r2, r2, #16
 800021e:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000220:	4b26      	ldr	r3, [pc, #152]	; (80002bc <SetSysClockTo72+0xfc>)
 8000222:	4a26      	ldr	r2, [pc, #152]	; (80002bc <SetSysClockTo72+0xfc>)
 8000224:	6812      	ldr	r2, [r2, #0]
 8000226:	f022 0203 	bic.w	r2, r2, #3
 800022a:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800022c:	4b23      	ldr	r3, [pc, #140]	; (80002bc <SetSysClockTo72+0xfc>)
 800022e:	4a23      	ldr	r2, [pc, #140]	; (80002bc <SetSysClockTo72+0xfc>)
 8000230:	6812      	ldr	r2, [r2, #0]
 8000232:	f042 0202 	orr.w	r2, r2, #2
 8000236:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000238:	4b1f      	ldr	r3, [pc, #124]	; (80002b8 <SetSysClockTo72+0xf8>)
 800023a:	4a1f      	ldr	r2, [pc, #124]	; (80002b8 <SetSysClockTo72+0xf8>)
 800023c:	6852      	ldr	r2, [r2, #4]
 800023e:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000240:	4b1d      	ldr	r3, [pc, #116]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000242:	4a1d      	ldr	r2, [pc, #116]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000244:	6852      	ldr	r2, [r2, #4]
 8000246:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000248:	4b1b      	ldr	r3, [pc, #108]	; (80002b8 <SetSysClockTo72+0xf8>)
 800024a:	4a1b      	ldr	r2, [pc, #108]	; (80002b8 <SetSysClockTo72+0xf8>)
 800024c:	6852      	ldr	r2, [r2, #4]
 800024e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000252:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000254:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000256:	4a18      	ldr	r2, [pc, #96]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000258:	6852      	ldr	r2, [r2, #4]
 800025a:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800025e:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000262:	4a15      	ldr	r2, [pc, #84]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000264:	6852      	ldr	r2, [r2, #4]
 8000266:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 800026a:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <SetSysClockTo72+0xf8>)
 800026e:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000270:	6812      	ldr	r2, [r2, #0]
 8000272:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000276:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000278:	bf00      	nop
 800027a:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <SetSysClockTo72+0xf8>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000282:	2b00      	cmp	r3, #0
 8000284:	d0f9      	beq.n	800027a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000286:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000288:	4a0b      	ldr	r2, [pc, #44]	; (80002b8 <SetSysClockTo72+0xf8>)
 800028a:	6852      	ldr	r2, [r2, #4]
 800028c:	f022 0203 	bic.w	r2, r2, #3
 8000290:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000292:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000294:	4a08      	ldr	r2, [pc, #32]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000296:	6852      	ldr	r2, [r2, #4]
 8000298:	f042 0202 	orr.w	r2, r2, #2
 800029c:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800029e:	bf00      	nop
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <SetSysClockTo72+0xf8>)
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	f003 030c 	and.w	r3, r3, #12
 80002a8:	2b08      	cmp	r3, #8
 80002aa:	d1f9      	bne.n	80002a0 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	40021000 	.word	0x40021000
 80002bc:	40022000 	.word	0x40022000

080002c0 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
}
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr

080002cc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80002d0:	e7fe      	b.n	80002d0 <HardFault_Handler+0x4>
 80002d2:	bf00      	nop

080002d4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80002d8:	e7fe      	b.n	80002d8 <MemManage_Handler+0x4>
 80002da:	bf00      	nop

080002dc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80002e0:	e7fe      	b.n	80002e0 <BusFault_Handler+0x4>
 80002e2:	bf00      	nop

080002e4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80002e8:	e7fe      	b.n	80002e8 <UsageFault_Handler+0x4>
 80002ea:	bf00      	nop

080002ec <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
}
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr

080002f8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
}
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <PendSV_Handler>:
  * @brief  This function handles PendSV_Handler exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
}
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
}
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr

0800031c <USART2_IRQHandler>:
  * @brief  This function handles USART2 global interrupt request.
  * @param  None
  * @retval None
  */
void USART2_IRQHandler(void)
{
 800031c:	b598      	push	{r3, r4, r7, lr}
 800031e:	af00      	add	r7, sp, #0
  if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000320:	4811      	ldr	r0, [pc, #68]	; (8000368 <USART2_IRQHandler+0x4c>)
 8000322:	f240 5125 	movw	r1, #1317	; 0x525
 8000326:	f000 fb49 	bl	80009bc <USART_GetITStatus>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d019      	beq.n	8000364 <USART2_IRQHandler+0x48>
  {
    /* Read one byte from the receive data register */
    RxBuffer2[RxCounter++] = USART_ReceiveData(USART2);
 8000330:	4b0e      	ldr	r3, [pc, #56]	; (800036c <USART2_IRQHandler+0x50>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	1c5a      	adds	r2, r3, #1
 8000336:	b2d1      	uxtb	r1, r2
 8000338:	4a0c      	ldr	r2, [pc, #48]	; (800036c <USART2_IRQHandler+0x50>)
 800033a:	7011      	strb	r1, [r2, #0]
 800033c:	461c      	mov	r4, r3
 800033e:	480a      	ldr	r0, [pc, #40]	; (8000368 <USART2_IRQHandler+0x4c>)
 8000340:	f000 fb10 	bl	8000964 <USART_ReceiveData>
 8000344:	4603      	mov	r3, r0
 8000346:	b2da      	uxtb	r2, r3
 8000348:	4b09      	ldr	r3, [pc, #36]	; (8000370 <USART2_IRQHandler+0x54>)
 800034a:	551a      	strb	r2, [r3, r4]

    if(RxCounter == NbrOfDataToRead)
 800034c:	4b07      	ldr	r3, [pc, #28]	; (800036c <USART2_IRQHandler+0x50>)
 800034e:	781a      	ldrb	r2, [r3, #0]
 8000350:	4b08      	ldr	r3, [pc, #32]	; (8000374 <USART2_IRQHandler+0x58>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	429a      	cmp	r2, r3
 8000356:	d105      	bne.n	8000364 <USART2_IRQHandler+0x48>
    {
      /* Disable the USART2 Receive interrupt */
      USART_ITConfig(USART2, USART_IT_RXNE, DISABLE);
 8000358:	4803      	ldr	r0, [pc, #12]	; (8000368 <USART2_IRQHandler+0x4c>)
 800035a:	f240 5125 	movw	r1, #1317	; 0x525
 800035e:	2200      	movs	r2, #0
 8000360:	f000 fa94 	bl	800088c <USART_ITConfig>
    }
  }
}
 8000364:	bd98      	pop	{r3, r4, r7, pc}
 8000366:	bf00      	nop
 8000368:	40004400 	.word	0x40004400
 800036c:	200000b8 	.word	0x200000b8
 8000370:	200000c4 	.word	0x200000c4
 8000374:	20000084 	.word	0x20000084

08000378 <USART3_IRQHandler>:
  * @brief  This function handles USART3 global interrupt request.
  * @param  None
  * @retval None
  */
void USART3_IRQHandler(void)
{
 8000378:	b598      	push	{r3, r4, r7, lr}
 800037a:	af00      	add	r7, sp, #0
  if(USART_GetITStatus(USART3, USART_IT_RXNE) != RESET)
 800037c:	4811      	ldr	r0, [pc, #68]	; (80003c4 <USART3_IRQHandler+0x4c>)
 800037e:	f240 5125 	movw	r1, #1317	; 0x525
 8000382:	f000 fb1b 	bl	80009bc <USART_GetITStatus>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d019      	beq.n	80003c0 <USART3_IRQHandler+0x48>
  {
    /* Read one byte from the receive data register */
    RxBuffer2[RxCounter++] = USART_ReceiveData(USART3);
 800038c:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <USART3_IRQHandler+0x50>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	1c5a      	adds	r2, r3, #1
 8000392:	b2d1      	uxtb	r1, r2
 8000394:	4a0c      	ldr	r2, [pc, #48]	; (80003c8 <USART3_IRQHandler+0x50>)
 8000396:	7011      	strb	r1, [r2, #0]
 8000398:	461c      	mov	r4, r3
 800039a:	480a      	ldr	r0, [pc, #40]	; (80003c4 <USART3_IRQHandler+0x4c>)
 800039c:	f000 fae2 	bl	8000964 <USART_ReceiveData>
 80003a0:	4603      	mov	r3, r0
 80003a2:	b2da      	uxtb	r2, r3
 80003a4:	4b09      	ldr	r3, [pc, #36]	; (80003cc <USART3_IRQHandler+0x54>)
 80003a6:	551a      	strb	r2, [r3, r4]

    if(RxCounter == NbrOfDataToRead)
 80003a8:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <USART3_IRQHandler+0x50>)
 80003aa:	781a      	ldrb	r2, [r3, #0]
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <USART3_IRQHandler+0x58>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	429a      	cmp	r2, r3
 80003b2:	d105      	bne.n	80003c0 <USART3_IRQHandler+0x48>
    {
      /* Disable the USART3 Receive interrupt */
      USART_ITConfig(USART3, USART_IT_RXNE, DISABLE);
 80003b4:	4803      	ldr	r0, [pc, #12]	; (80003c4 <USART3_IRQHandler+0x4c>)
 80003b6:	f240 5125 	movw	r1, #1317	; 0x525
 80003ba:	2200      	movs	r2, #0
 80003bc:	f000 fa66 	bl	800088c <USART_ITConfig>
    }
  }
}
 80003c0:	bd98      	pop	{r3, r4, r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40004800 	.word	0x40004800
 80003c8:	200000b8 	.word	0x200000b8
 80003cc:	200000c4 	.word	0x200000c4
 80003d0:	20000084 	.word	0x20000084

080003d4 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80003d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80003d6:	f000 b804 	b.w	80003e2 <LoopCopyDataInit>

080003da <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80003da:	4b0d      	ldr	r3, [pc, #52]	; (8000410 <LoopFillZerobss+0x16>)
	ldr	r3, [r3, r1]
 80003dc:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80003de:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80003e0:	3104      	adds	r1, #4

080003e2 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80003e2:	480c      	ldr	r0, [pc, #48]	; (8000414 <LoopFillZerobss+0x1a>)
	ldr	r3, =_edata
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <LoopFillZerobss+0x1e>)
	adds	r2, r0, r1
 80003e6:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80003e8:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80003ea:	f4ff aff6 	bcc.w	80003da <CopyDataInit>
	ldr	r2, =_sbss
 80003ee:	4a0b      	ldr	r2, [pc, #44]	; (800041c <LoopFillZerobss+0x22>)
	b	LoopFillZerobss
 80003f0:	f000 b803 	b.w	80003fa <LoopFillZerobss>

080003f4 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80003f4:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80003f6:	f842 3b04 	str.w	r3, [r2], #4

080003fa <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80003fa:	4b09      	ldr	r3, [pc, #36]	; (8000420 <LoopFillZerobss+0x26>)
	cmp	r2, r3
 80003fc:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80003fe:	f4ff aff9 	bcc.w	80003f4 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000402:	f7ff fea3 	bl	800014c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000406:	f000 ff09 	bl	800121c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800040a:	f000 f80d 	bl	8000428 <main>
	bx	lr
 800040e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000410:	08001288 	.word	0x08001288
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000414:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000418:	2000009c 	.word	0x2000009c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 800041c:	2000009c 	.word	0x2000009c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000420:	20000158 	.word	0x20000158

08000424 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000424:	f7ff bffe 	b.w	8000424 <ADC1_2_IRQHandler>

08000428 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000428:	b598      	push	{r3, r4, r7, lr}
 800042a:	af00      	add	r7, sp, #0
       To reconfigure the default setting of SystemInit() function, refer to
       system_stm32f10x.c file
     */     
       
  /* System Clocks Configuration */
  RCC_Configuration();
 800042c:	f000 f896 	bl	800055c <RCC_Configuration>
       
  /* NVIC configuration */
  NVIC_Configuration();
 8000430:	f000 f8dc 	bl	80005ec <NVIC_Configuration>

  /* Configure the GPIO ports */
  GPIO_Configuration();
 8000434:	f000 f8a8 	bl	8000588 <GPIO_Configuration>

  /* Configure the DMA */
  DMA_Configuration();
 8000438:	f000 f8ea 	bl	8000610 <DMA_Configuration>
        - No parity
        - Hardware flow control disabled (RTS and CTS signals)
        - Receive and transmit enabled
  */

  USART_InitStructure.USART_BaudRate = 230400;
 800043c:	4b3b      	ldr	r3, [pc, #236]	; (800052c <main+0x104>)
 800043e:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000442:	601a      	str	r2, [r3, #0]
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000444:	4b39      	ldr	r3, [pc, #228]	; (800052c <main+0x104>)
 8000446:	2200      	movs	r2, #0
 8000448:	809a      	strh	r2, [r3, #4]
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800044a:	4b38      	ldr	r3, [pc, #224]	; (800052c <main+0x104>)
 800044c:	2200      	movs	r2, #0
 800044e:	80da      	strh	r2, [r3, #6]
  USART_InitStructure.USART_Parity = USART_Parity_No;
 8000450:	4b36      	ldr	r3, [pc, #216]	; (800052c <main+0x104>)
 8000452:	2200      	movs	r2, #0
 8000454:	811a      	strh	r2, [r3, #8]
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000456:	4b35      	ldr	r3, [pc, #212]	; (800052c <main+0x104>)
 8000458:	2200      	movs	r2, #0
 800045a:	819a      	strh	r2, [r3, #12]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800045c:	4b33      	ldr	r3, [pc, #204]	; (800052c <main+0x104>)
 800045e:	220c      	movs	r2, #12
 8000460:	815a      	strh	r2, [r3, #10]
  
  /* Configure USARTy */
  USART_Init(USARTy, &USART_InitStructure);
 8000462:	4833      	ldr	r0, [pc, #204]	; (8000530 <main+0x108>)
 8000464:	4931      	ldr	r1, [pc, #196]	; (800052c <main+0x104>)
 8000466:	f000 f937 	bl	80006d8 <USART_Init>

  /* Configure USARTz */
  USART_Init(USARTz, &USART_InitStructure);
 800046a:	4832      	ldr	r0, [pc, #200]	; (8000534 <main+0x10c>)
 800046c:	492f      	ldr	r1, [pc, #188]	; (800052c <main+0x104>)
 800046e:	f000 f933 	bl	80006d8 <USART_Init>

  /* Enable USARTy DMA TX request */
  USART_DMACmd(USARTy, USART_DMAReq_Tx, ENABLE);
 8000472:	482f      	ldr	r0, [pc, #188]	; (8000530 <main+0x108>)
 8000474:	2180      	movs	r1, #128	; 0x80
 8000476:	2201      	movs	r2, #1
 8000478:	f000 fa50 	bl	800091c <USART_DMACmd>

  /* Enable USARTz DMA TX request */
  USART_DMACmd(USARTz, USART_DMAReq_Tx, ENABLE);
 800047c:	482d      	ldr	r0, [pc, #180]	; (8000534 <main+0x10c>)
 800047e:	2180      	movs	r1, #128	; 0x80
 8000480:	2201      	movs	r2, #1
 8000482:	f000 fa4b 	bl	800091c <USART_DMACmd>

  /* Enable the USARTz Receive Interrupt */
  USART_ITConfig(USARTz, USART_IT_RXNE, ENABLE);
 8000486:	482b      	ldr	r0, [pc, #172]	; (8000534 <main+0x10c>)
 8000488:	f240 5125 	movw	r1, #1317	; 0x525
 800048c:	2201      	movs	r2, #1
 800048e:	f000 f9fd 	bl	800088c <USART_ITConfig>
  
  /* Enable USARTy */
  USART_Cmd(USARTy, ENABLE);
 8000492:	4827      	ldr	r0, [pc, #156]	; (8000530 <main+0x108>)
 8000494:	2101      	movs	r1, #1
 8000496:	f000 f9d9 	bl	800084c <USART_Cmd>

  /* Enable USARTz */
  USART_Cmd(USARTz, ENABLE);
 800049a:	4826      	ldr	r0, [pc, #152]	; (8000534 <main+0x10c>)
 800049c:	2101      	movs	r1, #1
 800049e:	f000 f9d5 	bl	800084c <USART_Cmd>

  /* Enable USARTy DMA TX Channel */
  DMA_Cmd(USARTy_Tx_DMA_Channel, ENABLE);
 80004a2:	4825      	ldr	r0, [pc, #148]	; (8000538 <main+0x110>)
 80004a4:	2101      	movs	r1, #1
 80004a6:	f000 fe13 	bl	80010d0 <DMA_Cmd>

  /* Enable USARTz DMA TX Channel */
  DMA_Cmd(USARTz_Tx_DMA_Channel, ENABLE);
 80004aa:	4824      	ldr	r0, [pc, #144]	; (800053c <main+0x114>)
 80004ac:	2101      	movs	r1, #1
 80004ae:	f000 fe0f 	bl	80010d0 <DMA_Cmd>

  /* Receive the TxBuffer2 */
  while(index < TxBufferSize2)
 80004b2:	e014      	b.n	80004de <main+0xb6>
  {
     while(USART_GetFlagStatus(USARTy, USART_FLAG_RXNE) == RESET)
 80004b4:	bf00      	nop
 80004b6:	481e      	ldr	r0, [pc, #120]	; (8000530 <main+0x108>)
 80004b8:	2120      	movs	r1, #32
 80004ba:	f000 fa63 	bl	8000984 <USART_GetFlagStatus>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d0f8      	beq.n	80004b6 <main+0x8e>
     {
     }
     RxBuffer1[index++] = USART_ReceiveData(USARTy);  
 80004c4:	4b1e      	ldr	r3, [pc, #120]	; (8000540 <main+0x118>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	461c      	mov	r4, r3
 80004ca:	1c62      	adds	r2, r4, #1
 80004cc:	4b1c      	ldr	r3, [pc, #112]	; (8000540 <main+0x118>)
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	4817      	ldr	r0, [pc, #92]	; (8000530 <main+0x108>)
 80004d2:	f000 fa47 	bl	8000964 <USART_ReceiveData>
 80004d6:	4603      	mov	r3, r0
 80004d8:	b2da      	uxtb	r2, r3
 80004da:	4b1a      	ldr	r3, [pc, #104]	; (8000544 <main+0x11c>)
 80004dc:	551a      	strb	r2, [r3, r4]

  /* Enable USARTz DMA TX Channel */
  DMA_Cmd(USARTz_Tx_DMA_Channel, ENABLE);

  /* Receive the TxBuffer2 */
  while(index < TxBufferSize2)
 80004de:	4b18      	ldr	r3, [pc, #96]	; (8000540 <main+0x118>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2b42      	cmp	r3, #66	; 0x42
 80004e4:	d9e6      	bls.n	80004b4 <main+0x8c>
     }
     RxBuffer1[index++] = USART_ReceiveData(USARTy);  
  }

  /* Wait until USARTy TX DMA1 Channel  Transfer Complete */
  while (DMA_GetFlagStatus(USARTy_Tx_DMA_FLAG) == RESET)
 80004e6:	bf00      	nop
 80004e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80004ec:	f000 fe0c 	bl	8001108 <DMA_GetFlagStatus>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d0f8      	beq.n	80004e8 <main+0xc0>
  {
  }
  /* Wait until USARTz TX DMA1 Channel Transfer Complete */
  while (DMA_GetFlagStatus(USARTz_Tx_DMA_FLAG) == RESET)
 80004f6:	bf00      	nop
 80004f8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80004fc:	f000 fe04 	bl	8001108 <DMA_GetFlagStatus>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0f8      	beq.n	80004f8 <main+0xd0>
  {
  }
  
  /* Check the received data with the send ones */
  TransferStatus1 = Buffercmp(TxBuffer2, RxBuffer1, TxBufferSize2);
 8000506:	4810      	ldr	r0, [pc, #64]	; (8000548 <main+0x120>)
 8000508:	490e      	ldr	r1, [pc, #56]	; (8000544 <main+0x11c>)
 800050a:	2243      	movs	r2, #67	; 0x43
 800050c:	f000 f8c2 	bl	8000694 <Buffercmp>
 8000510:	4603      	mov	r3, r0
 8000512:	461a      	mov	r2, r3
 8000514:	4b0d      	ldr	r3, [pc, #52]	; (800054c <main+0x124>)
 8000516:	701a      	strb	r2, [r3, #0]
  /* TransferStatus1 = PASSED, if the data transmitted from USARTz and  
     received by USARTy are the same */
  /* TransferStatus1 = FAILED, if the data transmitted from USARTz and 
     received by USARTy are different */
  TransferStatus2 = Buffercmp(TxBuffer1, RxBuffer2, TxBufferSize1);
 8000518:	480d      	ldr	r0, [pc, #52]	; (8000550 <main+0x128>)
 800051a:	490e      	ldr	r1, [pc, #56]	; (8000554 <main+0x12c>)
 800051c:	223e      	movs	r2, #62	; 0x3e
 800051e:	f000 f8b9 	bl	8000694 <Buffercmp>
 8000522:	4603      	mov	r3, r0
 8000524:	461a      	mov	r2, r3
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <main+0x130>)
 8000528:	701a      	strb	r2, [r3, #0]
  /* TransferStatus2 = FAILED, if the data transmitted from USARTy and 
     received by USARTz are different */

  while (1)
  {
  }
 800052a:	e7fe      	b.n	800052a <main+0x102>
 800052c:	20000104 	.word	0x20000104
 8000530:	40013800 	.word	0x40013800
 8000534:	40004400 	.word	0x40004400
 8000538:	40020044 	.word	0x40020044
 800053c:	40020080 	.word	0x40020080
 8000540:	200000bc 	.word	0x200000bc
 8000544:	20000114 	.word	0x20000114
 8000548:	20000040 	.word	0x20000040
 800054c:	200000c0 	.word	0x200000c0
 8000550:	20000000 	.word	0x20000000
 8000554:	200000c4 	.word	0x200000c4
 8000558:	200000c1 	.word	0x200000c1

0800055c <RCC_Configuration>:
  * @brief  Configures the different system clocks.
  * @param  None
  * @retval None
  */
void RCC_Configuration(void)
{    
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* DMA clock enable */
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 8000560:	2001      	movs	r0, #1
 8000562:	2101      	movs	r1, #1
 8000564:	f000 fb34 	bl	8000bd0 <RCC_AHBPeriphClockCmd>

  /* Enable GPIO clock */
  RCC_APB2PeriphClockCmd(USARTy_GPIO_CLK | USARTz_GPIO_CLK | RCC_APB2Periph_AFIO, ENABLE);
 8000568:	2025      	movs	r0, #37	; 0x25
 800056a:	2101      	movs	r1, #1
 800056c:	f000 fb4e 	bl	8000c0c <RCC_APB2PeriphClockCmd>

#ifndef USE_STM3210C_EVAL
  /* Enable USARTy Clock */
  RCC_APB2PeriphClockCmd(USARTy_CLK, ENABLE); 
 8000570:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000574:	2101      	movs	r1, #1
 8000576:	f000 fb49 	bl	8000c0c <RCC_APB2PeriphClockCmd>
#else
  /* Enable USARTy Clock */
  RCC_APB1PeriphClockCmd(USARTy_CLK, ENABLE); 
#endif
  /* Enable USARTz Clock */
  RCC_APB1PeriphClockCmd(USARTz_CLK, ENABLE);  
 800057a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800057e:	2101      	movs	r1, #1
 8000580:	f000 fb62 	bl	8000c48 <RCC_APB1PeriphClockCmd>
}
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop

08000588 <GPIO_Configuration>:
  * @brief  Configures the different GPIO ports.
  * @param  None
  * @retval None
  */
void GPIO_Configuration(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  
  /* Enable the USART2 Pins Software Remapping */
  GPIO_PinRemapConfig(GPIO_Remap_USART2, ENABLE);  
#elif defined(USE_STM3210B_EVAL) || defined(USE_STM32100B_EVAL)
  /* Enable the USART2 Pins Software Remapping */
  GPIO_PinRemapConfig(GPIO_Remap_USART2, ENABLE);
 800058e:	2008      	movs	r0, #8
 8000590:	2101      	movs	r1, #1
 8000592:	f000 fc33 	bl	8000dfc <GPIO_PinRemapConfig>
#endif

  /* Configure USARTy Rx as input floating */
  GPIO_InitStructure.GPIO_Pin = USARTy_RxPin;
 8000596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800059a:	80bb      	strh	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800059c:	2304      	movs	r3, #4
 800059e:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(USARTy_GPIO, &GPIO_InitStructure);
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	4810      	ldr	r0, [pc, #64]	; (80005e4 <GPIO_Configuration+0x5c>)
 80005a4:	4619      	mov	r1, r3
 80005a6:	f000 fb6d 	bl	8000c84 <GPIO_Init>
  
  /* Configure USARTz Rx as input floating */
  GPIO_InitStructure.GPIO_Pin = USARTz_RxPin;
 80005aa:	2340      	movs	r3, #64	; 0x40
 80005ac:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(USARTz_GPIO, &GPIO_InitStructure);  
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	480d      	ldr	r0, [pc, #52]	; (80005e8 <GPIO_Configuration+0x60>)
 80005b2:	4619      	mov	r1, r3
 80005b4:	f000 fb66 	bl	8000c84 <GPIO_Init>
  
  /* Configure USARTy Tx as alternate function push-pull */
  GPIO_InitStructure.GPIO_Pin = USARTy_TxPin;
 80005b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005bc:	80bb      	strh	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80005be:	2303      	movs	r3, #3
 80005c0:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80005c2:	2318      	movs	r3, #24
 80005c4:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(USARTy_GPIO, &GPIO_InitStructure);
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	4806      	ldr	r0, [pc, #24]	; (80005e4 <GPIO_Configuration+0x5c>)
 80005ca:	4619      	mov	r1, r3
 80005cc:	f000 fb5a 	bl	8000c84 <GPIO_Init>

  /* Configure USARTz Tx as alternate function push-pull */
  GPIO_InitStructure.GPIO_Pin = USARTz_TxPin;
 80005d0:	2320      	movs	r3, #32
 80005d2:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(USARTz_GPIO, &GPIO_InitStructure);  
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	4804      	ldr	r0, [pc, #16]	; (80005e8 <GPIO_Configuration+0x60>)
 80005d8:	4619      	mov	r1, r3
 80005da:	f000 fb53 	bl	8000c84 <GPIO_Init>
}
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40010800 	.word	0x40010800
 80005e8:	40011400 	.word	0x40011400

080005ec <NVIC_Configuration>:
  * @brief  Configures the nested vectored interrupt controller.
  * @param  None
  * @retval None
  */
void NVIC_Configuration(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
   NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the USARTz Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = USARTz_IRQn;
 80005f2:	2326      	movs	r3, #38	; 0x26
 80005f4:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80005fe:	2301      	movs	r3, #1
 8000600:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	4618      	mov	r0, r3
 8000606:	f000 fda9 	bl	800115c <NVIC_Init>
}
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <DMA_Configuration>:
  * @brief  Configures the DMA.
  * @param  None
  * @retval None
  */
void DMA_Configuration(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08c      	sub	sp, #48	; 0x30
 8000614:	af00      	add	r7, sp, #0
  DMA_InitTypeDef DMA_InitStructure;

  /* USARTy_Tx_DMA_Channel (triggered by USARTy Tx event) Config */
  DMA_DeInit(USARTy_Tx_DMA_Channel);
 8000616:	4819      	ldr	r0, [pc, #100]	; (800067c <DMA_Configuration+0x6c>)
 8000618:	f000 fc60 	bl	8000edc <DMA_DeInit>
  DMA_InitStructure.DMA_PeripheralBaseAddr = USARTy_DR_Base;
 800061c:	4b18      	ldr	r3, [pc, #96]	; (8000680 <DMA_Configuration+0x70>)
 800061e:	607b      	str	r3, [r7, #4]
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)TxBuffer1;
 8000620:	4b18      	ldr	r3, [pc, #96]	; (8000684 <DMA_Configuration+0x74>)
 8000622:	60bb      	str	r3, [r7, #8]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
 8000624:	2310      	movs	r3, #16
 8000626:	60fb      	str	r3, [r7, #12]
  DMA_InitStructure.DMA_BufferSize = TxBufferSize1;
 8000628:	233e      	movs	r3, #62	; 0x3e
 800062a:	613b      	str	r3, [r7, #16]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	61bb      	str	r3, [r7, #24]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8000638:	2300      	movs	r3, #0
 800063a:	623b      	str	r3, [r7, #32]
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 800063c:	2300      	movs	r3, #0
 800063e:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8000640:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000644:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 8000646:	2300      	movs	r3, #0
 8000648:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_Init(USARTy_Tx_DMA_Channel, &DMA_InitStructure);
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	480b      	ldr	r0, [pc, #44]	; (800067c <DMA_Configuration+0x6c>)
 800064e:	4619      	mov	r1, r3
 8000650:	f000 fd00 	bl	8001054 <DMA_Init>
  
  /* USARTz_Tx_DMA_Channel (triggered by USARTz Tx event) Config */
  DMA_DeInit(USARTz_Tx_DMA_Channel);
 8000654:	480c      	ldr	r0, [pc, #48]	; (8000688 <DMA_Configuration+0x78>)
 8000656:	f000 fc41 	bl	8000edc <DMA_DeInit>
  DMA_InitStructure.DMA_PeripheralBaseAddr = USARTz_DR_Base;
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <DMA_Configuration+0x7c>)
 800065c:	607b      	str	r3, [r7, #4]
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)TxBuffer2;
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <DMA_Configuration+0x80>)
 8000660:	60bb      	str	r3, [r7, #8]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
 8000662:	2310      	movs	r3, #16
 8000664:	60fb      	str	r3, [r7, #12]
  DMA_InitStructure.DMA_BufferSize = TxBufferSize2;
 8000666:	2343      	movs	r3, #67	; 0x43
 8000668:	613b      	str	r3, [r7, #16]
  DMA_Init(USARTz_Tx_DMA_Channel, &DMA_InitStructure);
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	4806      	ldr	r0, [pc, #24]	; (8000688 <DMA_Configuration+0x78>)
 800066e:	4619      	mov	r1, r3
 8000670:	f000 fcf0 	bl	8001054 <DMA_Init>
}
 8000674:	3730      	adds	r7, #48	; 0x30
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40020044 	.word	0x40020044
 8000680:	40013804 	.word	0x40013804
 8000684:	20000000 	.word	0x20000000
 8000688:	40020080 	.word	0x40020080
 800068c:	40004404 	.word	0x40004404
 8000690:	20000040 	.word	0x20000040

08000694 <Buffercmp>:
  * @param  BufferLength: buffer's length
  * @retval PASSED: pBuffer1 identical to pBuffer2
  *         FAILED: pBuffer1 differs from pBuffer2
  */
TestStatus Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	4613      	mov	r3, r2
 80006a0:	80fb      	strh	r3, [r7, #6]
  while(BufferLength--)
 80006a2:	e00d      	b.n	80006c0 <Buffercmp+0x2c>
  {
    if(*pBuffer1 != *pBuffer2)
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	781a      	ldrb	r2, [r3, #0]
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d001      	beq.n	80006b4 <Buffercmp+0x20>
    {
      return FAILED;
 80006b0:	2300      	movs	r3, #0
 80006b2:	e00b      	b.n	80006cc <Buffercmp+0x38>
    }

    pBuffer1++;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	3301      	adds	r3, #1
 80006b8:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	3301      	adds	r3, #1
 80006be:	60bb      	str	r3, [r7, #8]
  * @retval PASSED: pBuffer1 identical to pBuffer2
  *         FAILED: pBuffer1 differs from pBuffer2
  */
TestStatus Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
  while(BufferLength--)
 80006c0:	88fb      	ldrh	r3, [r7, #6]
 80006c2:	1e5a      	subs	r2, r3, #1
 80006c4:	80fa      	strh	r2, [r7, #6]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d1ec      	bne.n	80006a4 <Buffercmp+0x10>

    pBuffer1++;
    pBuffer2++;
  }

  return PASSED;
 80006ca:	2301      	movs	r3, #1
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08c      	sub	sp, #48	; 0x30
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80006e2:	2300      	movs	r3, #0
 80006e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006e6:	2300      	movs	r3, #0
 80006e8:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 80006ea:	2300      	movs	r3, #0
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 80006ee:	2300      	movs	r3, #0
 80006f0:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	8a1b      	ldrh	r3, [r3, #16]
 80006fe:	b29b      	uxth	r3, r3
 8000700:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8000702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000704:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8000708:	4013      	ands	r3, r2
 800070a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	88db      	ldrh	r3, [r3, #6]
 8000710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000712:	4313      	orrs	r3, r2
 8000714:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000718:	b29a      	uxth	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	899b      	ldrh	r3, [r3, #12]
 8000722:	b29b      	uxth	r3, r3
 8000724:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000728:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 800072c:	4013      	ands	r3, r2
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	889a      	ldrh	r2, [r3, #4]
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	891b      	ldrh	r3, [r3, #8]
 8000738:	4313      	orrs	r3, r2
 800073a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000740:	4313      	orrs	r3, r2
 8000742:	b29b      	uxth	r3, r3
 8000744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000746:	4313      	orrs	r3, r2
 8000748:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800074a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800074c:	b29a      	uxth	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	8a9b      	ldrh	r3, [r3, #20]
 8000756:	b29b      	uxth	r3, r3
 8000758:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 800075a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800075c:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000760:	4013      	ands	r3, r2
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	899b      	ldrh	r3, [r3, #12]
 8000768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800076a:	4313      	orrs	r3, r2
 800076c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800076e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000770:	b29a      	uxth	r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	4618      	mov	r0, r3
 800077c:	f000 f976 	bl	8000a6c <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8000780:	69fa      	ldr	r2, [r7, #28]
 8000782:	4b30      	ldr	r3, [pc, #192]	; (8000844 <USART_Init+0x16c>)
 8000784:	429a      	cmp	r2, r3
 8000786:	d102      	bne.n	800078e <USART_Init+0xb6>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
 800078c:	e001      	b.n	8000792 <USART_Init+0xba>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800078e:	693b      	ldr	r3, [r7, #16]
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	899b      	ldrh	r3, [r3, #12]
 8000796:	b29b      	uxth	r3, r3
 8000798:	b29b      	uxth	r3, r3
 800079a:	b21b      	sxth	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	da0c      	bge.n	80007ba <USART_Init+0xe2>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80007a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007a2:	4613      	mov	r3, r2
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	009a      	lsls	r2, r3, #2
 80007aa:	441a      	add	r2, r3
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
 80007b8:	e00b      	b.n	80007d2 <USART_Init+0xfa>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80007ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007bc:	4613      	mov	r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	4413      	add	r3, r2
 80007c2:	009a      	lsls	r2, r3, #2
 80007c4:	441a      	add	r2, r3
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 80007d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007d4:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <USART_Init+0x170>)
 80007d6:	fba3 1302 	umull	r1, r3, r3, r2
 80007da:	095b      	lsrs	r3, r3, #5
 80007dc:	011b      	lsls	r3, r3, #4
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80007e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007e2:	091b      	lsrs	r3, r3, #4
 80007e4:	2264      	movs	r2, #100	; 0x64
 80007e6:	fb02 f303 	mul.w	r3, r2, r3
 80007ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	899b      	ldrh	r3, [r3, #12]
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	b21b      	sxth	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	da0d      	bge.n	800081a <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80007fe:	6a3b      	ldr	r3, [r7, #32]
 8000800:	00db      	lsls	r3, r3, #3
 8000802:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <USART_Init+0x170>)
 8000808:	fba3 1302 	umull	r1, r3, r3, r2
 800080c:	095b      	lsrs	r3, r3, #5
 800080e:	f003 0307 	and.w	r3, r3, #7
 8000812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000814:	4313      	orrs	r3, r2
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000818:	e00c      	b.n	8000834 <USART_Init+0x15c>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800081a:	6a3b      	ldr	r3, [r7, #32]
 800081c:	011b      	lsls	r3, r3, #4
 800081e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <USART_Init+0x170>)
 8000824:	fba3 1302 	umull	r1, r3, r3, r2
 8000828:	095b      	lsrs	r3, r3, #5
 800082a:	f003 030f 	and.w	r3, r3, #15
 800082e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000830:	4313      	orrs	r3, r2
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000836:	b29a      	uxth	r2, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	811a      	strh	r2, [r3, #8]
}
 800083c:	3730      	adds	r7, #48	; 0x30
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40013800 	.word	0x40013800
 8000848:	51eb851f 	.word	0x51eb851f

0800084c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000858:	78fb      	ldrb	r3, [r7, #3]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d008      	beq.n	8000870 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	899b      	ldrh	r3, [r3, #12]
 8000862:	b29b      	uxth	r3, r3
 8000864:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000868:	b29a      	uxth	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	819a      	strh	r2, [r3, #12]
 800086e:	e007      	b.n	8000880 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	899b      	ldrh	r3, [r3, #12]
 8000874:	b29b      	uxth	r3, r3
 8000876:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800087a:	b29a      	uxth	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	819a      	strh	r2, [r3, #12]
  }
}
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop

0800088c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800088c:	b480      	push	{r7}
 800088e:	b087      	sub	sp, #28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	4613      	mov	r3, r2
 8000896:	460a      	mov	r2, r1
 8000898:	807a      	strh	r2, [r7, #2]
 800089a:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800089c:	2300      	movs	r3, #0
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	2300      	movs	r3, #0
 80008a6:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80008b0:	887b      	ldrh	r3, [r7, #2]
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	095b      	lsrs	r3, r3, #5
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 80008ba:	887b      	ldrh	r3, [r7, #2]
 80008bc:	f003 031f 	and.w	r3, r3, #31
 80008c0:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	2201      	movs	r2, #1
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d103      	bne.n	80008da <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	330c      	adds	r3, #12
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	e009      	b.n	80008ee <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d103      	bne.n	80008e8 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	3310      	adds	r3, #16
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	e002      	b.n	80008ee <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	3314      	adds	r3, #20
 80008ec:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80008ee:	787b      	ldrb	r3, [r7, #1]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d006      	beq.n	8000902 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	697a      	ldr	r2, [r7, #20]
 80008f8:	6811      	ldr	r1, [r2, #0]
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	430a      	orrs	r2, r1
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	e006      	b.n	8000910 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	697a      	ldr	r2, [r7, #20]
 8000906:	6811      	ldr	r1, [r2, #0]
 8000908:	68ba      	ldr	r2, [r7, #8]
 800090a:	43d2      	mvns	r2, r2
 800090c:	400a      	ands	r2, r1
 800090e:	601a      	str	r2, [r3, #0]
  }
}
 8000910:	371c      	adds	r7, #28
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	4613      	mov	r3, r2
 8000926:	460a      	mov	r2, r1
 8000928:	807a      	strh	r2, [r7, #2]
 800092a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
 800092c:	787b      	ldrb	r3, [r7, #1]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d008      	beq.n	8000944 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	8a9b      	ldrh	r3, [r3, #20]
 8000936:	b29a      	uxth	r2, r3
 8000938:	887b      	ldrh	r3, [r7, #2]
 800093a:	4313      	orrs	r3, r2
 800093c:	b29a      	uxth	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	829a      	strh	r2, [r3, #20]
 8000942:	e009      	b.n	8000958 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	8a9b      	ldrh	r3, [r3, #20]
 8000948:	b29a      	uxth	r2, r3
 800094a:	887b      	ldrh	r3, [r7, #2]
 800094c:	43db      	mvns	r3, r3
 800094e:	b29b      	uxth	r3, r3
 8000950:	4013      	ands	r3, r2
 8000952:	b29a      	uxth	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	829a      	strh	r2, [r3, #20]
  }
}
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop

08000964 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	889b      	ldrh	r3, [r3, #4]
 8000970:	b29b      	uxth	r3, r3
 8000972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000976:	b29b      	uxth	r3, r3
}
 8000978:	4618      	mov	r0, r3
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000990:	2300      	movs	r3, #0
 8000992:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	b29a      	uxth	r2, r3
 800099a:	887b      	ldrh	r3, [r7, #2]
 800099c:	4013      	ands	r3, r2
 800099e:	b29b      	uxth	r3, r3
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d002      	beq.n	80009aa <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80009a4:	2301      	movs	r3, #1
 80009a6:	73fb      	strb	r3, [r7, #15]
 80009a8:	e001      	b.n	80009ae <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80009aa:	2300      	movs	r3, #0
 80009ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80009bc:	b480      	push	{r7}
 80009be:	b087      	sub	sp, #28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	460b      	mov	r3, r1
 80009c6:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80009d4:	2300      	movs	r3, #0
 80009d6:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80009d8:	887b      	ldrh	r3, [r7, #2]
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	095b      	lsrs	r3, r3, #5
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 80009e2:	887b      	ldrh	r3, [r7, #2]
 80009e4:	f003 031f 	and.w	r3, r3, #31
 80009e8:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	2201      	movs	r2, #1
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d106      	bne.n	8000a08 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	899b      	ldrh	r3, [r3, #12]
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	4013      	ands	r3, r2
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	e00f      	b.n	8000a28 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d106      	bne.n	8000a1c <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	8a1b      	ldrh	r3, [r3, #16]
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	697a      	ldr	r2, [r7, #20]
 8000a16:	4013      	ands	r3, r2
 8000a18:	617b      	str	r3, [r7, #20]
 8000a1a:	e005      	b.n	8000a28 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	8a9b      	ldrh	r3, [r3, #20]
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	4013      	ands	r3, r2
 8000a26:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000a28:	887b      	ldrh	r3, [r7, #2]
 8000a2a:	0a1b      	lsrs	r3, r3, #8
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2201      	movs	r2, #1
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	68fa      	ldr	r2, [r7, #12]
 8000a42:	4013      	ands	r3, r2
 8000a44:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d005      	beq.n	8000a58 <USART_GetITStatus+0x9c>
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d002      	beq.n	8000a58 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
 8000a52:	2301      	movs	r3, #1
 8000a54:	74fb      	strb	r3, [r7, #19]
 8000a56:	e001      	b.n	8000a5c <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000a5c:	7cfb      	ldrb	r3, [r7, #19]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	371c      	adds	r7, #28
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b087      	sub	sp, #28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	2300      	movs	r3, #0
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000a84:	4b4d      	ldr	r3, [pc, #308]	; (8000bbc <RCC_GetClocksFreq+0x150>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f003 030c 	and.w	r3, r3, #12
 8000a8c:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	2b04      	cmp	r3, #4
 8000a92:	d007      	beq.n	8000aa4 <RCC_GetClocksFreq+0x38>
 8000a94:	2b08      	cmp	r3, #8
 8000a96:	d009      	beq.n	8000aac <RCC_GetClocksFreq+0x40>
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d134      	bne.n	8000b06 <RCC_GetClocksFreq+0x9a>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a48      	ldr	r2, [pc, #288]	; (8000bc0 <RCC_GetClocksFreq+0x154>)
 8000aa0:	601a      	str	r2, [r3, #0]
      break;
 8000aa2:	e034      	b.n	8000b0e <RCC_GetClocksFreq+0xa2>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a46      	ldr	r2, [pc, #280]	; (8000bc0 <RCC_GetClocksFreq+0x154>)
 8000aa8:	601a      	str	r2, [r3, #0]
      break;
 8000aaa:	e030      	b.n	8000b0e <RCC_GetClocksFreq+0xa2>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000aac:	4b43      	ldr	r3, [pc, #268]	; (8000bbc <RCC_GetClocksFreq+0x150>)
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000ab4:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000ab6:	4b41      	ldr	r3, [pc, #260]	; (8000bbc <RCC_GetClocksFreq+0x150>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000abe:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	0c9b      	lsrs	r3, r3, #18
 8000ac4:	3302      	adds	r3, #2
 8000ac6:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d106      	bne.n	8000adc <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	4a3c      	ldr	r2, [pc, #240]	; (8000bc4 <RCC_GetClocksFreq+0x158>)
 8000ad2:	fb02 f203 	mul.w	r2, r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	e013      	b.n	8000b04 <RCC_GetClocksFreq+0x98>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000adc:	4b37      	ldr	r3, [pc, #220]	; (8000bbc <RCC_GetClocksFreq+0x150>)
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d006      	beq.n	8000af6 <RCC_GetClocksFreq+0x8a>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	4a36      	ldr	r2, [pc, #216]	; (8000bc4 <RCC_GetClocksFreq+0x158>)
 8000aec:	fb02 f203 	mul.w	r2, r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	e006      	b.n	8000b04 <RCC_GetClocksFreq+0x98>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	4a31      	ldr	r2, [pc, #196]	; (8000bc0 <RCC_GetClocksFreq+0x154>)
 8000afa:	fb02 f203 	mul.w	r2, r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000b02:	e004      	b.n	8000b0e <RCC_GetClocksFreq+0xa2>
 8000b04:	e003      	b.n	8000b0e <RCC_GetClocksFreq+0xa2>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a2d      	ldr	r2, [pc, #180]	; (8000bc0 <RCC_GetClocksFreq+0x154>)
 8000b0a:	601a      	str	r2, [r3, #0]
      break;
 8000b0c:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000b0e:	4b2b      	ldr	r3, [pc, #172]	; (8000bbc <RCC_GetClocksFreq+0x150>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b16:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	091b      	lsrs	r3, r3, #4
 8000b1c:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000b1e:	4a2a      	ldr	r2, [pc, #168]	; (8000bc8 <RCC_GetClocksFreq+0x15c>)
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	4413      	add	r3, r2
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	40da      	lsrs	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000b36:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <RCC_GetClocksFreq+0x150>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b3e:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	0a1b      	lsrs	r3, r3, #8
 8000b44:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000b46:	4a20      	ldr	r2, [pc, #128]	; (8000bc8 <RCC_GetClocksFreq+0x15c>)
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	685a      	ldr	r2, [r3, #4]
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	40da      	lsrs	r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000b5e:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <RCC_GetClocksFreq+0x150>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000b66:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	0adb      	lsrs	r3, r3, #11
 8000b6c:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000b6e:	4a16      	ldr	r2, [pc, #88]	; (8000bc8 <RCC_GetClocksFreq+0x15c>)
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	4413      	add	r3, r2
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	685a      	ldr	r2, [r3, #4]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	40da      	lsrs	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000b86:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <RCC_GetClocksFreq+0x150>)
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b8e:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	0b9b      	lsrs	r3, r3, #14
 8000b94:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000b96:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <RCC_GetClocksFreq+0x160>)
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	68da      	ldr	r2, [r3, #12]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	611a      	str	r2, [r3, #16]
}
 8000bb0:	371c      	adds	r7, #28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	007a1200 	.word	0x007a1200
 8000bc4:	003d0900 	.word	0x003d0900
 8000bc8:	20000088 	.word	0x20000088
 8000bcc:	20000098 	.word	0x20000098

08000bd0 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000bdc:	78fb      	ldrb	r3, [r7, #3]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d006      	beq.n	8000bf0 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <RCC_AHBPeriphClockCmd+0x38>)
 8000be4:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <RCC_AHBPeriphClockCmd+0x38>)
 8000be6:	6951      	ldr	r1, [r2, #20]
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	430a      	orrs	r2, r1
 8000bec:	615a      	str	r2, [r3, #20]
 8000bee:	e006      	b.n	8000bfe <RCC_AHBPeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <RCC_AHBPeriphClockCmd+0x38>)
 8000bf2:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <RCC_AHBPeriphClockCmd+0x38>)
 8000bf4:	6951      	ldr	r1, [r2, #20]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	43d2      	mvns	r2, r2
 8000bfa:	400a      	ands	r2, r1
 8000bfc:	615a      	str	r2, [r3, #20]
  }
}
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	40021000 	.word	0x40021000

08000c0c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c18:	78fb      	ldrb	r3, [r7, #3]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d006      	beq.n	8000c2c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <RCC_APB2PeriphClockCmd+0x38>)
 8000c20:	4a08      	ldr	r2, [pc, #32]	; (8000c44 <RCC_APB2PeriphClockCmd+0x38>)
 8000c22:	6991      	ldr	r1, [r2, #24]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	430a      	orrs	r2, r1
 8000c28:	619a      	str	r2, [r3, #24]
 8000c2a:	e006      	b.n	8000c3a <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <RCC_APB2PeriphClockCmd+0x38>)
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <RCC_APB2PeriphClockCmd+0x38>)
 8000c30:	6991      	ldr	r1, [r2, #24]
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	43d2      	mvns	r2, r2
 8000c36:	400a      	ands	r2, r1
 8000c38:	619a      	str	r2, [r3, #24]
  }
}
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	40021000 	.word	0x40021000

08000c48 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c54:	78fb      	ldrb	r3, [r7, #3]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d006      	beq.n	8000c68 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <RCC_APB1PeriphClockCmd+0x38>)
 8000c5c:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <RCC_APB1PeriphClockCmd+0x38>)
 8000c5e:	69d1      	ldr	r1, [r2, #28]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	430a      	orrs	r2, r1
 8000c64:	61da      	str	r2, [r3, #28]
 8000c66:	e006      	b.n	8000c76 <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <RCC_APB1PeriphClockCmd+0x38>)
 8000c6a:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <RCC_APB1PeriphClockCmd+0x38>)
 8000c6c:	69d1      	ldr	r1, [r2, #28]
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	43d2      	mvns	r2, r2
 8000c72:	400a      	ands	r2, r1
 8000c74:	61da      	str	r2, [r3, #28]
  }
}
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	40021000 	.word	0x40021000

08000c84 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	78db      	ldrb	r3, [r3, #3]
 8000caa:	f003 030f 	and.w	r3, r3, #15
 8000cae:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	78db      	ldrb	r3, [r3, #3]
 8000cb4:	f003 0310 	and.w	r3, r3, #16
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d004      	beq.n	8000cc6 <GPIO_Init+0x42>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	789b      	ldrb	r3, [r3, #2]
 8000cc0:	69fa      	ldr	r2, [r7, #28]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d044      	beq.n	8000d5a <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]
 8000cda:	e038      	b.n	8000d4e <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d126      	bne.n	8000d48 <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	220f      	movs	r2, #15
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	4013      	ands	r3, r2
 8000d12:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	69fa      	ldr	r2, [r7, #28]
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	78db      	ldrb	r3, [r3, #3]
 8000d26:	2b28      	cmp	r3, #40	; 0x28
 8000d28:	d105      	bne.n	8000d36 <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	409a      	lsls	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	615a      	str	r2, [r3, #20]
 8000d34:	e008      	b.n	8000d48 <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	78db      	ldrb	r3, [r3, #3]
 8000d3a:	2b48      	cmp	r3, #72	; 0x48
 8000d3c:	d104      	bne.n	8000d48 <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	2201      	movs	r2, #1
 8000d42:	409a      	lsls	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	61bb      	str	r3, [r7, #24]
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	2b07      	cmp	r3, #7
 8000d52:	d9c3      	bls.n	8000cdc <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	2bff      	cmp	r3, #255	; 0xff
 8000d60:	d946      	bls.n	8000df0 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61bb      	str	r3, [r7, #24]
 8000d6c:	e03a      	b.n	8000de4 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	3308      	adds	r3, #8
 8000d72:	2201      	movs	r2, #1
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	881b      	ldrh	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d127      	bne.n	8000dde <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	220f      	movs	r2, #15
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	4013      	ands	r3, r2
 8000da6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	69fa      	ldr	r2, [r7, #28]
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	78db      	ldrb	r3, [r3, #3]
 8000dba:	2b28      	cmp	r3, #40	; 0x28
 8000dbc:	d105      	bne.n	8000dca <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	3308      	adds	r3, #8
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	409a      	lsls	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	78db      	ldrb	r3, [r3, #3]
 8000dce:	2b48      	cmp	r3, #72	; 0x48
 8000dd0:	d105      	bne.n	8000dde <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	3308      	adds	r3, #8
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	409a      	lsls	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	3301      	adds	r3, #1
 8000de2:	61bb      	str	r3, [r7, #24]
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	2b07      	cmp	r3, #7
 8000de8:	d9c1      	bls.n	8000d6e <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	605a      	str	r2, [r3, #4]
  }
}
 8000df0:	3724      	adds	r7, #36	; 0x24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b087      	sub	sp, #28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	da03      	bge.n	8000e26 <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 8000e1e:	4b2e      	ldr	r3, [pc, #184]	; (8000ed8 <GPIO_PinRemapConfig+0xdc>)
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	e002      	b.n	8000e2c <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 8000e26:	4b2c      	ldr	r3, [pc, #176]	; (8000ed8 <GPIO_PinRemapConfig+0xdc>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e32:	0c1b      	lsrs	r3, r3, #16
 8000e34:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000e46:	d10a      	bne.n	8000e5e <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000e4e:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8000e50:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <GPIO_PinRemapConfig+0xdc>)
 8000e52:	4a21      	ldr	r2, [pc, #132]	; (8000ed8 <GPIO_PinRemapConfig+0xdc>)
 8000e54:	6852      	ldr	r2, [r2, #4]
 8000e56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	e021      	b.n	8000ea2 <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d00e      	beq.n	8000e86 <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	697a      	ldr	r2, [r7, #20]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	e00d      	b.n	8000ea2 <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	0d5b      	lsrs	r3, r3, #21
 8000e8a:	011b      	lsls	r3, r3, #4
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	4013      	ands	r3, r2
 8000e98:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000ea0:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 8000ea2:	78fb      	ldrb	r3, [r7, #3]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d008      	beq.n	8000eba <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	0d5b      	lsrs	r3, r3, #21
 8000eac:	011b      	lsls	r3, r3, #4
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	697a      	ldr	r2, [r7, #20]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	da03      	bge.n	8000ec8 <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <GPIO_PinRemapConfig+0xdc>)
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	61da      	str	r2, [r3, #28]
 8000ec6:	e002      	b.n	8000ece <GPIO_PinRemapConfig+0xd2>
  }
  else
  {
    AFIO->MAPR = tmpreg;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <GPIO_PinRemapConfig+0xdc>)
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	605a      	str	r2, [r3, #4]
  }  
}
 8000ece:	371c      	adds	r7, #28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	40010000 	.word	0x40010000

08000edc <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000eec:	4013      	ands	r3, r2
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	4b43      	ldr	r3, [pc, #268]	; (800101c <DMA_DeInit+0x140>)
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d106      	bne.n	8000f20 <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 8000f12:	4b43      	ldr	r3, [pc, #268]	; (8001020 <DMA_DeInit+0x144>)
 8000f14:	4a42      	ldr	r2, [pc, #264]	; (8001020 <DMA_DeInit+0x144>)
 8000f16:	6852      	ldr	r2, [r2, #4]
 8000f18:	f042 020f 	orr.w	r2, r2, #15
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	e077      	b.n	8001010 <DMA_DeInit+0x134>
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	4b40      	ldr	r3, [pc, #256]	; (8001024 <DMA_DeInit+0x148>)
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d106      	bne.n	8000f36 <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 8000f28:	4b3d      	ldr	r3, [pc, #244]	; (8001020 <DMA_DeInit+0x144>)
 8000f2a:	4a3d      	ldr	r2, [pc, #244]	; (8001020 <DMA_DeInit+0x144>)
 8000f2c:	6852      	ldr	r2, [r2, #4]
 8000f2e:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	e06c      	b.n	8001010 <DMA_DeInit+0x134>
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	4b3b      	ldr	r3, [pc, #236]	; (8001028 <DMA_DeInit+0x14c>)
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d106      	bne.n	8000f4c <DMA_DeInit+0x70>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 8000f3e:	4b38      	ldr	r3, [pc, #224]	; (8001020 <DMA_DeInit+0x144>)
 8000f40:	4a37      	ldr	r2, [pc, #220]	; (8001020 <DMA_DeInit+0x144>)
 8000f42:	6852      	ldr	r2, [r2, #4]
 8000f44:	f442 6270 	orr.w	r2, r2, #3840	; 0xf00
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	e061      	b.n	8001010 <DMA_DeInit+0x134>
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	4b37      	ldr	r3, [pc, #220]	; (800102c <DMA_DeInit+0x150>)
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d106      	bne.n	8000f62 <DMA_DeInit+0x86>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 8000f54:	4b32      	ldr	r3, [pc, #200]	; (8001020 <DMA_DeInit+0x144>)
 8000f56:	4a32      	ldr	r2, [pc, #200]	; (8001020 <DMA_DeInit+0x144>)
 8000f58:	6852      	ldr	r2, [r2, #4]
 8000f5a:	f442 4270 	orr.w	r2, r2, #61440	; 0xf000
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	e056      	b.n	8001010 <DMA_DeInit+0x134>
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	4b32      	ldr	r3, [pc, #200]	; (8001030 <DMA_DeInit+0x154>)
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d106      	bne.n	8000f78 <DMA_DeInit+0x9c>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 8000f6a:	4b2d      	ldr	r3, [pc, #180]	; (8001020 <DMA_DeInit+0x144>)
 8000f6c:	4a2c      	ldr	r2, [pc, #176]	; (8001020 <DMA_DeInit+0x144>)
 8000f6e:	6852      	ldr	r2, [r2, #4]
 8000f70:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	e04b      	b.n	8001010 <DMA_DeInit+0x134>
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	4b2e      	ldr	r3, [pc, #184]	; (8001034 <DMA_DeInit+0x158>)
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d106      	bne.n	8000f8e <DMA_DeInit+0xb2>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 8000f80:	4b27      	ldr	r3, [pc, #156]	; (8001020 <DMA_DeInit+0x144>)
 8000f82:	4a27      	ldr	r2, [pc, #156]	; (8001020 <DMA_DeInit+0x144>)
 8000f84:	6852      	ldr	r2, [r2, #4]
 8000f86:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	e040      	b.n	8001010 <DMA_DeInit+0x134>
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	4b29      	ldr	r3, [pc, #164]	; (8001038 <DMA_DeInit+0x15c>)
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d106      	bne.n	8000fa4 <DMA_DeInit+0xc8>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 8000f96:	4b22      	ldr	r3, [pc, #136]	; (8001020 <DMA_DeInit+0x144>)
 8000f98:	4a21      	ldr	r2, [pc, #132]	; (8001020 <DMA_DeInit+0x144>)
 8000f9a:	6852      	ldr	r2, [r2, #4]
 8000f9c:	f042 6270 	orr.w	r2, r2, #251658240	; 0xf000000
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	e035      	b.n	8001010 <DMA_DeInit+0x134>
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	4b25      	ldr	r3, [pc, #148]	; (800103c <DMA_DeInit+0x160>)
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d106      	bne.n	8000fba <DMA_DeInit+0xde>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 8000fac:	4b24      	ldr	r3, [pc, #144]	; (8001040 <DMA_DeInit+0x164>)
 8000fae:	4a24      	ldr	r2, [pc, #144]	; (8001040 <DMA_DeInit+0x164>)
 8000fb0:	6852      	ldr	r2, [r2, #4]
 8000fb2:	f042 020f 	orr.w	r2, r2, #15
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	e02a      	b.n	8001010 <DMA_DeInit+0x134>
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	4b21      	ldr	r3, [pc, #132]	; (8001044 <DMA_DeInit+0x168>)
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d106      	bne.n	8000fd0 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 8000fc2:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <DMA_DeInit+0x164>)
 8000fc4:	4a1e      	ldr	r2, [pc, #120]	; (8001040 <DMA_DeInit+0x164>)
 8000fc6:	6852      	ldr	r2, [r2, #4]
 8000fc8:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	e01f      	b.n	8001010 <DMA_DeInit+0x134>
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <DMA_DeInit+0x16c>)
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d106      	bne.n	8000fe6 <DMA_DeInit+0x10a>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <DMA_DeInit+0x164>)
 8000fda:	4a19      	ldr	r2, [pc, #100]	; (8001040 <DMA_DeInit+0x164>)
 8000fdc:	6852      	ldr	r2, [r2, #4]
 8000fde:	f442 6270 	orr.w	r2, r2, #3840	; 0xf00
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	e014      	b.n	8001010 <DMA_DeInit+0x134>
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	4b18      	ldr	r3, [pc, #96]	; (800104c <DMA_DeInit+0x170>)
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d106      	bne.n	8000ffc <DMA_DeInit+0x120>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <DMA_DeInit+0x164>)
 8000ff0:	4a13      	ldr	r2, [pc, #76]	; (8001040 <DMA_DeInit+0x164>)
 8000ff2:	6852      	ldr	r2, [r2, #4]
 8000ff4:	f442 4270 	orr.w	r2, r2, #61440	; 0xf000
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	e009      	b.n	8001010 <DMA_DeInit+0x134>
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <DMA_DeInit+0x174>)
 8001000:	429a      	cmp	r2, r3
 8001002:	d105      	bne.n	8001010 <DMA_DeInit+0x134>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 8001004:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <DMA_DeInit+0x164>)
 8001006:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <DMA_DeInit+0x164>)
 8001008:	6852      	ldr	r2, [r2, #4]
 800100a:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 800100e:	605a      	str	r2, [r3, #4]
    }
  }
}
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40020008 	.word	0x40020008
 8001020:	40020000 	.word	0x40020000
 8001024:	4002001c 	.word	0x4002001c
 8001028:	40020030 	.word	0x40020030
 800102c:	40020044 	.word	0x40020044
 8001030:	40020058 	.word	0x40020058
 8001034:	4002006c 	.word	0x4002006c
 8001038:	40020080 	.word	0x40020080
 800103c:	40020408 	.word	0x40020408
 8001040:	40020400 	.word	0x40020400
 8001044:	4002041c 	.word	0x4002041c
 8001048:	40020430 	.word	0x40020430
 800104c:	40020444 	.word	0x40020444
 8001050:	40020458 	.word	0x40020458

08001054 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800106e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001072:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001082:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800108e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	69db      	ldr	r3, [r3, #28]
 8001094:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800109a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a0:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	68da      	ldr	r2, [r3, #12]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	60da      	str	r2, [r3, #12]
}
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80010dc:	78fb      	ldrb	r3, [r7, #3]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d006      	beq.n	80010f0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f043 0201 	orr.w	r2, r3, #1
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	e006      	b.n	80010fe <DMA_Cmd+0x2e>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80010f8:	4013      	ands	r3, r2
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	6013      	str	r3, [r2, #0]
  }
}
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001110:	2300      	movs	r3, #0
 8001112:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <DMA_GetFlagStatus+0x4c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	e002      	b.n	8001130 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <DMA_GetFlagStatus+0x50>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8001130:	68ba      	ldr	r2, [r7, #8]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4013      	ands	r3, r2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d002      	beq.n	8001140 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 800113a:	2301      	movs	r3, #1
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	e001      	b.n	8001144 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 8001144:	7bfb      	ldrb	r3, [r7, #15]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40020400 	.word	0x40020400
 8001158:	40020000 	.word	0x40020000

0800115c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	2300      	movs	r3, #0
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	230f      	movs	r3, #15
 800116e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	78db      	ldrb	r3, [r3, #3]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d038      	beq.n	80011ea <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001178:	4b26      	ldr	r3, [pc, #152]	; (8001214 <NVIC_Init+0xb8>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	43db      	mvns	r3, r3
 800117e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001182:	0a1b      	lsrs	r3, r3, #8
 8001184:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	f1c3 0304 	rsb	r3, r3, #4
 800118c:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	68fa      	ldr	r2, [r7, #12]
 8001192:	fa22 f303 	lsr.w	r3, r2, r3
 8001196:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	785b      	ldrb	r3, [r3, #1]
 800119c:	461a      	mov	r2, r3
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	789b      	ldrb	r3, [r3, #2]
 80011aa:	461a      	mov	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4013      	ands	r3, r2
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80011bc:	4916      	ldr	r1, [pc, #88]	; (8001218 <NVIC_Init+0xbc>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	440b      	add	r3, r1
 80011c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <NVIC_Init+0xbc>)
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	7812      	ldrb	r2, [r2, #0]
 80011d2:	0952      	lsrs	r2, r2, #5
 80011d4:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	7809      	ldrb	r1, [r1, #0]
 80011da:	f001 011f 	and.w	r1, r1, #31
 80011de:	2001      	movs	r0, #1
 80011e0:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80011e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80011e8:	e00e      	b.n	8001208 <NVIC_Init+0xac>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <NVIC_Init+0xbc>)
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	7812      	ldrb	r2, [r2, #0]
 80011f0:	0952      	lsrs	r2, r2, #5
 80011f2:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	7809      	ldrb	r1, [r1, #0]
 80011f8:	f001 011f 	and.w	r1, r1, #31
 80011fc:	2001      	movs	r0, #1
 80011fe:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001202:	3220      	adds	r2, #32
 8001204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001208:	371c      	adds	r7, #28
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00
 8001218:	e000e100 	.word	0xe000e100

0800121c <__libc_init_array>:
 800121c:	b570      	push	{r4, r5, r6, lr}
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <__libc_init_array+0x3c>)
 8001220:	4d0e      	ldr	r5, [pc, #56]	; (800125c <__libc_init_array+0x40>)
 8001222:	2400      	movs	r4, #0
 8001224:	1aed      	subs	r5, r5, r3
 8001226:	10ad      	asrs	r5, r5, #2
 8001228:	461e      	mov	r6, r3
 800122a:	42ac      	cmp	r4, r5
 800122c:	d004      	beq.n	8001238 <__libc_init_array+0x1c>
 800122e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8001232:	4790      	blx	r2
 8001234:	3401      	adds	r4, #1
 8001236:	e7f8      	b.n	800122a <__libc_init_array+0xe>
 8001238:	f000 f816 	bl	8001268 <_init>
 800123c:	4d08      	ldr	r5, [pc, #32]	; (8001260 <__libc_init_array+0x44>)
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <__libc_init_array+0x48>)
 8001240:	2400      	movs	r4, #0
 8001242:	1aed      	subs	r5, r5, r3
 8001244:	10ad      	asrs	r5, r5, #2
 8001246:	461e      	mov	r6, r3
 8001248:	42ac      	cmp	r4, r5
 800124a:	d004      	beq.n	8001256 <__libc_init_array+0x3a>
 800124c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8001250:	4790      	blx	r2
 8001252:	3401      	adds	r4, #1
 8001254:	e7f8      	b.n	8001248 <__libc_init_array+0x2c>
 8001256:	bd70      	pop	{r4, r5, r6, pc}
 8001258:	08001280 	.word	0x08001280
 800125c:	08001280 	.word	0x08001280
 8001260:	08001284 	.word	0x08001284
 8001264:	08001280 	.word	0x08001280

08001268 <_init>:
 8001268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800126a:	bf00      	nop
 800126c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800126e:	bc08      	pop	{r3}
 8001270:	469e      	mov	lr, r3
 8001272:	4770      	bx	lr

08001274 <_fini>:
 8001274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001276:	bf00      	nop
 8001278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800127a:	bc08      	pop	{r3}
 800127c:	469e      	mov	lr, r3
 800127e:	4770      	bx	lr
