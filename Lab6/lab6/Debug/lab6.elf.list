
lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ac4  08000198  08000198  00008198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08002c5c  08002c5c  0000ac5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002cac  08002cac  0000acac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002cb0  08002cb0  0000acb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002cb4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003de8  2000000c  08002cc0  0001000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20003df4  08002cc0  00013df4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000115a1  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002ab6  00000000  00000000  000215dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000891f  00000000  00000000  00024093  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d90  00000000  00000000  0002c9b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001038  00000000  00000000  0002d748  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000611b  00000000  00000000  0002e780  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004a2e  00000000  00000000  0003489b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      00000082  00000000  00000000  000392c9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000021ec  00000000  00000000  0003934c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002c44 	.word	0x08002c44

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4903      	ldr	r1, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002c44 	.word	0x08002c44
 80001d4:	20000010 	.word	0x20000010

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf14      	ite	ne
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e720      	b.n	800031c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aedc 	beq.w	80002ca <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6c1      	b.n	80002ca <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr
 80009ac:	0000      	movs	r0, r0
	...

080009b0 <udelay>:

#define ADDRESS		0xc0	//+ address


void udelay(volatile unsigned int delay)
{
 80009b0:	b507      	push	{r0, r1, r2, lr}
 80009b2:	9001      	str	r0, [sp, #4]
	delay*=11.206;
 80009b4:	9801      	ldr	r0, [sp, #4]
 80009b6:	f7ff fd51 	bl	800045c <__aeabi_ui2d>
 80009ba:	a309      	add	r3, pc, #36	; (adr r3, 80009e0 <udelay+0x30>)
 80009bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009c0:	f7ff fdc2 	bl	8000548 <__aeabi_dmul>
 80009c4:	f7ff ffd2 	bl	800096c <__aeabi_d2uiz>
 80009c8:	9001      	str	r0, [sp, #4]
	for (;delay!=0;delay--);
 80009ca:	9b01      	ldr	r3, [sp, #4]
 80009cc:	b11b      	cbz	r3, 80009d6 <udelay+0x26>
 80009ce:	9b01      	ldr	r3, [sp, #4]
 80009d0:	3b01      	subs	r3, #1
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	e7f9      	b.n	80009ca <udelay+0x1a>
}
 80009d6:	b003      	add	sp, #12
 80009d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80009dc:	f3af 8000 	nop.w
 80009e0:	d4fdf3b6 	.word	0xd4fdf3b6
 80009e4:	40266978 	.word	0x40266978

080009e8 <sendbyte>:



void sendbyte(uint8_t data)
{
 80009e8:	b570      	push	{r4, r5, r6, lr}
 80009ea:	4606      	mov	r6, r0
 80009ec:	2408      	movs	r4, #8
	uint8_t i;
  //i = i << 1
	for(i=0x1;i!=0;i<<=1)
 80009ee:	2501      	movs	r5, #1
	{
		DIO(data & i);
 80009f0:	ea05 0206 	and.w	r2, r5, r6
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <sendbyte+0x40>)
 80009f6:	2101      	movs	r1, #1
 80009f8:	f002 f800 	bl	80029fc <HAL_GPIO_WritePin>
		CLK(LOW);
 80009fc:	2102      	movs	r1, #2
 80009fe:	2200      	movs	r2, #0
 8000a00:	4809      	ldr	r0, [pc, #36]	; (8000a28 <sendbyte+0x40>)
 8000a02:	f001 fffb 	bl	80029fc <HAL_GPIO_WritePin>
		CDELAY;
 8000a06:	2001      	movs	r0, #1
 8000a08:	f7ff ffd2 	bl	80009b0 <udelay>
		CLK(HIGH);
 8000a0c:	4806      	ldr	r0, [pc, #24]	; (8000a28 <sendbyte+0x40>)
 8000a0e:	2102      	movs	r1, #2
 8000a10:	2201      	movs	r2, #1
 8000a12:	f001 fff3 	bl	80029fc <HAL_GPIO_WritePin>
		CDELAY;
 8000a16:	2001      	movs	r0, #1
 8000a18:	f7ff ffca 	bl	80009b0 <udelay>

void sendbyte(uint8_t data)
{
	uint8_t i;
  //i = i << 1
	for(i=0x1;i!=0;i<<=1)
 8000a1c:	006d      	lsls	r5, r5, #1
 8000a1e:	3c01      	subs	r4, #1
 8000a20:	b2ed      	uxtb	r5, r5
 8000a22:	d1e5      	bne.n	80009f0 <sendbyte+0x8>
		CLK(LOW);
		CDELAY;
		CLK(HIGH);
		CDELAY;
	}
}
 8000a24:	bd70      	pop	{r4, r5, r6, pc}
 8000a26:	bf00      	nop
 8000a28:	40020800 	.word	0x40020800

08000a2c <sendInstruction>:
}



void sendInstruction(uint8_t data)
{
 8000a2c:	b538      	push	{r3, r4, r5, lr}
	STB(LOW);
 8000a2e:	4c0d      	ldr	r4, [pc, #52]	; (8000a64 <sendInstruction+0x38>)
 8000a30:	2101      	movs	r1, #1
 8000a32:	2200      	movs	r2, #0
}



void sendInstruction(uint8_t data)
{
 8000a34:	4605      	mov	r5, r0
	STB(LOW);
 8000a36:	4620      	mov	r0, r4
 8000a38:	f001 ffe0 	bl	80029fc <HAL_GPIO_WritePin>
	CDELAY;
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	f7ff ffb7 	bl	80009b0 <udelay>
	sendbyte(data);
 8000a42:	4628      	mov	r0, r5
 8000a44:	f7ff ffd0 	bl	80009e8 <sendbyte>
	CDELAY;
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f7ff ffb1 	bl	80009b0 <udelay>
	STB(HIGH);
 8000a4e:	2101      	movs	r1, #1
 8000a50:	4620      	mov	r0, r4
 8000a52:	460a      	mov	r2, r1
 8000a54:	f001 ffd2 	bl	80029fc <HAL_GPIO_WritePin>
	CDELAY;
 8000a58:	2001      	movs	r0, #1
}
 8000a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	STB(LOW);
	CDELAY;
	sendbyte(data);
	CDELAY;
	STB(HIGH);
	CDELAY;
 8000a5e:	f7ff bfa7 	b.w	80009b0 <udelay>
 8000a62:	bf00      	nop
 8000a64:	40020400 	.word	0x40020400

08000a68 <sendStartAdress>:

	//CDELAY;
}

void sendStartAdress(uint8_t data)
{
 8000a68:	b510      	push	{r4, lr}
	STB(LOW);
 8000a6a:	2101      	movs	r1, #1

	//CDELAY;
}

void sendStartAdress(uint8_t data)
{
 8000a6c:	4604      	mov	r4, r0
	STB(LOW);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	4806      	ldr	r0, [pc, #24]	; (8000a8c <sendStartAdress+0x24>)
 8000a72:	f001 ffc3 	bl	80029fc <HAL_GPIO_WritePin>
	CDELAY;
 8000a76:	2001      	movs	r0, #1
 8000a78:	f7ff ff9a 	bl	80009b0 <udelay>
	sendbyte(data);
 8000a7c:	4620      	mov	r0, r4
 8000a7e:	f7ff ffb3 	bl	80009e8 <sendbyte>
	CDELAY;
 8000a82:	2001      	movs	r0, #1
}
 8000a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void sendStartAdress(uint8_t data)
{
	STB(LOW);
	CDELAY;
	sendbyte(data);
	CDELAY;
 8000a88:	f7ff bf92 	b.w	80009b0 <udelay>
 8000a8c:	40020400 	.word	0x40020400

08000a90 <sendMultipleData>:
}

void sendMultipleData(uint8_t data, int count)
{
 8000a90:	b570      	push	{r4, r5, r6, lr}
 8000a92:	4605      	mov	r5, r0
 8000a94:	460e      	mov	r6, r1
	int i;
	for(i = 0; i < count; i++)
 8000a96:	2400      	movs	r4, #0
 8000a98:	42b4      	cmp	r4, r6
 8000a9a:	da04      	bge.n	8000aa6 <sendMultipleData+0x16>
			sendbyte(data);
 8000a9c:	4628      	mov	r0, r5
 8000a9e:	f7ff ffa3 	bl	80009e8 <sendbyte>
}

void sendMultipleData(uint8_t data, int count)
{
	int i;
	for(i = 0; i < count; i++)
 8000aa2:	3401      	adds	r4, #1
 8000aa4:	e7f8      	b.n	8000a98 <sendMultipleData+0x8>
			sendbyte(data);

	CDELAY;
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff ff82 	bl	80009b0 <udelay>
	STB(HIGH);
 8000aac:	2101      	movs	r1, #1
 8000aae:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <sendMultipleData+0x30>)
 8000ab0:	460a      	mov	r2, r1
 8000ab2:	f001 ffa3 	bl	80029fc <HAL_GPIO_WritePin>
	CDELAY;
 8000ab6:	2001      	movs	r0, #1
}
 8000ab8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	for(i = 0; i < count; i++)
			sendbyte(data);

	CDELAY;
	STB(HIGH);
	CDELAY;
 8000abc:	f7ff bf78 	b.w	80009b0 <udelay>
 8000ac0:	40020400 	.word	0x40020400

08000ac4 <clearSegmentsAndLEDs>:
}




void clearSegmentsAndLEDs(void){
 8000ac4:	b508      	push	{r3, lr}
	sendInstruction(0x8F); //Lights up
 8000ac6:	208f      	movs	r0, #143	; 0x8f
 8000ac8:	f7ff ffb0 	bl	8000a2c <sendInstruction>
	sendInstruction(0x40); //Command, write to chip, chip autoincrements
 8000acc:	2040      	movs	r0, #64	; 0x40
 8000ace:	f7ff ffad 	bl	8000a2c <sendInstruction>
	sendStartAdress(0xC0);//Send start adress
 8000ad2:	20c0      	movs	r0, #192	; 0xc0
 8000ad4:	f7ff ffc8 	bl	8000a68 <sendStartAdress>

		// Sendinging (data,count)
	sendMultipleData(0x00, 16);
 8000ad8:	2000      	movs	r0, #0
 8000ada:	2110      	movs	r1, #16

}
 8000adc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sendInstruction(0x8F); //Lights up
	sendInstruction(0x40); //Command, write to chip, chip autoincrements
	sendStartAdress(0xC0);//Send start adress

		// Sendinging (data,count)
	sendMultipleData(0x00, 16);
 8000ae0:	f7ff bfd6 	b.w	8000a90 <sendMultipleData>

08000ae4 <writeHexValueToSegmentAtAdress>:

}

void writeHexValueToSegmentAtAdress(uint8_t value, uint8_t adress)
{
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <writeHexValueToSegmentAtAdress+0x40>)
 8000ae6:	f000 020f 	and.w	r2, r0, #15
 8000aea:	0900      	lsrs	r0, r0, #4
 8000aec:	b570      	push	{r4, r5, r6, lr}
 8000aee:	5c1d      	ldrb	r5, [r3, r0]
 8000af0:	5c9e      	ldrb	r6, [r3, r2]
 8000af2:	460c      	mov	r4, r1
		 highNibble= value & highMask;
		 highNibble = highNibble >> 4 ;
		 highNibble = decodeHexToSevenSegment(highNibble);


		 sendInstruction(DATA|FIXED);    //Command, write to chip, chip no autoincrements
 8000af4:	2044      	movs	r0, #68	; 0x44
 8000af6:	f7ff ff99 	bl	8000a2c <sendInstruction>
		 sendStartAdress(adress+2);
 8000afa:	1ca0      	adds	r0, r4, #2
 8000afc:	b2c0      	uxtb	r0, r0
 8000afe:	f7ff ffb3 	bl	8000a68 <sendStartAdress>
		 sendMultipleData(lowNibble, 1); // One byte
 8000b02:	2101      	movs	r1, #1
 8000b04:	4630      	mov	r0, r6
 8000b06:	f7ff ffc3 	bl	8000a90 <sendMultipleData>


		 sendInstruction(DATA|FIXED); //No auto increment
 8000b0a:	2044      	movs	r0, #68	; 0x44
 8000b0c:	f7ff ff8e 	bl	8000a2c <sendInstruction>
		 sendStartAdress(adress);
 8000b10:	4620      	mov	r0, r4
 8000b12:	f7ff ffa9 	bl	8000a68 <sendStartAdress>
		 sendMultipleData(highNibble, 1);
 8000b16:	4628      	mov	r0, r5
 8000b18:	2101      	movs	r1, #1


}
 8000b1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		 sendMultipleData(lowNibble, 1); // One byte


		 sendInstruction(DATA|FIXED); //No auto increment
		 sendStartAdress(adress);
		 sendMultipleData(highNibble, 1);
 8000b1e:	f7ff bfb7 	b.w	8000a90 <sendMultipleData>
 8000b22:	bf00      	nop
 8000b24:	08002c70 	.word	0x08002c70

08000b28 <writeIntValueToSegments>:


}

void writeIntValueToSegments(uint32_t value)
{
 8000b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000b2a:	2300      	movs	r3, #0
	uint8_t adress = 0xC0;
	uint8_t extractedNibblesInByteFormat[8];
	uint32_t mask = 0x0F;
 8000b2c:	220f      	movs	r2, #15
 8000b2e:	009c      	lsls	r4, r3, #2
	uint32_t extractedNibbleAs32bit;
	uint8_t nibble;
	uint8_t i;
	for(i = 0; i < 8; i++){
		extractedNibbleAs32bit = mask & value;
 8000b30:	ea02 0100 	and.w	r1, r2, r0
		extractedNibbleAs32bit = extractedNibbleAs32bit >> 4*i;
 8000b34:	40e1      	lsrs	r1, r4
		nibble = (uint8_t)extractedNibbleAs32bit;
 8000b36:	b2c9      	uxtb	r1, r1
 8000b38:	290f      	cmp	r1, #15
 8000b3a:	bf96      	itet	ls
 8000b3c:	4c0f      	ldrls	r4, [pc, #60]	; (8000b7c <writeIntValueToSegments+0x54>)
 8000b3e:	2100      	movhi	r1, #0
 8000b40:	5c61      	ldrbls	r1, [r4, r1]
		nibble = decodeHexToSevenSegment(nibble);
		extractedNibblesInByteFormat[i] = nibble;
 8000b42:	f80d 1003 	strb.w	r1, [sp, r3]
 8000b46:	3301      	adds	r3, #1
	uint8_t extractedNibblesInByteFormat[8];
	uint32_t mask = 0x0F;
	uint32_t extractedNibbleAs32bit;
	uint8_t nibble;
	uint8_t i;
	for(i = 0; i < 8; i++){
 8000b48:	2b08      	cmp	r3, #8
		extractedNibbleAs32bit = mask & value;
		extractedNibbleAs32bit = extractedNibbleAs32bit >> 4*i;
		nibble = (uint8_t)extractedNibbleAs32bit;
		nibble = decodeHexToSevenSegment(nibble);
		extractedNibblesInByteFormat[i] = nibble;
		mask = mask << 4;
 8000b4a:	ea4f 1202 	mov.w	r2, r2, lsl #4
	uint8_t extractedNibblesInByteFormat[8];
	uint32_t mask = 0x0F;
	uint32_t extractedNibbleAs32bit;
	uint8_t nibble;
	uint8_t i;
	for(i = 0; i < 8; i++){
 8000b4e:	d1ee      	bne.n	8000b2e <writeIntValueToSegments+0x6>
 8000b50:	2400      	movs	r4, #0
 8000b52:	25c0      	movs	r5, #192	; 0xc0
		nibble = decodeHexToSevenSegment(nibble);
		extractedNibblesInByteFormat[i] = nibble;
		mask = mask << 4;
	}
	for(i = 0; i < 8; i++){
		sendInstruction(DATA|FIXED);    //Command, write to chip, chip no autoincrements
 8000b54:	2044      	movs	r0, #68	; 0x44
 8000b56:	f7ff ff69 	bl	8000a2c <sendInstruction>
		sendStartAdress(adress +2*i);
 8000b5a:	4628      	mov	r0, r5
 8000b5c:	f7ff ff84 	bl	8000a68 <sendStartAdress>
 8000b60:	ab00      	add	r3, sp, #0
 8000b62:	4423      	add	r3, r4
		sendMultipleData(extractedNibblesInByteFormat[7-i], 1); // One byte
 8000b64:	2101      	movs	r1, #1
 8000b66:	79d8      	ldrb	r0, [r3, #7]
 8000b68:	3c01      	subs	r4, #1
 8000b6a:	f7ff ff91 	bl	8000a90 <sendMultipleData>
 8000b6e:	3502      	adds	r5, #2
		nibble = (uint8_t)extractedNibbleAs32bit;
		nibble = decodeHexToSevenSegment(nibble);
		extractedNibblesInByteFormat[i] = nibble;
		mask = mask << 4;
	}
	for(i = 0; i < 8; i++){
 8000b70:	f114 0f08 	cmn.w	r4, #8
 8000b74:	b2ed      	uxtb	r5, r5
 8000b76:	d1ed      	bne.n	8000b54 <writeIntValueToSegments+0x2c>
		sendInstruction(DATA|FIXED);    //Command, write to chip, chip no autoincrements
		sendStartAdress(adress +2*i);
		sendMultipleData(extractedNibblesInByteFormat[7-i], 1); // One byte
		}
}
 8000b78:	b003      	add	sp, #12
 8000b7a:	bd30      	pop	{r4, r5, pc}
 8000b7c:	08002c70 	.word	0x08002c70

08000b80 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8000b80:	f001 b838 	b.w	8001bf4 <osSystickHandler>

08000b84 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b84:	4801      	ldr	r0, [pc, #4]	; (8000b8c <TIM1_UP_TIM10_IRQHandler+0x8>)
 8000b86:	f001 bab6 	b.w	80020f6 <HAL_TIM_IRQHandler>
 8000b8a:	bf00      	nop
 8000b8c:	20003d70 	.word	0x20003d70

08000b90 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8000b90:	b507      	push	{r0, r1, r2, lr}


  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b92:	480f      	ldr	r0, [pc, #60]	; (8000bd0 <USART2_IRQHandler+0x40>)
 8000b94:	f001 f9cf 	bl	8001f36 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  uint8_t data1;
  volatile HAL_StatusTypeDef UARTStatus;
  UARTStatus = HAL_UART_Receive_IT(&huart2,&data1,sizeof(data1));
 8000b98:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <USART2_IRQHandler+0x40>)
 8000b9a:	f10d 0106 	add.w	r1, sp, #6
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	f001 f99f 	bl	8001ee2 <HAL_UART_Receive_IT>
 8000ba4:	f88d 0007 	strb.w	r0, [sp, #7]
     	  if(data1 > 0)
 8000ba8:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8000bac:	b160      	cbz	r0, 8000bc8 <USART2_IRQHandler+0x38>
     	  {
     		  writeHexValueToSegmentAtAdress(data1, 0xC0);
 8000bae:	21c0      	movs	r1, #192	; 0xc0
 8000bb0:	f7ff ff98 	bl	8000ae4 <writeHexValueToSegmentAtAdress>
      		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
 8000bb4:	4807      	ldr	r0, [pc, #28]	; (8000bd4 <USART2_IRQHandler+0x44>)
 8000bb6:	2120      	movs	r1, #32
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f001 ff1f 	bl	80029fc <HAL_GPIO_WritePin>
      		  HAL_UART_Transmit_IT(&huart2,"OK",sizeof("OK"));
 8000bbe:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <USART2_IRQHandler+0x40>)
 8000bc0:	4905      	ldr	r1, [pc, #20]	; (8000bd8 <USART2_IRQHandler+0x48>)
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	f001 f96e 	bl	8001ea4 <HAL_UART_Transmit_IT>
      	  }

     	// __HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);
     	//__HAL_UART_DISABLE_IT(&huart2,UART_IT_RXNE);
}
 8000bc8:	b003      	add	sp, #12
 8000bca:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bce:	bf00      	nop
 8000bd0:	20003db0 	.word	0x20003db0
 8000bd4:	40020000 	.word	0x40020000
 8000bd8:	08002c80 	.word	0x08002c80

08000bdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bdc:	b530      	push	{r4, r5, lr}
 8000bde:	4601      	mov	r1, r0
 8000be0:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000be2:	2200      	movs	r2, #0
 8000be4:	2019      	movs	r0, #25
 8000be6:	f001 ff23 	bl	8002a30 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000bea:	2019      	movs	r0, #25
 8000bec:	f001 ff52 	bl	8002a94 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bf0:	2500      	movs	r5, #0
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <HAL_InitTick+0x68>)
 8000bf4:	9502      	str	r5, [sp, #8]
 8000bf6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bf8:	4c13      	ldr	r4, [pc, #76]	; (8000c48 <HAL_InitTick+0x6c>)
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bfa:	f042 0201 	orr.w	r2, r2, #1
 8000bfe:	645a      	str	r2, [r3, #68]	; 0x44
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	9302      	str	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c08:	a803      	add	r0, sp, #12
 8000c0a:	a901      	add	r1, sp, #4
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c0c:	9b02      	ldr	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c0e:	f001 fe03 	bl	8002818 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c12:	f001 fdeb 	bl	80027ec <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <HAL_InitTick+0x70>)
 8000c18:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000c1a:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000c1e:	60e3      	str	r3, [r4, #12]
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000c20:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <HAL_InitTick+0x74>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8000c22:	6125      	str	r5, [r4, #16]
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000c24:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c28:	1e43      	subs	r3, r0, #1
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c2a:	4620      	mov	r0, r4
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c2c:	6063      	str	r3, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2e:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c30:	f001 fb50 	bl	80022d4 <HAL_TIM_Base_Init>
 8000c34:	b918      	cbnz	r0, 8000c3e <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c36:	4620      	mov	r0, r4
 8000c38:	f001 fa4e 	bl	80020d8 <HAL_TIM_Base_Start_IT>
 8000c3c:	e000      	b.n	8000c40 <HAL_InitTick+0x64>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000c3e:	2001      	movs	r0, #1
}
 8000c40:	b009      	add	sp, #36	; 0x24
 8000c42:	bd30      	pop	{r4, r5, pc}
 8000c44:	40023800 	.word	0x40023800
 8000c48:	20003d70 	.word	0x20003d70
 8000c4c:	40010000 	.word	0x40010000
 8000c50:	000f4240 	.word	0x000f4240

08000c54 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  HAL_IncTick();
 8000c54:	f001 bf66 	b.w	8002b24 <HAL_IncTick>

08000c58 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c5a:	2003      	movs	r0, #3
 8000c5c:	f001 fed6 	bl	8002a0c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000c60:	2100      	movs	r1, #0
 8000c62:	460a      	mov	r2, r1
 8000c64:	f06f 000b 	mvn.w	r0, #11
 8000c68:	f001 fee2 	bl	8002a30 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	460a      	mov	r2, r1
 8000c70:	f06f 000a 	mvn.w	r0, #10
 8000c74:	f001 fedc 	bl	8002a30 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000c78:	2100      	movs	r1, #0
 8000c7a:	460a      	mov	r2, r1
 8000c7c:	f06f 0009 	mvn.w	r0, #9
 8000c80:	f001 fed6 	bl	8002a30 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000c84:	2100      	movs	r1, #0
 8000c86:	460a      	mov	r2, r1
 8000c88:	f06f 0003 	mvn.w	r0, #3
 8000c8c:	f001 fed0 	bl	8002a30 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295
 8000c94:	210f      	movs	r1, #15
 8000c96:	2200      	movs	r2, #0

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000c9c:	f001 bec8 	b.w	8002a30 <HAL_NVIC_SetPriority>

08000ca0 <HAL_UART_MspInit>:

  /* USER CODE END MspInit 1 */
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca0:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8000ca2:	6802      	ldr	r2, [r0, #0]
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <HAL_UART_MspInit+0x58>)
 8000ca6:	429a      	cmp	r2, r3

  /* USER CODE END MspInit 1 */
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8000caa:	d122      	bne.n	8000cf2 <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cac:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8000cb0:	2400      	movs	r4, #0
 8000cb2:	9400      	str	r4, [sp, #0]
 8000cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	4811      	ldr	r0, [pc, #68]	; (8000cfc <HAL_UART_MspInit+0x5c>)
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000cbc:	641a      	str	r2, [r3, #64]	; 0x40
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	9b00      	ldr	r3, [sp, #0]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cc8:	230c      	movs	r3, #12
 8000cca:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cda:	2307      	movs	r3, #7
 8000cdc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f001 fdb9 	bl	8002854 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000ce2:	2026      	movs	r0, #38	; 0x26
 8000ce4:	2105      	movs	r1, #5
 8000ce6:	4622      	mov	r2, r4
 8000ce8:	f001 fea2 	bl	8002a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cec:	2026      	movs	r0, #38	; 0x26
 8000cee:	f001 fed1 	bl	8002a94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cf2:	b006      	add	sp, #24
 8000cf4:	bd10      	pop	{r4, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40004400 	.word	0x40004400
 8000cfc:	40020000 	.word	0x40020000

08000d00 <vTaskCodeBlink1>:
  /* USER CODE END 3 */

}

void vTaskCodeBlink1( void * pvParameters )
{
 8000d00:	b507      	push	{r0, r1, r2, lr}

	 TickType_t xLastWakeTime;
	 const TickType_t xFrequency = 500;

	     // Initialise the xLastWakeTime variable with the current time.
	     xLastWakeTime = xTaskGetTickCount();
 8000d02:	f000 fa9b 	bl	800123c <xTaskGetTickCount>
 8000d06:	9001      	str	r0, [sp, #4]

  for( ;; )
  {
	  // Wait for the next cycle.
	  vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000d08:	a801      	add	r0, sp, #4
 8000d0a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d0e:	f000 fb9b 	bl	8001448 <vTaskDelayUntil>
      /* Task code goes here. */
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000d12:	4802      	ldr	r0, [pc, #8]	; (8000d1c <vTaskCodeBlink1+0x1c>)
 8000d14:	2120      	movs	r1, #32
 8000d16:	f001 fe75 	bl	8002a04 <HAL_GPIO_TogglePin>
 8000d1a:	e7f5      	b.n	8000d08 <vTaskCodeBlink1+0x8>
 8000d1c:	40020000 	.word	0x40020000

08000d20 <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8000d20:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d22:	2001      	movs	r0, #1
 8000d24:	f000 ff5e 	bl	8001be4 <osDelay>
 8000d28:	e7fb      	b.n	8000d22 <StartDefaultTask+0x2>
	...

08000d2c <vOtherFunction>:
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
  }
}

void vOtherFunction( void )
{
 8000d2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
static unsigned char ucParameterToPass;
TaskHandle_t xHandle = NULL;
 8000d2e:	aa06      	add	r2, sp, #24
 8000d30:	2300      	movs	r3, #0
 8000d32:	f842 3d04 	str.w	r3, [r2, #-4]!

	xTaskCreate( vTaskCodeBlink1, "NAME1", STACK_SIZE, &ucParameterToPass, tskIDLE_PRIORITY +1,
 8000d36:	2101      	movs	r1, #1
 8000d38:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
 8000d3c:	9303      	str	r3, [sp, #12]
 8000d3e:	4905      	ldr	r1, [pc, #20]	; (8000d54 <vOtherFunction+0x28>)
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <vOtherFunction+0x2c>)
 8000d42:	4806      	ldr	r0, [pc, #24]	; (8000d5c <vOtherFunction+0x30>)
 8000d44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d48:	f000 f952 	bl	8000ff0 <xTaskGenericCreate>
               &xHandle );

 }
 8000d4c:	b007      	add	sp, #28
 8000d4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d52:	bf00      	nop
 8000d54:	08002c83 	.word	0x08002c83
 8000d58:	20000028 	.word	0x20000028
 8000d5c:	08000d01 	.word	0x08000d01

08000d60 <SystemClock_Config>:


/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d62:	b095      	sub	sp, #84	; 0x54

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d64:	2400      	movs	r4, #0
 8000d66:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <SystemClock_Config+0x94>)
 8000d68:	9401      	str	r4, [sp, #4]
 8000d6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d6c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d70:	641a      	str	r2, [r3, #64]	; 0x40
 8000d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d78:	9301      	str	r3, [sp, #4]
 8000d7a:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d7c:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <SystemClock_Config+0x98>)
 8000d7e:	9402      	str	r4, [sp, #8]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d8a:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d90:	9302      	str	r3, [sp, #8]
 8000d92:	9b02      	ldr	r3, [sp, #8]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d94:	2301      	movs	r3, #1
 8000d96:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000d98:	2310      	movs	r3, #16
 8000d9a:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d9c:	2308      	movs	r3, #8

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d9e:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000da0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000da2:	2704      	movs	r7, #4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000da4:	2364      	movs	r3, #100	; 0x64
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000da6:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000da8:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000daa:	260f      	movs	r6, #15

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dac:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dae:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000db0:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000db2:	9713      	str	r7, [sp, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000db4:	f001 faa8 	bl	8002308 <HAL_RCC_OscConfig>
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3);
 8000db8:	2103      	movs	r1, #3

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3);
 8000dbe:	a803      	add	r0, sp, #12

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dc0:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc2:	9603      	str	r6, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc4:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc6:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc8:	9407      	str	r4, [sp, #28]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3);
 8000dca:	f001 fbf7 	bl	80025bc <HAL_RCC_ClockConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000dce:	f001 fcdd 	bl	800278c <HAL_RCC_GetHCLKFreq>
 8000dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd6:	fbb0 f0f3 	udiv	r0, r0, r3
 8000dda:	f001 fe67 	bl	8002aac <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000dde:	4638      	mov	r0, r7
 8000de0:	f001 fe7a 	bl	8002ad8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	4631      	mov	r1, r6
 8000dea:	4622      	mov	r2, r4
 8000dec:	f001 fe20 	bl	8002a30 <HAL_NVIC_SetPriority>
}
 8000df0:	b015      	add	sp, #84	; 0x54
 8000df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40007000 	.word	0x40007000

08000dfc <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8000dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e00:	b08a      	sub	sp, #40	; 0x28
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e02:	2400      	movs	r4, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e04:	f001 fe74 	bl	8002af0 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000e08:	f7ff ffaa 	bl	8000d60 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0c:	4b51      	ldr	r3, [pc, #324]	; (8000f54 <main+0x158>)
 8000e0e:	9401      	str	r4, [sp, #4]
 8000e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e12:	4851      	ldr	r0, [pc, #324]	; (8000f58 <main+0x15c>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e14:	f042 0204 	orr.w	r2, r2, #4
 8000e18:	631a      	str	r2, [r3, #48]	; 0x30
 8000e1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e1c:	f002 0204 	and.w	r2, r2, #4
 8000e20:	9201      	str	r2, [sp, #4]
 8000e22:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e24:	9402      	str	r4, [sp, #8]
 8000e26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e2c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e30:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000e34:	9202      	str	r2, [sp, #8]
 8000e36:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e38:	9403      	str	r4, [sp, #12]
 8000e3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e3c:	f042 0201 	orr.w	r2, r2, #1
 8000e40:	631a      	str	r2, [r3, #48]	; 0x30
 8000e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e44:	f002 0201 	and.w	r2, r2, #1
 8000e48:	9203      	str	r2, [sp, #12]
 8000e4a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4c:	9404      	str	r4, [sp, #16]
 8000e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e50:	f042 0202 	orr.w	r2, r2, #2
 8000e54:	631a      	str	r2, [r3, #48]	; 0x30
 8000e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	9304      	str	r3, [sp, #16]
 8000e60:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e66:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e68:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e6a:	4b3c      	ldr	r3, [pc, #240]	; (8000f5c <main+0x160>)
 8000e6c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e6e:	2703      	movs	r7, #3

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f001 fcf0 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e74:	f04f 0811 	mov.w	r8, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e78:	4837      	ldr	r0, [pc, #220]	; (8000f58 <main+0x15c>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e7a:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7c:	a905      	add	r1, sp, #20

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7e:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e80:	2520      	movs	r5, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e82:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8a:	f001 fce3 	bl	8002854 <HAL_GPIO_Init>
  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	4834      	ldr	r0, [pc, #208]	; (8000f60 <main+0x164>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e90:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e92:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f001 fcdb 	bl	8002854 <HAL_GPIO_Init>
  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	4831      	ldr	r0, [pc, #196]	; (8000f64 <main+0x168>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ea0:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ea4:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eac:	f001 fcd2 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000eb0:	4829      	ldr	r0, [pc, #164]	; (8000f58 <main+0x15c>)
 8000eb2:	4639      	mov	r1, r7
 8000eb4:	4622      	mov	r2, r4
 8000eb6:	f001 fda1 	bl	80029fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000eba:	4629      	mov	r1, r5
 8000ebc:	4828      	ldr	r0, [pc, #160]	; (8000f60 <main+0x164>)

/* USART2 init function */
void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8000ebe:	4d2a      	ldr	r5, [pc, #168]	; (8000f68 <main+0x16c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ec0:	4622      	mov	r2, r4
 8000ec2:	f001 fd9b 	bl	80029fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ec6:	4631      	mov	r1, r6
 8000ec8:	4826      	ldr	r0, [pc, #152]	; (8000f64 <main+0x168>)
 8000eca:	4622      	mov	r2, r4
 8000ecc:	f001 fd96 	bl	80029fc <HAL_GPIO_WritePin>
/* USART2 init function */
void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8000ed0:	4a26      	ldr	r2, [pc, #152]	; (8000f6c <main+0x170>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed2:	60ac      	str	r4, [r5, #8]
/* USART2 init function */
void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8000ed4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000ed8:	e885 000c 	stmia.w	r5, {r2, r3}
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  HAL_UART_Init(&huart2);
 8000edc:	4628      	mov	r0, r5
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ede:	230c      	movs	r3, #12
 8000ee0:	616b      	str	r3, [r5, #20]
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ee2:	60ec      	str	r4, [r5, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ee4:	612c      	str	r4, [r5, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee6:	61ac      	str	r4, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee8:	61ec      	str	r4, [r5, #28]
  HAL_UART_Init(&huart2);
 8000eea:	f000 ffad 	bl	8001e48 <HAL_UART_Init>
  HAL_NVIC_SetPriority(USART2_IRQn,14,0);
 8000eee:	2026      	movs	r0, #38	; 0x26
 8000ef0:	210e      	movs	r1, #14
 8000ef2:	4622      	mov	r2, r4
 8000ef4:	f001 fd9c 	bl	8002a30 <HAL_NVIC_SetPriority>
  __HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);
 8000ef8:	682b      	ldr	r3, [r5, #0]
  MX_GPIO_Init();
  MX_USART2_UART_Init();

  /* USER CODE BEGIN 2 */

   STB(HIGH);
 8000efa:	481a      	ldr	r0, [pc, #104]	; (8000f64 <main+0x168>)
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  HAL_UART_Init(&huart2);
  HAL_NVIC_SetPriority(USART2_IRQn,14,0);
  __HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);
 8000efc:	68da      	ldr	r2, [r3, #12]
 8000efe:	f042 0220 	orr.w	r2, r2, #32
 8000f02:	60da      	str	r2, [r3, #12]
  MX_GPIO_Init();
  MX_USART2_UART_Init();

  /* USER CODE BEGIN 2 */

   STB(HIGH);
 8000f04:	4631      	mov	r1, r6
 8000f06:	4632      	mov	r2, r6
 8000f08:	f001 fd78 	bl	80029fc <HAL_GPIO_WritePin>
  	DIO(HIGH);
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	4632      	mov	r2, r6
 8000f10:	4811      	ldr	r0, [pc, #68]	; (8000f58 <main+0x15c>)
 8000f12:	f001 fd73 	bl	80029fc <HAL_GPIO_WritePin>
  	CLK(HIGH);
 8000f16:	4632      	mov	r2, r6
 8000f18:	2102      	movs	r1, #2
 8000f1a:	480f      	ldr	r0, [pc, #60]	; (8000f58 <main+0x15c>)
 8000f1c:	f001 fd6e 	bl	80029fc <HAL_GPIO_WritePin>
  	CDELAY;
 8000f20:	4630      	mov	r0, r6
  	writeIntValueToSegments(0x12345678);


  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000f22:	4e13      	ldr	r6, [pc, #76]	; (8000f70 <main+0x174>)
  /* USER CODE BEGIN 2 */

   STB(HIGH);
  	DIO(HIGH);
  	CLK(HIGH);
  	CDELAY;
 8000f24:	f7ff fd44 	bl	80009b0 <udelay>

  	clearSegmentsAndLEDs();
 8000f28:	f7ff fdcc 	bl	8000ac4 <clearSegmentsAndLEDs>
  	writeIntValueToSegments(0x12345678);
 8000f2c:	4811      	ldr	r0, [pc, #68]	; (8000f74 <main+0x178>)
 8000f2e:	f7ff fdfb 	bl	8000b28 <writeIntValueToSegments>


  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000f32:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f34:	ad05      	add	r5, sp, #20
 8000f36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f38:	6833      	ldr	r3, [r6, #0]
 8000f3a:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f3c:	4621      	mov	r1, r4
 8000f3e:	a805      	add	r0, sp, #20
 8000f40:	f000 fe35 	bl	8001bae <osThreadCreate>
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <main+0x17c>)
 8000f46:	6018      	str	r0, [r3, #0]
  vOtherFunction();
 8000f48:	f7ff fef0 	bl	8000d2c <vOtherFunction>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 8000f4c:	f000 fe2a 	bl	8001ba4 <osKernelStart>
 8000f50:	e7fe      	b.n	8000f50 <main+0x154>
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40020800 	.word	0x40020800
 8000f5c:	10120000 	.word	0x10120000
 8000f60:	40020000 	.word	0x40020000
 8000f64:	40020400 	.word	0x40020400
 8000f68:	20003db0 	.word	0x20003db0
 8000f6c:	40004400 	.word	0x40004400
 8000f70:	08002c5c 	.word	0x08002c5c
 8000f74:	12345678 	.word	0x12345678
 8000f78:	20003dac 	.word	0x20003dac

08000f7c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000f7c:	4a06      	ldr	r2, [pc, #24]	; (8000f98 <prvResetNextTaskUnblockTime+0x1c>)
 8000f7e:	6813      	ldr	r3, [r2, #0]
 8000f80:	6819      	ldr	r1, [r3, #0]
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <prvResetNextTaskUnblockTime+0x20>)
 8000f84:	b911      	cbnz	r1, 8000f8c <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8000f86:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8a:	e003      	b.n	8000f94 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000f8c:	6812      	ldr	r2, [r2, #0]
 8000f8e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8000f90:	68d2      	ldr	r2, [r2, #12]
 8000f92:	6852      	ldr	r2, [r2, #4]
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	4770      	bx	lr
 8000f98:	20000030 	.word	0x20000030
 8000f9c:	20000000 	.word	0x20000000

08000fa0 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <prvAddCurrentTaskToDelayedList+0x3c>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 8000fa4:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8000fa6:	6050      	str	r0, [r2, #4]

	if( xTimeToWake < xTickCount )
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	; (8000fe0 <prvAddCurrentTaskToDelayedList+0x40>)
 8000faa:	6812      	ldr	r2, [r2, #0]
 8000fac:	4290      	cmp	r0, r2
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 8000fae:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
 8000fb0:	d207      	bcs.n	8000fc2 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8000fb2:	4a0c      	ldr	r2, [pc, #48]	; (8000fe4 <prvAddCurrentTaskToDelayedList+0x44>)
 8000fb4:	6810      	ldr	r0, [r2, #0]
 8000fb6:	6819      	ldr	r1, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8000fbc:	3104      	adds	r1, #4
 8000fbe:	f000 bdc9 	b.w	8001b54 <vListInsert>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8000fc2:	4a09      	ldr	r2, [pc, #36]	; (8000fe8 <prvAddCurrentTaskToDelayedList+0x48>)
 8000fc4:	6810      	ldr	r0, [r2, #0]
 8000fc6:	6819      	ldr	r1, [r3, #0]
 8000fc8:	3104      	adds	r1, #4
 8000fca:	f000 fdc3 	bl	8001b54 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8000fce:	4b07      	ldr	r3, [pc, #28]	; (8000fec <prvAddCurrentTaskToDelayedList+0x4c>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	4294      	cmp	r4, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 8000fd4:	bf38      	it	cc
 8000fd6:	601c      	strcc	r4, [r3, #0]
 8000fd8:	bd10      	pop	{r4, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000108 	.word	0x20000108
 8000fe0:	20000124 	.word	0x20000124
 8000fe4:	20000128 	.word	0x20000128
 8000fe8:	20000030 	.word	0x20000030
 8000fec:	20000000 	.word	0x20000000

08000ff0 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8000ff0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ff4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8000ff6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8000ff8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8000ffa:	4688      	mov	r8, r1
 8000ffc:	4693      	mov	fp, r2
 8000ffe:	469a      	mov	sl, r3
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
 8001000:	4681      	mov	r9, r0
 8001002:	b940      	cbnz	r0, 8001016 <xTaskGenericCreate+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001008:	f383 8811 	msr	BASEPRI, r3
 800100c:	f3bf 8f6f 	isb	sy
 8001010:	f3bf 8f4f 	dsb	sy
 8001014:	e7fe      	b.n	8001014 <xTaskGenericCreate+0x24>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 8001016:	2d06      	cmp	r5, #6
 8001018:	d908      	bls.n	800102c <xTaskGenericCreate+0x3c>
 800101a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800101e:	f383 8811 	msr	BASEPRI, r3
 8001022:	f3bf 8f6f 	isb	sy
 8001026:	f3bf 8f4f 	dsb	sy
 800102a:	e7fe      	b.n	800102a <xTaskGenericCreate+0x3a>
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800102c:	b936      	cbnz	r6, 800103c <xTaskGenericCreate+0x4c>
 800102e:	0090      	lsls	r0, r2, #2
 8001030:	f000 fb52 	bl	80016d8 <pvPortMalloc>

		if( pxStack != NULL )
 8001034:	4606      	mov	r6, r0
 8001036:	2800      	cmp	r0, #0
 8001038:	f000 80a1 	beq.w	800117e <xTaskGenericCreate+0x18e>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800103c:	205c      	movs	r0, #92	; 0x5c
 800103e:	f000 fb4b 	bl	80016d8 <pvPortMalloc>

			if( pxNewTCB != NULL )
 8001042:	4604      	mov	r4, r0
 8001044:	b178      	cbz	r0, 8001066 <xTaskGenericCreate+0x76>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8001046:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );

			if( pxNewTCB != NULL )
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 800104a:	6306      	str	r6, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800104c:	465a      	mov	r2, fp
 800104e:	4630      	mov	r0, r6
 8001050:	21a5      	movs	r1, #165	; 0xa5
 8001052:	f001 fdef 	bl	8002c34 <memset>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 8001056:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001058:	f1ab 0b04 	sub.w	fp, fp, #4
 800105c:	449b      	add	fp, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800105e:	f02b 0b07 	bic.w	fp, fp, #7
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001062:	2600      	movs	r6, #0
 8001064:	e006      	b.n	8001074 <xTaskGenericCreate+0x84>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
 8001066:	4630      	mov	r0, r6
 8001068:	f000 fbcc 	bl	8001804 <vPortFree>
 800106c:	e087      	b.n	800117e <xTaskGenericCreate+0x18e>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800106e:	3601      	adds	r6, #1
 8001070:	2e10      	cmp	r6, #16
 8001072:	d008      	beq.n	8001086 <xTaskGenericCreate+0x96>
 8001074:	19a3      	adds	r3, r4, r6
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8001076:	f818 2006 	ldrb.w	r2, [r8, r6]
 800107a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800107e:	f818 3006 	ldrb.w	r3, [r8, r6]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1f3      	bne.n	800106e <xTaskGenericCreate+0x7e>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001086:	2600      	movs	r6, #0
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001088:	f104 0804 	add.w	r8, r4, #4
 800108c:	4640      	mov	r0, r8
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800108e:	f884 6043 	strb.w	r6, [r4, #67]	; 0x43
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 8001092:	62e5      	str	r5, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8001094:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 8001096:	6526      	str	r6, [r4, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001098:	f000 fd4d 	bl	8001b36 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800109c:	f104 0018 	add.w	r0, r4, #24
 80010a0:	f000 fd49 	bl	8001b36 <vListInitialiseItem>
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80010a4:	f1c5 0307 	rsb	r3, r5, #7
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
 80010a8:	6566      	str	r6, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80010aa:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80010ac:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80010ae:	6264      	str	r4, [r4, #36]	; 0x24
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
		pxTCB->eNotifyState = eNotWaitingNotification;
 80010b0:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80010b4:	4658      	mov	r0, fp
 80010b6:	4649      	mov	r1, r9
 80010b8:	4652      	mov	r2, sl
 80010ba:	f000 fc0d 	bl	80018d8 <pxPortInitialiseStack>
 80010be:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 80010c0:	b107      	cbz	r7, 80010c4 <xTaskGenericCreate+0xd4>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80010c2:	603c      	str	r4, [r7, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 80010c4:	f000 fc2a 	bl	800191c <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 80010c8:	4b2f      	ldr	r3, [pc, #188]	; (8001188 <xTaskGenericCreate+0x198>)
			if( pxCurrentTCB == NULL )
 80010ca:	4e30      	ldr	r6, [pc, #192]	; (800118c <xTaskGenericCreate+0x19c>)

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 80011b8 <xTaskGenericCreate+0x1c8>
 80010d2:	3201      	adds	r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 80010d6:	6837      	ldr	r7, [r6, #0]
 80010d8:	bb17      	cbnz	r7, 8001120 <xTaskGenericCreate+0x130>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 80010da:	6034      	str	r4, [r6, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d126      	bne.n	8001130 <xTaskGenericCreate+0x140>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80010e2:	eb09 0007 	add.w	r0, r9, r7
 80010e6:	3714      	adds	r7, #20
 80010e8:	f000 fd1a 	bl	8001b20 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80010ec:	2f8c      	cmp	r7, #140	; 0x8c
 80010ee:	d1f8      	bne.n	80010e2 <xTaskGenericCreate+0xf2>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80010f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80011bc <xTaskGenericCreate+0x1cc>
	vListInitialise( &xDelayedTaskList2 );
 80010f4:	4f26      	ldr	r7, [pc, #152]	; (8001190 <xTaskGenericCreate+0x1a0>)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80010f6:	4650      	mov	r0, sl
 80010f8:	f000 fd12 	bl	8001b20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80010fc:	4638      	mov	r0, r7
 80010fe:	f000 fd0f 	bl	8001b20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001102:	4824      	ldr	r0, [pc, #144]	; (8001194 <xTaskGenericCreate+0x1a4>)
 8001104:	f000 fd0c 	bl	8001b20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001108:	4823      	ldr	r0, [pc, #140]	; (8001198 <xTaskGenericCreate+0x1a8>)
 800110a:	f000 fd09 	bl	8001b20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800110e:	4823      	ldr	r0, [pc, #140]	; (800119c <xTaskGenericCreate+0x1ac>)
 8001110:	f000 fd06 	bl	8001b20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001114:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <xTaskGenericCreate+0x1b0>)
 8001116:	f8c3 a000 	str.w	sl, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800111a:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <xTaskGenericCreate+0x1b4>)
 800111c:	601f      	str	r7, [r3, #0]
 800111e:	e007      	b.n	8001130 <xTaskGenericCreate+0x140>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8001120:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <xTaskGenericCreate+0x1b8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	b923      	cbnz	r3, 8001130 <xTaskGenericCreate+0x140>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8001126:	6833      	ldr	r3, [r6, #0]
 8001128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112a:	42ab      	cmp	r3, r5
					{
						pxCurrentTCB = pxNewTCB;
 800112c:	bf98      	it	ls
 800112e:	6034      	strls	r4, [r6, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8001130:	4a1e      	ldr	r2, [pc, #120]	; (80011ac <xTaskGenericCreate+0x1bc>)
 8001132:	6813      	ldr	r3, [r2, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8001138:	4a1d      	ldr	r2, [pc, #116]	; (80011b0 <xTaskGenericCreate+0x1c0>)
			uxTaskNumber++;

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800113a:	6463      	str	r3, [r4, #68]	; 0x44
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 800113c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800113e:	6811      	ldr	r1, [r2, #0]
 8001140:	2401      	movs	r4, #1
 8001142:	fa04 f003 	lsl.w	r0, r4, r3
 8001146:	4301      	orrs	r1, r0
 8001148:	2014      	movs	r0, #20
 800114a:	6011      	str	r1, [r2, #0]
 800114c:	fb00 9003 	mla	r0, r0, r3, r9
 8001150:	4641      	mov	r1, r8
 8001152:	f000 fcf3 	bl	8001b3c <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8001156:	f000 fc03 	bl	8001960 <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 800115a:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <xTaskGenericCreate+0x1b8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	b15b      	cbz	r3, 8001178 <xTaskGenericCreate+0x188>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8001160:	6833      	ldr	r3, [r6, #0]
 8001162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001164:	42ab      	cmp	r3, r5
 8001166:	d207      	bcs.n	8001178 <xTaskGenericCreate+0x188>
			{
				taskYIELD_IF_USING_PREEMPTION();
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <xTaskGenericCreate+0x1c4>)
 800116a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	f3bf 8f4f 	dsb	sy
 8001174:	f3bf 8f6f 	isb	sy
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
 8001178:	2001      	movs	r0, #1
 800117a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800117e:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 8001182:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001186:	bf00      	nop
 8001188:	20000130 	.word	0x20000130
 800118c:	20000108 	.word	0x20000108
 8001190:	20000050 	.word	0x20000050
 8001194:	2000010c 	.word	0x2000010c
 8001198:	200000f4 	.word	0x200000f4
 800119c:	20000134 	.word	0x20000134
 80011a0:	20000030 	.word	0x20000030
 80011a4:	20000128 	.word	0x20000128
 80011a8:	20000034 	.word	0x20000034
 80011ac:	2000012c 	.word	0x2000012c
 80011b0:	20000148 	.word	0x20000148
 80011b4:	e000ed04 	.word	0xe000ed04
 80011b8:	20000068 	.word	0x20000068
 80011bc:	2000003c 	.word	0x2000003c

080011c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80011c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 80011c2:	2300      	movs	r3, #0
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	9301      	str	r3, [sp, #4]
 80011c8:	9302      	str	r3, [sp, #8]
 80011ca:	9303      	str	r3, [sp, #12]
 80011cc:	4813      	ldr	r0, [pc, #76]	; (800121c <vTaskStartScheduler+0x5c>)
 80011ce:	4914      	ldr	r1, [pc, #80]	; (8001220 <vTaskStartScheduler+0x60>)
 80011d0:	2280      	movs	r2, #128	; 0x80
 80011d2:	f7ff ff0d 	bl	8000ff0 <xTaskGenericCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80011d6:	2801      	cmp	r0, #1
 80011d8:	d112      	bne.n	8001200 <vTaskStartScheduler+0x40>
 80011da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011de:	f383 8811 	msr	BASEPRI, r3
 80011e2:	f3bf 8f6f 	isb	sy
 80011e6:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <vTaskStartScheduler+0x64>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80011f0:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <vTaskStartScheduler+0x68>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 80011f6:	b005      	add	sp, #20
 80011f8:	f85d eb04 	ldr.w	lr, [sp], #4
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80011fc:	f000 bc1e 	b.w	8001a3c <xPortStartScheduler>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 8001200:	b940      	cbnz	r0, 8001214 <vTaskStartScheduler+0x54>
 8001202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001206:	f383 8811 	msr	BASEPRI, r3
 800120a:	f3bf 8f6f 	isb	sy
 800120e:	f3bf 8f4f 	dsb	sy
 8001212:	e7fe      	b.n	8001212 <vTaskStartScheduler+0x52>
	}
}
 8001214:	b005      	add	sp, #20
 8001216:	f85d fb04 	ldr.w	pc, [sp], #4
 800121a:	bf00      	nop
 800121c:	08001591 	.word	0x08001591
 8001220:	08002c95 	.word	0x08002c95
 8001224:	20000034 	.word	0x20000034
 8001228:	20000124 	.word	0x20000124

0800122c <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800122c:	4b02      	ldr	r3, [pc, #8]	; (8001238 <vTaskSuspendAll+0xc>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	3201      	adds	r2, #1
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000120 	.word	0x20000120

0800123c <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800123c:	4b01      	ldr	r3, [pc, #4]	; (8001244 <xTaskGetTickCount+0x8>)
 800123e:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20000124 	.word	0x20000124

08001248 <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001248:	4b3a      	ldr	r3, [pc, #232]	; (8001334 <xTaskIncrementTick+0xec>)
 800124a:	681b      	ldr	r3, [r3, #0]

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800124c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001250:	2b00      	cmp	r3, #0
 8001252:	d13e      	bne.n	80012d2 <xTaskIncrementTick+0x8a>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8001254:	4b38      	ldr	r3, [pc, #224]	; (8001338 <xTaskIncrementTick+0xf0>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	3201      	adds	r2, #1
 800125a:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800125c:	681e      	ldr	r6, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
 800125e:	b9be      	cbnz	r6, 8001290 <xTaskIncrementTick+0x48>
			{
				taskSWITCH_DELAYED_LISTS();
 8001260:	4b36      	ldr	r3, [pc, #216]	; (800133c <xTaskIncrementTick+0xf4>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	6812      	ldr	r2, [r2, #0]
 8001266:	b142      	cbz	r2, 800127a <xTaskIncrementTick+0x32>
 8001268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800126c:	f383 8811 	msr	BASEPRI, r3
 8001270:	f3bf 8f6f 	isb	sy
 8001274:	f3bf 8f4f 	dsb	sy
 8001278:	e7fe      	b.n	8001278 <xTaskIncrementTick+0x30>
 800127a:	4a31      	ldr	r2, [pc, #196]	; (8001340 <xTaskIncrementTick+0xf8>)
 800127c:	6819      	ldr	r1, [r3, #0]
 800127e:	6810      	ldr	r0, [r2, #0]
 8001280:	6018      	str	r0, [r3, #0]
 8001282:	4b30      	ldr	r3, [pc, #192]	; (8001344 <xTaskIncrementTick+0xfc>)
 8001284:	6011      	str	r1, [r2, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	3201      	adds	r2, #1
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	f7ff fe76 	bl	8000f7c <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8001290:	4f2d      	ldr	r7, [pc, #180]	; (8001348 <xTaskIncrementTick+0x100>)
 8001292:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8001358 <xTaskIncrementTick+0x110>
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 800135c <xTaskIncrementTick+0x114>
 800129c:	429e      	cmp	r6, r3
 800129e:	f04f 0400 	mov.w	r4, #0
 80012a2:	d30b      	bcc.n	80012bc <xTaskIncrementTick+0x74>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80012a4:	4b25      	ldr	r3, [pc, #148]	; (800133c <xTaskIncrementTick+0xf4>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	6812      	ldr	r2, [r2, #0]
 80012aa:	2a00      	cmp	r2, #0
 80012ac:	d037      	beq.n	800131e <xTaskIncrementTick+0xd6>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 80012b4:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
 80012b6:	429e      	cmp	r6, r3
 80012b8:	d211      	bcs.n	80012de <xTaskIncrementTick+0x96>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 80012ba:	603b      	str	r3, [r7, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80012bc:	f8d9 3000 	ldr.w	r3, [r9]
 80012c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c2:	2214      	movs	r2, #20
 80012c4:	4353      	muls	r3, r2
 80012c6:	f858 3003 	ldr.w	r3, [r8, r3]
			{
				xSwitchRequired = pdTRUE;
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	bf28      	it	cs
 80012ce:	2401      	movcs	r4, #1
 80012d0:	e028      	b.n	8001324 <xTaskIncrementTick+0xdc>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80012d2:	4b1e      	ldr	r3, [pc, #120]	; (800134c <xTaskIncrementTick+0x104>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	3201      	adds	r2, #1
 80012d8:	601a      	str	r2, [r3, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80012da:	2400      	movs	r4, #0
 80012dc:	e022      	b.n	8001324 <xTaskIncrementTick+0xdc>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80012de:	f105 0a04 	add.w	sl, r5, #4
 80012e2:	4650      	mov	r0, sl
 80012e4:	f000 fc4e 	bl	8001b84 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80012e8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80012ea:	b11b      	cbz	r3, 80012f4 <xTaskIncrementTick+0xac>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80012ec:	f105 0018 	add.w	r0, r5, #24
 80012f0:	f000 fc48 	bl	8001b84 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 80012f4:	4a16      	ldr	r2, [pc, #88]	; (8001350 <xTaskIncrementTick+0x108>)
 80012f6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80012f8:	6810      	ldr	r0, [r2, #0]
 80012fa:	2101      	movs	r1, #1
 80012fc:	4099      	lsls	r1, r3
 80012fe:	4301      	orrs	r1, r0
 8001300:	2014      	movs	r0, #20
 8001302:	6011      	str	r1, [r2, #0]
 8001304:	fb00 8003 	mla	r0, r0, r3, r8
 8001308:	4651      	mov	r1, sl
 800130a:	f000 fc17 	bl	8001b3c <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800130e:	f8d9 3000 	ldr.w	r3, [r9]
 8001312:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
 8001316:	429a      	cmp	r2, r3
 8001318:	bf28      	it	cs
 800131a:	2401      	movcs	r4, #1
 800131c:	e7c2      	b.n	80012a4 <xTaskIncrementTick+0x5c>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	e7ca      	b.n	80012ba <xTaskIncrementTick+0x72>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <xTaskIncrementTick+0x10c>)
 8001326:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
 8001328:	2b00      	cmp	r3, #0
 800132a:	bf18      	it	ne
 800132c:	2401      	movne	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 800132e:	4620      	mov	r0, r4
 8001330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001334:	20000120 	.word	0x20000120
 8001338:	20000124 	.word	0x20000124
 800133c:	20000030 	.word	0x20000030
 8001340:	20000128 	.word	0x20000128
 8001344:	2000002c 	.word	0x2000002c
 8001348:	20000000 	.word	0x20000000
 800134c:	20000064 	.word	0x20000064
 8001350:	20000148 	.word	0x20000148
 8001354:	2000014c 	.word	0x2000014c
 8001358:	20000068 	.word	0x20000068
 800135c:	20000108 	.word	0x20000108

08001360 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001360:	b570      	push	{r4, r5, r6, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001362:	4c30      	ldr	r4, [pc, #192]	; (8001424 <xTaskResumeAll+0xc4>)
 8001364:	6823      	ldr	r3, [r4, #0]
 8001366:	b943      	cbnz	r3, 800137a <xTaskResumeAll+0x1a>
 8001368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800136c:	f383 8811 	msr	BASEPRI, r3
 8001370:	f3bf 8f6f 	isb	sy
 8001374:	f3bf 8f4f 	dsb	sy
 8001378:	e7fe      	b.n	8001378 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800137a:	f000 facf 	bl	800191c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800137e:	6823      	ldr	r3, [r4, #0]
 8001380:	3b01      	subs	r3, #1
 8001382:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001384:	6823      	ldr	r3, [r4, #0]
 8001386:	b10b      	cbz	r3, 800138c <xTaskResumeAll+0x2c>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 8001388:	2400      	movs	r4, #0
 800138a:	e046      	b.n	800141a <xTaskResumeAll+0xba>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800138c:	4b26      	ldr	r3, [pc, #152]	; (8001428 <xTaskResumeAll+0xc8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0f9      	beq.n	8001388 <xTaskResumeAll+0x28>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001394:	4b25      	ldr	r3, [pc, #148]	; (800142c <xTaskResumeAll+0xcc>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	b30a      	cbz	r2, 80013de <xTaskResumeAll+0x7e>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800139e:	1d26      	adds	r6, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80013a0:	f104 0018 	add.w	r0, r4, #24
 80013a4:	f000 fbee 	bl	8001b84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80013a8:	4630      	mov	r0, r6
 80013aa:	f000 fbeb 	bl	8001b84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80013ae:	4a20      	ldr	r2, [pc, #128]	; (8001430 <xTaskResumeAll+0xd0>)
 80013b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80013b2:	6811      	ldr	r1, [r2, #0]
 80013b4:	2501      	movs	r5, #1
 80013b6:	fa05 f003 	lsl.w	r0, r5, r3
 80013ba:	4301      	orrs	r1, r0
 80013bc:	6011      	str	r1, [r2, #0]
 80013be:	4a1d      	ldr	r2, [pc, #116]	; (8001434 <xTaskResumeAll+0xd4>)
 80013c0:	2014      	movs	r0, #20
 80013c2:	fb00 2003 	mla	r0, r0, r3, r2
 80013c6:	4631      	mov	r1, r6
 80013c8:	f000 fbb8 	bl	8001b3c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80013cc:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <xTaskResumeAll+0xd8>)
 80013ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d4:	429a      	cmp	r2, r3
					{
						xYieldPending = pdTRUE;
 80013d6:	bf24      	itt	cs
 80013d8:	4b18      	ldrcs	r3, [pc, #96]	; (800143c <xTaskResumeAll+0xdc>)
 80013da:	601d      	strcs	r5, [r3, #0]
 80013dc:	e7da      	b.n	8001394 <xTaskResumeAll+0x34>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 80013de:	4c18      	ldr	r4, [pc, #96]	; (8001440 <xTaskResumeAll+0xe0>)
 80013e0:	6823      	ldr	r3, [r4, #0]
 80013e2:	b9b3      	cbnz	r3, 8001412 <xTaskResumeAll+0xb2>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 80013e4:	4b15      	ldr	r3, [pc, #84]	; (800143c <xTaskResumeAll+0xdc>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d1cd      	bne.n	8001388 <xTaskResumeAll+0x28>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80013ec:	4b15      	ldr	r3, [pc, #84]	; (8001444 <xTaskResumeAll+0xe4>)
 80013ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	f3bf 8f4f 	dsb	sy
 80013f8:	f3bf 8f6f 	isb	sy

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80013fc:	2401      	movs	r4, #1
 80013fe:	e00c      	b.n	800141a <xTaskResumeAll+0xba>
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
 8001400:	f7ff ff22 	bl	8001248 <xTaskIncrementTick>
 8001404:	b110      	cbz	r0, 800140c <xTaskResumeAll+0xac>
						{
							xYieldPending = pdTRUE;
 8001406:	4b0d      	ldr	r3, [pc, #52]	; (800143c <xTaskResumeAll+0xdc>)
 8001408:	2201      	movs	r2, #1
 800140a:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 800140c:	6823      	ldr	r3, [r4, #0]
 800140e:	3b01      	subs	r3, #1
 8001410:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8001412:	6823      	ldr	r3, [r4, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1f3      	bne.n	8001400 <xTaskResumeAll+0xa0>
 8001418:	e7e4      	b.n	80013e4 <xTaskResumeAll+0x84>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800141a:	f000 faa1 	bl	8001960 <vPortExitCritical>

	return xAlreadyYielded;
}
 800141e:	4620      	mov	r0, r4
 8001420:	bd70      	pop	{r4, r5, r6, pc}
 8001422:	bf00      	nop
 8001424:	20000120 	.word	0x20000120
 8001428:	20000130 	.word	0x20000130
 800142c:	2000010c 	.word	0x2000010c
 8001430:	20000148 	.word	0x20000148
 8001434:	20000068 	.word	0x20000068
 8001438:	20000108 	.word	0x20000108
 800143c:	2000014c 	.word	0x2000014c
 8001440:	20000064 	.word	0x20000064
 8001444:	e000ed04 	.word	0xe000ed04

08001448 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8001448:	b570      	push	{r4, r5, r6, lr}
 800144a:	460c      	mov	r4, r1
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
 800144c:	4605      	mov	r5, r0
 800144e:	b940      	cbnz	r0, 8001462 <vTaskDelayUntil+0x1a>
 8001450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001454:	f383 8811 	msr	BASEPRI, r3
 8001458:	f3bf 8f6f 	isb	sy
 800145c:	f3bf 8f4f 	dsb	sy
 8001460:	e7fe      	b.n	8001460 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 8001462:	b941      	cbnz	r1, 8001476 <vTaskDelayUntil+0x2e>
 8001464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001468:	f383 8811 	msr	BASEPRI, r3
 800146c:	f3bf 8f6f 	isb	sy
 8001470:	f3bf 8f4f 	dsb	sy
 8001474:	e7fe      	b.n	8001474 <vTaskDelayUntil+0x2c>
		configASSERT( uxSchedulerSuspended == 0 );
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <vTaskDelayUntil+0xb4>)
 8001478:	681e      	ldr	r6, [r3, #0]
 800147a:	b146      	cbz	r6, 800148e <vTaskDelayUntil+0x46>
 800147c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001480:	f383 8811 	msr	BASEPRI, r3
 8001484:	f3bf 8f6f 	isb	sy
 8001488:	f3bf 8f4f 	dsb	sy
 800148c:	e7fe      	b.n	800148c <vTaskDelayUntil+0x44>

		vTaskSuspendAll();
 800148e:	f7ff fecd 	bl	800122c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8001492:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <vTaskDelayUntil+0xb8>)

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8001494:	682a      	ldr	r2, [r5, #0]

		vTaskSuspendAll();
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8001496:	6818      	ldr	r0, [r3, #0]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;

			if( xConstTickCount < *pxPreviousWakeTime )
 8001498:	4290      	cmp	r0, r2
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800149a:	4414      	add	r4, r2

			if( xConstTickCount < *pxPreviousWakeTime )
 800149c:	d202      	bcs.n	80014a4 <vTaskDelayUntil+0x5c>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800149e:	4294      	cmp	r4, r2
 80014a0:	d207      	bcs.n	80014b2 <vTaskDelayUntil+0x6a>
 80014a2:	e001      	b.n	80014a8 <vTaskDelayUntil+0x60>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80014a4:	4294      	cmp	r4, r2
 80014a6:	d306      	bcc.n	80014b6 <vTaskDelayUntil+0x6e>
 80014a8:	4284      	cmp	r4, r0
 80014aa:	bf94      	ite	ls
 80014ac:	2300      	movls	r3, #0
 80014ae:	2301      	movhi	r3, #1
 80014b0:	e002      	b.n	80014b8 <vTaskDelayUntil+0x70>
#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80014b2:	4633      	mov	r3, r6
 80014b4:	e000      	b.n	80014b8 <vTaskDelayUntil+0x70>
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
				{
					xShouldDelay = pdTRUE;
 80014b6:	2301      	movs	r3, #1
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80014b8:	602c      	str	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
 80014ba:	b193      	cbz	r3, 80014e2 <vTaskDelayUntil+0x9a>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80014bc:	4d11      	ldr	r5, [pc, #68]	; (8001504 <vTaskDelayUntil+0xbc>)
 80014be:	6828      	ldr	r0, [r5, #0]
 80014c0:	3004      	adds	r0, #4
 80014c2:	f000 fb5f 	bl	8001b84 <uxListRemove>
 80014c6:	b948      	cbnz	r0, 80014dc <vTaskDelayUntil+0x94>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <vTaskDelayUntil+0xc0>)
 80014ca:	6819      	ldr	r1, [r3, #0]
 80014cc:	682a      	ldr	r2, [r5, #0]
 80014ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80014d0:	2001      	movs	r0, #1
 80014d2:	fa00 f202 	lsl.w	r2, r0, r2
 80014d6:	ea21 0202 	bic.w	r2, r1, r2
 80014da:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
 80014dc:	4620      	mov	r0, r4
 80014de:	f7ff fd5f 	bl	8000fa0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80014e2:	f7ff ff3d 	bl	8001360 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80014e6:	b938      	cbnz	r0, 80014f8 <vTaskDelayUntil+0xb0>
		{
			portYIELD_WITHIN_API();
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <vTaskDelayUntil+0xc4>)
 80014ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	f3bf 8f4f 	dsb	sy
 80014f4:	f3bf 8f6f 	isb	sy
 80014f8:	bd70      	pop	{r4, r5, r6, pc}
 80014fa:	bf00      	nop
 80014fc:	20000120 	.word	0x20000120
 8001500:	20000124 	.word	0x20000124
 8001504:	20000108 	.word	0x20000108
 8001508:	20000148 	.word	0x20000148
 800150c:	e000ed04 	.word	0xe000ed04

08001510 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001510:	b538      	push	{r3, r4, r5, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001512:	4604      	mov	r4, r0
 8001514:	b940      	cbnz	r0, 8001528 <vTaskDelay+0x18>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 8001516:	4b19      	ldr	r3, [pc, #100]	; (800157c <vTaskDelay+0x6c>)
 8001518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	f3bf 8f4f 	dsb	sy
 8001522:	f3bf 8f6f 	isb	sy
 8001526:	bd38      	pop	{r3, r4, r5, pc}


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001528:	4b15      	ldr	r3, [pc, #84]	; (8001580 <vTaskDelay+0x70>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	b143      	cbz	r3, 8001540 <vTaskDelay+0x30>
 800152e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001532:	f383 8811 	msr	BASEPRI, r3
 8001536:	f3bf 8f6f 	isb	sy
 800153a:	f3bf 8f4f 	dsb	sy
 800153e:	e7fe      	b.n	800153e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001540:	f7ff fe74 	bl	800122c <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <vTaskDelay+0x74>)
 8001546:	681d      	ldr	r5, [r3, #0]
 8001548:	4425      	add	r5, r4

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800154a:	4c0f      	ldr	r4, [pc, #60]	; (8001588 <vTaskDelay+0x78>)
 800154c:	6820      	ldr	r0, [r4, #0]
 800154e:	3004      	adds	r0, #4
 8001550:	f000 fb18 	bl	8001b84 <uxListRemove>
 8001554:	b948      	cbnz	r0, 800156a <vTaskDelay+0x5a>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <vTaskDelay+0x7c>)
 8001558:	6819      	ldr	r1, [r3, #0]
 800155a:	6822      	ldr	r2, [r4, #0]
 800155c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800155e:	2001      	movs	r0, #1
 8001560:	fa00 f202 	lsl.w	r2, r0, r2
 8001564:	ea21 0202 	bic.w	r2, r1, r2
 8001568:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800156a:	4628      	mov	r0, r5
 800156c:	f7ff fd18 	bl	8000fa0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001570:	f7ff fef6 	bl	8001360 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001574:	2800      	cmp	r0, #0
 8001576:	d0ce      	beq.n	8001516 <vTaskDelay+0x6>
 8001578:	bd38      	pop	{r3, r4, r5, pc}
 800157a:	bf00      	nop
 800157c:	e000ed04 	.word	0xe000ed04
 8001580:	20000120 	.word	0x20000120
 8001584:	20000124 	.word	0x20000124
 8001588:	20000108 	.word	0x20000108
 800158c:	20000148 	.word	0x20000148

08001590 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001590:	b508      	push	{r3, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8001592:	4d17      	ldr	r5, [pc, #92]	; (80015f0 <prvIdleTask+0x60>)
 8001594:	682b      	ldr	r3, [r5, #0]
 8001596:	b1f3      	cbz	r3, 80015d6 <prvIdleTask+0x46>
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001598:	4c16      	ldr	r4, [pc, #88]	; (80015f4 <prvIdleTask+0x64>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
 800159a:	f7ff fe47 	bl	800122c <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800159e:	6826      	ldr	r6, [r4, #0]
			}
			( void ) xTaskResumeAll();
 80015a0:	f7ff fede 	bl	8001360 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80015a4:	2e00      	cmp	r6, #0
 80015a6:	d0f4      	beq.n	8001592 <prvIdleTask+0x2>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80015a8:	f000 f9b8 	bl	800191c <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80015ac:	68e3      	ldr	r3, [r4, #12]
 80015ae:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80015b0:	1d20      	adds	r0, r4, #4
 80015b2:	f000 fae7 	bl	8001b84 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <prvIdleTask+0x68>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	3a01      	subs	r2, #1
 80015bc:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 80015be:	682b      	ldr	r3, [r5, #0]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
 80015c4:	f000 f9cc 	bl	8001960 <vPortExitCritical>
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
 80015c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80015ca:	f000 f91b 	bl	8001804 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
 80015ce:	4620      	mov	r0, r4
 80015d0:	f000 f918 	bl	8001804 <vPortFree>
 80015d4:	e7dd      	b.n	8001592 <prvIdleTask+0x2>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <prvIdleTask+0x6c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d9d9      	bls.n	8001592 <prvIdleTask+0x2>
			{
				taskYIELD();
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <prvIdleTask+0x70>)
 80015e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	f3bf 8f4f 	dsb	sy
 80015ea:	f3bf 8f6f 	isb	sy
 80015ee:	e7d0      	b.n	8001592 <prvIdleTask+0x2>
 80015f0:	20000038 	.word	0x20000038
 80015f4:	200000f4 	.word	0x200000f4
 80015f8:	20000130 	.word	0x20000130
 80015fc:	20000068 	.word	0x20000068
 8001600:	e000ed04 	.word	0xe000ed04

08001604 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <vTaskSwitchContext+0x58>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b15      	ldr	r3, [pc, #84]	; (8001660 <vTaskSwitchContext+0x5c>)
 800160a:	b10a      	cbz	r2, 8001610 <vTaskSwitchContext+0xc>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800160c:	2201      	movs	r2, #1
 800160e:	e022      	b.n	8001656 <vTaskSwitchContext+0x52>
	}
	else
	{
		xYieldPending = pdFALSE;
 8001610:	601a      	str	r2, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <vTaskSwitchContext+0x60>)
 8001614:	681a      	ldr	r2, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001616:	fab2 f282 	clz	r2, r2
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	2314      	movs	r3, #20
 800161e:	f1c2 021f 	rsb	r2, r2, #31
 8001622:	4911      	ldr	r1, [pc, #68]	; (8001668 <vTaskSwitchContext+0x64>)
 8001624:	435a      	muls	r2, r3
 8001626:	188b      	adds	r3, r1, r2
 8001628:	588a      	ldr	r2, [r1, r2]
 800162a:	b942      	cbnz	r2, 800163e <vTaskSwitchContext+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800162c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001630:	f383 8811 	msr	BASEPRI, r3
 8001634:	f3bf 8f6f 	isb	sy
 8001638:	f3bf 8f4f 	dsb	sy
 800163c:	e7fe      	b.n	800163c <vTaskSwitchContext+0x38>
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	6852      	ldr	r2, [r2, #4]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	f103 0108 	add.w	r1, r3, #8
 8001648:	428a      	cmp	r2, r1
 800164a:	bf04      	itt	eq
 800164c:	6852      	ldreq	r2, [r2, #4]
 800164e:	605a      	streq	r2, [r3, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <vTaskSwitchContext+0x68>)
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000120 	.word	0x20000120
 8001660:	2000014c 	.word	0x2000014c
 8001664:	20000148 	.word	0x20000148
 8001668:	20000068 	.word	0x20000068
 800166c:	20000108 	.word	0x20000108

08001670 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <xTaskGetSchedulerState+0x18>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	b133      	cbz	r3, 8001684 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001676:	4b05      	ldr	r3, [pc, #20]	; (800168c <xTaskGetSchedulerState+0x1c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
 800167c:	bf14      	ite	ne
 800167e:	2000      	movne	r0, #0
 8001680:	2002      	moveq	r0, #2
 8001682:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001684:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 8001686:	4770      	bx	lr
 8001688:	20000034 	.word	0x20000034
 800168c:	20000120 	.word	0x20000120

08001690 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001690:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001692:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <prvInsertBlockIntoFreeList+0x40>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	4282      	cmp	r2, r0
 8001698:	d201      	bcs.n	800169e <prvInsertBlockIntoFreeList+0xe>
 800169a:	4613      	mov	r3, r2
 800169c:	e7fa      	b.n	8001694 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800169e:	6859      	ldr	r1, [r3, #4]
 80016a0:	185c      	adds	r4, r3, r1
 80016a2:	4284      	cmp	r4, r0
 80016a4:	d103      	bne.n	80016ae <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80016a6:	6840      	ldr	r0, [r0, #4]
 80016a8:	4401      	add	r1, r0
 80016aa:	6059      	str	r1, [r3, #4]
 80016ac:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80016ae:	6841      	ldr	r1, [r0, #4]
 80016b0:	1844      	adds	r4, r0, r1
 80016b2:	4294      	cmp	r4, r2
 80016b4:	d107      	bne.n	80016c6 <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80016b6:	4c07      	ldr	r4, [pc, #28]	; (80016d4 <prvInsertBlockIntoFreeList+0x44>)
 80016b8:	6824      	ldr	r4, [r4, #0]
 80016ba:	42a2      	cmp	r2, r4
 80016bc:	d003      	beq.n	80016c6 <prvInsertBlockIntoFreeList+0x36>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80016be:	6854      	ldr	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80016c0:	6812      	ldr	r2, [r2, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80016c2:	4421      	add	r1, r4
 80016c4:	6041      	str	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80016c6:	4283      	cmp	r3, r0
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80016c8:	6002      	str	r2, [r0, #0]
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80016ca:	bf18      	it	ne
 80016cc:	6018      	strne	r0, [r3, #0]
 80016ce:	bd10      	pop	{r4, pc}
 80016d0:	20000158 	.word	0x20000158
 80016d4:	20000154 	.word	0x20000154

080016d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80016d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016dc:	4605      	mov	r5, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 80016de:	f7ff fda5 	bl	800122c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80016e2:	4b42      	ldr	r3, [pc, #264]	; (80017ec <pvPortMalloc+0x114>)
 80016e4:	4842      	ldr	r0, [pc, #264]	; (80017f0 <pvPortMalloc+0x118>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	469e      	mov	lr, r3
 80016ea:	bb12      	cbnz	r2, 8001732 <pvPortMalloc+0x5a>
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
 80016ec:	4a41      	ldr	r2, [pc, #260]	; (80017f4 <pvPortMalloc+0x11c>)

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80016ee:	0754      	lsls	r4, r2, #29
 80016f0:	d007      	beq.n	8001702 <pvPortMalloc+0x2a>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 80016f2:	1dd3      	adds	r3, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80016f4:	f023 0307 	bic.w	r3, r3, #7
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 80016f8:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80016fc:	1ad1      	subs	r1, r2, r3
	ulAddress = ( uint32_t ) ucHeap;

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80016fe:	461a      	mov	r2, r3
 8001700:	e001      	b.n	8001706 <pvPortMalloc+0x2e>
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001702:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001706:	4411      	add	r1, r2
	ulAddress -= xHeapStructSize;
 8001708:	3908      	subs	r1, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800170a:	f021 0107 	bic.w	r1, r1, #7

	pucAlignedHeap = ( uint8_t * ) ulAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800170e:	4c3a      	ldr	r4, [pc, #232]	; (80017f8 <pvPortMalloc+0x120>)
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
	ulAddress -= xHeapStructSize;
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) ulAddress;
 8001710:	f8ce 1000 	str.w	r1, [lr]
	pucAlignedHeap = ( uint8_t * ) ulAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 8001714:	2300      	movs	r3, #0
 8001716:	6063      	str	r3, [r4, #4]

	pucAlignedHeap = ( uint8_t * ) ulAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001718:	6022      	str	r2, [r4, #0]
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
	ulAddress -= xHeapStructSize;
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) ulAddress;
	pxEnd->xBlockSize = 0;
 800171a:	604b      	str	r3, [r1, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800171c:	600b      	str	r3, [r1, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800171e:	1a8b      	subs	r3, r1, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001720:	e882 000a 	stmia.w	r2, {r1, r3}

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001724:	4a35      	ldr	r2, [pc, #212]	; (80017fc <pvPortMalloc+0x124>)
 8001726:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001728:	4a35      	ldr	r2, [pc, #212]	; (8001800 <pvPortMalloc+0x128>)
 800172a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800172c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001730:	6003      	str	r3, [r0, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001732:	6806      	ldr	r6, [r0, #0]
 8001734:	4235      	tst	r5, r6
 8001736:	d148      	bne.n	80017ca <pvPortMalloc+0xf2>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001738:	2d00      	cmp	r5, #0
 800173a:	d047      	beq.n	80017cc <pvPortMalloc+0xf4>
			{
				xWantedSize += xHeapStructSize;
 800173c:	f105 0308 	add.w	r3, r5, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001740:	0758      	lsls	r0, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001742:	bf1c      	itt	ne
 8001744:	f023 0307 	bicne.w	r3, r3, #7
 8001748:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800174a:	2b00      	cmp	r3, #0
 800174c:	d03b      	beq.n	80017c6 <pvPortMalloc+0xee>
 800174e:	4a2c      	ldr	r2, [pc, #176]	; (8001800 <pvPortMalloc+0x128>)
 8001750:	6817      	ldr	r7, [r2, #0]
 8001752:	42bb      	cmp	r3, r7
 8001754:	4690      	mov	r8, r2
 8001756:	d838      	bhi.n	80017ca <pvPortMalloc+0xf2>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8001758:	4927      	ldr	r1, [pc, #156]	; (80017f8 <pvPortMalloc+0x120>)
 800175a:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800175c:	6862      	ldr	r2, [r4, #4]
 800175e:	429a      	cmp	r2, r3
 8001760:	d304      	bcc.n	800176c <pvPortMalloc+0x94>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001762:	f8de 0000 	ldr.w	r0, [lr]
 8001766:	4284      	cmp	r4, r0
 8001768:	d106      	bne.n	8001778 <pvPortMalloc+0xa0>
 800176a:	e02e      	b.n	80017ca <pvPortMalloc+0xf2>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800176c:	6820      	ldr	r0, [r4, #0]
 800176e:	2800      	cmp	r0, #0
 8001770:	d0f7      	beq.n	8001762 <pvPortMalloc+0x8a>
 8001772:	4621      	mov	r1, r4
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
 8001774:	4604      	mov	r4, r0
 8001776:	e7f1      	b.n	800175c <pvPortMalloc+0x84>
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001778:	1ad2      	subs	r2, r2, r3
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800177a:	6820      	ldr	r0, [r4, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800177c:	680d      	ldr	r5, [r1, #0]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800177e:	6008      	str	r0, [r1, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001780:	2a10      	cmp	r2, #16
 8001782:	d90f      	bls.n	80017a4 <pvPortMalloc+0xcc>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001784:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001786:	0741      	lsls	r1, r0, #29
 8001788:	d008      	beq.n	800179c <pvPortMalloc+0xc4>
 800178a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800178e:	f383 8811 	msr	BASEPRI, r3
 8001792:	f3bf 8f6f 	isb	sy
 8001796:	f3bf 8f4f 	dsb	sy
 800179a:	e7fe      	b.n	800179a <pvPortMalloc+0xc2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800179c:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800179e:	6063      	str	r3, [r4, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 80017a0:	f7ff ff76 	bl	8001690 <prvInsertBlockIntoFreeList>
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80017a4:	4815      	ldr	r0, [pc, #84]	; (80017fc <pvPortMalloc+0x124>)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80017a6:	6861      	ldr	r1, [r4, #4]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80017a8:	6803      	ldr	r3, [r0, #0]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80017aa:	1a7a      	subs	r2, r7, r1

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80017ac:	429a      	cmp	r2, r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80017ae:	ea41 0606 	orr.w	r6, r1, r6
					pxBlock->pxNextFreeBlock = NULL;
 80017b2:	f04f 0300 	mov.w	r3, #0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80017b6:	f8c8 2000 	str.w	r2, [r8]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80017ba:	bf38      	it	cc
 80017bc:	6002      	strcc	r2, [r0, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80017be:	3508      	adds	r5, #8
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80017c0:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80017c2:	6023      	str	r3, [r4, #0]
 80017c4:	e002      	b.n	80017cc <pvPortMalloc+0xf4>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80017c6:	461d      	mov	r5, r3
 80017c8:	e000      	b.n	80017cc <pvPortMalloc+0xf4>
 80017ca:	2500      	movs	r5, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80017cc:	f7ff fdc8 	bl	8001360 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80017d0:	076b      	lsls	r3, r5, #29
 80017d2:	d008      	beq.n	80017e6 <pvPortMalloc+0x10e>
 80017d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017d8:	f383 8811 	msr	BASEPRI, r3
 80017dc:	f3bf 8f6f 	isb	sy
 80017e0:	f3bf 8f4f 	dsb	sy
 80017e4:	e7fe      	b.n	80017e4 <pvPortMalloc+0x10c>
	return pvReturn;
}
 80017e6:	4628      	mov	r0, r5
 80017e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017ec:	20000154 	.word	0x20000154
 80017f0:	20003d60 	.word	0x20003d60
 80017f4:	20000160 	.word	0x20000160
 80017f8:	20000158 	.word	0x20000158
 80017fc:	20003d64 	.word	0x20003d64
 8001800:	20000150 	.word	0x20000150

08001804 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001804:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 8001806:	4604      	mov	r4, r0
 8001808:	b370      	cbz	r0, 8001868 <vPortFree+0x64>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800180a:	4a18      	ldr	r2, [pc, #96]	; (800186c <vPortFree+0x68>)
 800180c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001810:	6812      	ldr	r2, [r2, #0]
 8001812:	421a      	tst	r2, r3
 8001814:	d108      	bne.n	8001828 <vPortFree+0x24>
 8001816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800181a:	f383 8811 	msr	BASEPRI, r3
 800181e:	f3bf 8f6f 	isb	sy
 8001822:	f3bf 8f4f 	dsb	sy
 8001826:	e7fe      	b.n	8001826 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001828:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800182c:	b141      	cbz	r1, 8001840 <vPortFree+0x3c>
 800182e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001832:	f383 8811 	msr	BASEPRI, r3
 8001836:	f3bf 8f6f 	isb	sy
 800183a:	f3bf 8f4f 	dsb	sy
 800183e:	e7fe      	b.n	800183e <vPortFree+0x3a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001840:	ea23 0302 	bic.w	r3, r3, r2
 8001844:	f840 3c04 	str.w	r3, [r0, #-4]

				vTaskSuspendAll();
 8001848:	f7ff fcf0 	bl	800122c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <vPortFree+0x6c>)
 800184e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8001852:	681a      	ldr	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001854:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001858:	440a      	add	r2, r1
 800185a:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800185c:	f7ff ff18 	bl	8001690 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 8001864:	f7ff bd7c 	b.w	8001360 <xTaskResumeAll>
 8001868:	bd10      	pop	{r4, pc}
 800186a:	bf00      	nop
 800186c:	20003d60 	.word	0x20003d60
 8001870:	20000150 	.word	0x20000150

08001874 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001874:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <prvTaskExitError+0x2c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	3301      	adds	r3, #1
 800187a:	d008      	beq.n	800188e <prvTaskExitError+0x1a>
 800187c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001880:	f383 8811 	msr	BASEPRI, r3
 8001884:	f3bf 8f6f 	isb	sy
 8001888:	f3bf 8f4f 	dsb	sy
 800188c:	e7fe      	b.n	800188c <prvTaskExitError+0x18>
 800188e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001892:	f383 8811 	msr	BASEPRI, r3
 8001896:	f3bf 8f6f 	isb	sy
 800189a:	f3bf 8f4f 	dsb	sy
 800189e:	e7fe      	b.n	800189e <prvTaskExitError+0x2a>
 80018a0:	20000004 	.word	0x20000004

080018a4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80018a4:	4806      	ldr	r0, [pc, #24]	; (80018c0 <prvPortStartFirstTask+0x1c>)
 80018a6:	6800      	ldr	r0, [r0, #0]
 80018a8:	6800      	ldr	r0, [r0, #0]
 80018aa:	f380 8808 	msr	MSP, r0
 80018ae:	b662      	cpsie	i
 80018b0:	b661      	cpsie	f
 80018b2:	f3bf 8f4f 	dsb	sy
 80018b6:	f3bf 8f6f 	isb	sy
 80018ba:	df00      	svc	0
 80018bc:	bf00      	nop
 80018be:	0000      	.short	0x0000
 80018c0:	e000ed08 	.word	0xe000ed08

080018c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80018c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80018d4 <vPortEnableVFP+0x10>
 80018c8:	6801      	ldr	r1, [r0, #0]
 80018ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80018ce:	6001      	str	r1, [r0, #0]
 80018d0:	4770      	bx	lr
 80018d2:	0000      	.short	0x0000
 80018d4:	e000ed88 	.word	0xe000ed88

080018d8 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80018d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80018dc:	e900 000a 	stmdb	r0, {r1, r3}
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <pxPortInitialiseStack+0x20>)
 80018e2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80018e6:	f06f 0302 	mvn.w	r3, #2
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80018ea:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80018ee:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 80018f2:	3844      	subs	r0, #68	; 0x44
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	08001875 	.word	0x08001875

080018fc <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <pxCurrentTCBConst2>)
 80018fe:	6819      	ldr	r1, [r3, #0]
 8001900:	6808      	ldr	r0, [r1, #0]
 8001902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001906:	f380 8809 	msr	PSP, r0
 800190a:	f3bf 8f6f 	isb	sy
 800190e:	f04f 0000 	mov.w	r0, #0
 8001912:	f380 8811 	msr	BASEPRI, r0
 8001916:	4770      	bx	lr

08001918 <pxCurrentTCBConst2>:
 8001918:	20000108 	.word	0x20000108

0800191c <vPortEnterCritical>:
 800191c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001920:	f383 8811 	msr	BASEPRI, r3
 8001924:	f3bf 8f6f 	isb	sy
 8001928:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800192c:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <vPortEnterCritical+0x3c>)
 800192e:	6813      	ldr	r3, [r2, #0]
 8001930:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001932:	2b01      	cmp	r3, #1
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001934:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001936:	d10d      	bne.n	8001954 <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <vPortEnterCritical+0x40>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001940:	d008      	beq.n	8001954 <vPortEnterCritical+0x38>
 8001942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001946:	f383 8811 	msr	BASEPRI, r3
 800194a:	f3bf 8f6f 	isb	sy
 800194e:	f3bf 8f4f 	dsb	sy
 8001952:	e7fe      	b.n	8001952 <vPortEnterCritical+0x36>
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000004 	.word	0x20000004
 800195c:	e000ed04 	.word	0xe000ed04

08001960 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8001960:	4a08      	ldr	r2, [pc, #32]	; (8001984 <vPortExitCritical+0x24>)
 8001962:	6813      	ldr	r3, [r2, #0]
 8001964:	b943      	cbnz	r3, 8001978 <vPortExitCritical+0x18>
 8001966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800196a:	f383 8811 	msr	BASEPRI, r3
 800196e:	f3bf 8f6f 	isb	sy
 8001972:	f3bf 8f4f 	dsb	sy
 8001976:	e7fe      	b.n	8001976 <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001978:	3b01      	subs	r3, #1
 800197a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800197c:	b90b      	cbnz	r3, 8001982 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800197e:	f383 8811 	msr	BASEPRI, r3
 8001982:	4770      	bx	lr
 8001984:	20000004 	.word	0x20000004

08001988 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001988:	f3ef 8009 	mrs	r0, PSP
 800198c:	f3bf 8f6f 	isb	sy
 8001990:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <pxCurrentTCBConst>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	f01e 0f10 	tst.w	lr, #16
 8001998:	bf08      	it	eq
 800199a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800199e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019a2:	6010      	str	r0, [r2, #0]
 80019a4:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80019a8:	f04f 0050 	mov.w	r0, #80	; 0x50
 80019ac:	f380 8811 	msr	BASEPRI, r0
 80019b0:	f3bf 8f4f 	dsb	sy
 80019b4:	f3bf 8f6f 	isb	sy
 80019b8:	f7ff fe24 	bl	8001604 <vTaskSwitchContext>
 80019bc:	f04f 0000 	mov.w	r0, #0
 80019c0:	f380 8811 	msr	BASEPRI, r0
 80019c4:	bc08      	pop	{r3}
 80019c6:	6819      	ldr	r1, [r3, #0]
 80019c8:	6808      	ldr	r0, [r1, #0]
 80019ca:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019ce:	f01e 0f10 	tst.w	lr, #16
 80019d2:	bf08      	it	eq
 80019d4:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80019d8:	f380 8809 	msr	PSP, r0
 80019dc:	f3bf 8f6f 	isb	sy
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop

080019e4 <pxCurrentTCBConst>:
 80019e4:	20000108 	.word	0x20000108

080019e8 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80019e8:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80019ea:	f3ef 8311 	mrs	r3, BASEPRI
 80019ee:	f04f 0250 	mov.w	r2, #80	; 0x50
 80019f2:	f382 8811 	msr	BASEPRI, r2
 80019f6:	f3bf 8f6f 	isb	sy
 80019fa:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80019fe:	f7ff fc23 	bl	8001248 <xTaskIncrementTick>
 8001a02:	b118      	cbz	r0, 8001a0c <xPortSysTickHandler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <xPortSysTickHandler+0x2c>)
 8001a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a0a:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f383 8811 	msr	BASEPRI, r3
 8001a12:	bd08      	pop	{r3, pc}
 8001a14:	e000ed04 	.word	0xe000ed04

08001a18 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <vPortSetupTimerInterrupt+0x1c>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a20:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <vPortSetupTimerInterrupt+0x20>)
 8001a26:	3a01      	subs	r2, #1
 8001a28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001a2a:	2207      	movs	r2, #7
 8001a2c:	f843 2c04 	str.w	r2, [r3, #-4]
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000008 	.word	0x20000008
 8001a38:	e000e014 	.word	0xe000e014

08001a3c <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001a3c:	4b30      	ldr	r3, [pc, #192]	; (8001b00 <xPortStartScheduler+0xc4>)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001a3e:	b507      	push	{r0, r1, r2, lr}
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001a40:	6819      	ldr	r1, [r3, #0]
 8001a42:	4a30      	ldr	r2, [pc, #192]	; (8001b04 <xPortStartScheduler+0xc8>)
 8001a44:	4291      	cmp	r1, r2
 8001a46:	d108      	bne.n	8001a5a <xPortStartScheduler+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a4c:	f383 8811 	msr	BASEPRI, r3
 8001a50:	f3bf 8f6f 	isb	sy
 8001a54:	f3bf 8f4f 	dsb	sy
 8001a58:	e7fe      	b.n	8001a58 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b2a      	ldr	r3, [pc, #168]	; (8001b08 <xPortStartScheduler+0xcc>)
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d108      	bne.n	8001a74 <xPortStartScheduler+0x38>
 8001a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a66:	f383 8811 	msr	BASEPRI, r3
 8001a6a:	f3bf 8f6f 	isb	sy
 8001a6e:	f3bf 8f4f 	dsb	sy
 8001a72:	e7fe      	b.n	8001a72 <xPortStartScheduler+0x36>
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001a74:	4b25      	ldr	r3, [pc, #148]	; (8001b0c <xPortStartScheduler+0xd0>)
 8001a76:	781a      	ldrb	r2, [r3, #0]
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001a7c:	22ff      	movs	r2, #255	; 0xff
 8001a7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001a88:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001a8c:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <xPortStartScheduler+0xd4>)
 8001a8e:	f002 0250 	and.w	r2, r2, #80	; 0x50
 8001a92:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001a94:	4a1f      	ldr	r2, [pc, #124]	; (8001b14 <xPortStartScheduler+0xd8>)
 8001a96:	2307      	movs	r3, #7
 8001a98:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001a9a:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8001a9e:	0609      	lsls	r1, r1, #24
 8001aa0:	f103 30ff 	add.w	r0, r3, #4294967295
 8001aa4:	d507      	bpl.n	8001ab6 <xPortStartScheduler+0x7a>
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001aa6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	f88d 3003 	strb.w	r3, [sp, #3]
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	e7f1      	b.n	8001a9a <xPortStartScheduler+0x5e>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001ab6:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001ab8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001abc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001abe:	9a01      	ldr	r2, [sp, #4]
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <xPortStartScheduler+0xd0>)
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001ac6:	f8d3 2920 	ldr.w	r2, [r3, #2336]	; 0x920
 8001aca:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001ace:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001ad2:	f8d3 2920 	ldr.w	r2, [r3, #2336]	; 0x920
 8001ad6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001ada:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001ade:	f7ff ff9b 	bl	8001a18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001ae2:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <xPortStartScheduler+0xdc>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001ae8:	f7ff feec 	bl	80018c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <xPortStartScheduler+0xe0>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8001af4:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001af6:	f7ff fed5 	bl	80018a4 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8001afa:	f7ff febb 	bl	8001874 <prvTaskExitError>
 8001afe:	bf00      	nop
 8001b00:	e000ed00 	.word	0xe000ed00
 8001b04:	410fc271 	.word	0x410fc271
 8001b08:	410fc270 	.word	0x410fc270
 8001b0c:	e000e400 	.word	0xe000e400
 8001b10:	20003d68 	.word	0x20003d68
 8001b14:	20003d6c 	.word	0x20003d6c
 8001b18:	20000004 	.word	0x20000004
 8001b1c:	e000ef34 	.word	0xe000ef34

08001b20 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b20:	f100 0308 	add.w	r3, r0, #8
 8001b24:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001b26:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b2a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b2c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001b2e:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001b30:	6082      	str	r2, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001b32:	6003      	str	r3, [r0, #0]
 8001b34:	4770      	bx	lr

08001b36 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	6103      	str	r3, [r0, #16]
 8001b3a:	4770      	bx	lr

08001b3c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001b3c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001b3e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001b48:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001b4a:	6803      	ldr	r3, [r0, #0]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001b4c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001b4e:	3301      	adds	r3, #1
 8001b50:	6003      	str	r3, [r0, #0]
 8001b52:	4770      	bx	lr

08001b54 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b54:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b56:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001b58:	1c63      	adds	r3, r4, #1
 8001b5a:	d101      	bne.n	8001b60 <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001b5c:	6903      	ldr	r3, [r0, #16]
 8001b5e:	e007      	b.n	8001b70 <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b60:	f100 0308 	add.w	r3, r0, #8
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	6815      	ldr	r5, [r2, #0]
 8001b68:	42a5      	cmp	r5, r4
 8001b6a:	d801      	bhi.n	8001b70 <vListInsert+0x1c>
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	e7f9      	b.n	8001b64 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b74:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001b76:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001b78:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001b7a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001b7c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001b7e:	3301      	adds	r3, #1
 8001b80:	6003      	str	r3, [r0, #0]
 8001b82:	bd30      	pop	{r4, r5, pc}

08001b84 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b84:	6841      	ldr	r1, [r0, #4]
 8001b86:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001b88:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b8a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b8c:	6882      	ldr	r2, [r0, #8]
 8001b8e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001b90:	6859      	ldr	r1, [r3, #4]
 8001b92:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b94:	bf08      	it	eq
 8001b96:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001b98:	2200      	movs	r2, #0
 8001b9a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001b9c:	6818      	ldr	r0, [r3, #0]
 8001b9e:	3801      	subs	r0, #1
 8001ba0:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001ba2:	4770      	bx	lr

08001ba4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001ba4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001ba6:	f7ff fb0b 	bl	80011c0 <vTaskStartScheduler>
  
  return osOK;
}
 8001baa:	2000      	movs	r0, #0
 8001bac:	bd08      	pop	{r3, pc}

08001bae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001bae:	b530      	push	{r4, r5, lr}
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8001bb0:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001bb4:	8a02      	ldrh	r2, [r0, #16]
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001bb6:	b087      	sub	sp, #28
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8001bb8:	2c84      	cmp	r4, #132	; 0x84
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001bba:	460b      	mov	r3, r1
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001bbc:	e890 0022 	ldmia.w	r0, {r1, r5}
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
    fpriority += (priority - osPriorityIdle);
 8001bc0:	bf14      	ite	ne
 8001bc2:	3403      	addne	r4, #3
extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001bc4:	2400      	moveq	r4, #0
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001bc6:	9400      	str	r4, [sp, #0]
 8001bc8:	a805      	add	r0, sp, #20
 8001bca:	2400      	movs	r4, #0
 8001bcc:	9001      	str	r0, [sp, #4]
 8001bce:	9402      	str	r4, [sp, #8]
 8001bd0:	9403      	str	r4, [sp, #12]
 8001bd2:	4628      	mov	r0, r5
 8001bd4:	f7ff fa0c 	bl	8000ff0 <xTaskGenericCreate>
 8001bd8:	2801      	cmp	r0, #1
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
  }
  
  return handle;
 8001bda:	bf0c      	ite	eq
 8001bdc:	9805      	ldreq	r0, [sp, #20]
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
 8001bde:	4620      	movne	r0, r4
  }
  
  return handle;
}
 8001be0:	b007      	add	sp, #28
 8001be2:	bd30      	pop	{r4, r5, pc}

08001be4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001be4:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001be6:	2800      	cmp	r0, #0
 8001be8:	bf08      	it	eq
 8001bea:	2001      	moveq	r0, #1
 8001bec:	f7ff fc90 	bl	8001510 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	bd08      	pop	{r3, pc}

08001bf4 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8001bf4:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001bf6:	f7ff fd3b 	bl	8001670 <xTaskGetSchedulerState>
 8001bfa:	2801      	cmp	r0, #1
 8001bfc:	d003      	beq.n	8001c06 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001bfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8001c02:	f7ff bef1 	b.w	80019e8 <xPortSysTickHandler>
 8001c06:	bd08      	pop	{r3, pc}

08001c08 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001c0c:	6805      	ldr	r5, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001c0e:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001c10:	692a      	ldr	r2, [r5, #16]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c12:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001c14:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c18:	68a1      	ldr	r1, [r4, #8]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001c1a:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c1c:	69c2      	ldr	r2, [r0, #28]
 8001c1e:	6900      	ldr	r0, [r0, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  huart->Instance->CR2 = (uint32_t)tmpreg;
 8001c20:	612b      	str	r3, [r5, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001c22:	68eb      	ldr	r3, [r5, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c24:	4308      	orrs	r0, r1
 8001c26:	6961      	ldr	r1, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001c28:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c2c:	4301      	orrs	r1, r0
 8001c2e:	4311      	orrs	r1, r2

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001c30:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c34:	430b      	orrs	r3, r1
  
  /* Write to USART CR1 */
  huart->Instance->CR1 = (uint32_t)tmpreg;
 8001c36:	60eb      	str	r3, [r5, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001c38:	6969      	ldr	r1, [r5, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001c3a:	69a3      	ldr	r3, [r4, #24]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001c3c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001c40:	430b      	orrs	r3, r1
  
  /* Write to USART CR3 */
  huart->Instance->CR3 = (uint32_t)tmpreg;
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c42:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
  
  /* Write to USART CR3 */
  huart->Instance->CR3 = (uint32_t)tmpreg;
 8001c46:	616b      	str	r3, [r5, #20]
 8001c48:	4b7d      	ldr	r3, [pc, #500]	; (8001e40 <UART_SetConfig+0x238>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c4a:	d17c      	bne.n	8001d46 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c4c:	429d      	cmp	r5, r3
 8001c4e:	d003      	beq.n	8001c58 <UART_SetConfig+0x50>
 8001c50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c54:	429d      	cmp	r5, r3
 8001c56:	d132      	bne.n	8001cbe <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001c58:	f000 fdc8 	bl	80027ec <HAL_RCC_GetPCLK2Freq>
 8001c5c:	6863      	ldr	r3, [r4, #4]
 8001c5e:	2719      	movs	r7, #25
 8001c60:	4378      	muls	r0, r7
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fbb0 f9f3 	udiv	r9, r0, r3
 8001c68:	f000 fdc0 	bl	80027ec <HAL_RCC_GetPCLK2Freq>
 8001c6c:	6863      	ldr	r3, [r4, #4]
 8001c6e:	4378      	muls	r0, r7
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	fbb0 f8f3 	udiv	r8, r0, r3
 8001c76:	f000 fdb9 	bl	80027ec <HAL_RCC_GetPCLK2Freq>
 8001c7a:	6863      	ldr	r3, [r4, #4]
 8001c7c:	4378      	muls	r0, r7
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	2664      	movs	r6, #100	; 0x64
 8001c82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c86:	fbb3 f3f6 	udiv	r3, r3, r6
 8001c8a:	fb06 8813 	mls	r8, r6, r3, r8
 8001c8e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8001c92:	f000 fdab 	bl	80027ec <HAL_RCC_GetPCLK2Freq>
 8001c96:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8001c9a:	6863      	ldr	r3, [r4, #4]
 8001c9c:	fbb8 f8f6 	udiv	r8, r8, r6
 8001ca0:	fbb9 f9f6 	udiv	r9, r9, r6
 8001ca4:	4378      	muls	r0, r7
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8001cac:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001cb0:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8001cb4:	fbb0 faf3 	udiv	sl, r0, r3
 8001cb8:	f000 fd98 	bl	80027ec <HAL_RCC_GetPCLK2Freq>
 8001cbc:	e031      	b.n	8001d22 <UART_SetConfig+0x11a>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001cbe:	f000 fd7f 	bl	80027c0 <HAL_RCC_GetPCLK1Freq>
 8001cc2:	6863      	ldr	r3, [r4, #4]
 8001cc4:	2719      	movs	r7, #25
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4378      	muls	r0, r7
 8001cca:	fbb0 f9f3 	udiv	r9, r0, r3
 8001cce:	f000 fd77 	bl	80027c0 <HAL_RCC_GetPCLK1Freq>
 8001cd2:	6863      	ldr	r3, [r4, #4]
 8001cd4:	4378      	muls	r0, r7
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	fbb0 f8f3 	udiv	r8, r0, r3
 8001cdc:	f000 fd70 	bl	80027c0 <HAL_RCC_GetPCLK1Freq>
 8001ce0:	6863      	ldr	r3, [r4, #4]
 8001ce2:	4378      	muls	r0, r7
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2664      	movs	r6, #100	; 0x64
 8001ce8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cec:	fbb3 f3f6 	udiv	r3, r3, r6
 8001cf0:	fb06 8813 	mls	r8, r6, r3, r8
 8001cf4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8001cf8:	f000 fd62 	bl	80027c0 <HAL_RCC_GetPCLK1Freq>
 8001cfc:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8001d00:	6863      	ldr	r3, [r4, #4]
 8001d02:	fbb8 f8f6 	udiv	r8, r8, r6
 8001d06:	fbb9 f9f6 	udiv	r9, r9, r6
 8001d0a:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8001d0e:	4378      	muls	r0, r7
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001d16:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8001d1a:	fbb0 faf3 	udiv	sl, r0, r3
 8001d1e:	f000 fd4f 	bl	80027c0 <HAL_RCC_GetPCLK1Freq>
 8001d22:	6863      	ldr	r3, [r4, #4]
 8001d24:	4378      	muls	r0, r7
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	fbb0 f7f3 	udiv	r7, r0, r3
 8001d2c:	fbb7 f7f6 	udiv	r7, r7, r6
 8001d30:	fb06 aa17 	mls	sl, r6, r7, sl
 8001d34:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8001d38:	f10a 0a32 	add.w	sl, sl, #50	; 0x32
 8001d3c:	fbba f6f6 	udiv	r6, sl, r6
 8001d40:	f006 0607 	and.w	r6, r6, #7
 8001d44:	e076      	b.n	8001e34 <UART_SetConfig+0x22c>
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d46:	429d      	cmp	r5, r3
 8001d48:	d002      	beq.n	8001d50 <UART_SetConfig+0x148>
 8001d4a:	4b3e      	ldr	r3, [pc, #248]	; (8001e44 <UART_SetConfig+0x23c>)
 8001d4c:	429d      	cmp	r5, r3
 8001d4e:	d130      	bne.n	8001db2 <UART_SetConfig+0x1aa>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001d50:	f000 fd4c 	bl	80027ec <HAL_RCC_GetPCLK2Freq>
 8001d54:	6863      	ldr	r3, [r4, #4]
 8001d56:	2719      	movs	r7, #25
 8001d58:	4378      	muls	r0, r7
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	fbb0 f8f3 	udiv	r8, r0, r3
 8001d60:	f000 fd44 	bl	80027ec <HAL_RCC_GetPCLK2Freq>
 8001d64:	6863      	ldr	r3, [r4, #4]
 8001d66:	4378      	muls	r0, r7
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	fbb0 f9f3 	udiv	r9, r0, r3
 8001d6e:	f000 fd3d 	bl	80027ec <HAL_RCC_GetPCLK2Freq>
 8001d72:	6863      	ldr	r3, [r4, #4]
 8001d74:	4378      	muls	r0, r7
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	2664      	movs	r6, #100	; 0x64
 8001d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d7e:	fbb3 f3f6 	udiv	r3, r3, r6
 8001d82:	fb06 9913 	mls	r9, r6, r3, r9
 8001d86:	f000 fd31 	bl	80027ec <HAL_RCC_GetPCLK2Freq>
 8001d8a:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001d8e:	6863      	ldr	r3, [r4, #4]
 8001d90:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001d94:	fbb8 f8f6 	udiv	r8, r8, r6
 8001d98:	fbb9 f9f6 	udiv	r9, r9, r6
 8001d9c:	4378      	muls	r0, r7
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001da4:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
 8001da8:	fbb0 faf3 	udiv	sl, r0, r3
 8001dac:	f000 fd1e 	bl	80027ec <HAL_RCC_GetPCLK2Freq>
 8001db0:	e02f      	b.n	8001e12 <UART_SetConfig+0x20a>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001db2:	f000 fd05 	bl	80027c0 <HAL_RCC_GetPCLK1Freq>
 8001db6:	6863      	ldr	r3, [r4, #4]
 8001db8:	2719      	movs	r7, #25
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4378      	muls	r0, r7
 8001dbe:	fbb0 f8f3 	udiv	r8, r0, r3
 8001dc2:	f000 fcfd 	bl	80027c0 <HAL_RCC_GetPCLK1Freq>
 8001dc6:	6863      	ldr	r3, [r4, #4]
 8001dc8:	4378      	muls	r0, r7
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	fbb0 f9f3 	udiv	r9, r0, r3
 8001dd0:	f000 fcf6 	bl	80027c0 <HAL_RCC_GetPCLK1Freq>
 8001dd4:	6863      	ldr	r3, [r4, #4]
 8001dd6:	4378      	muls	r0, r7
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	2664      	movs	r6, #100	; 0x64
 8001ddc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001de0:	fbb3 f3f6 	udiv	r3, r3, r6
 8001de4:	fb06 9913 	mls	r9, r6, r3, r9
 8001de8:	f000 fcea 	bl	80027c0 <HAL_RCC_GetPCLK1Freq>
 8001dec:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001df0:	6863      	ldr	r3, [r4, #4]
 8001df2:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001df6:	fbb8 f8f6 	udiv	r8, r8, r6
 8001dfa:	fbb9 f9f6 	udiv	r9, r9, r6
 8001dfe:	4378      	muls	r0, r7
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001e06:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
 8001e0a:	fbb0 faf3 	udiv	sl, r0, r3
 8001e0e:	f000 fcd7 	bl	80027c0 <HAL_RCC_GetPCLK1Freq>
 8001e12:	6863      	ldr	r3, [r4, #4]
 8001e14:	4378      	muls	r0, r7
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	fbb0 f7f3 	udiv	r7, r0, r3
 8001e1c:	fbb7 f7f6 	udiv	r7, r7, r6
 8001e20:	fb06 aa17 	mls	sl, r6, r7, sl
 8001e24:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 8001e28:	f10a 0a32 	add.w	sl, sl, #50	; 0x32
 8001e2c:	fbba f6f6 	udiv	r6, sl, r6
 8001e30:	f006 060f 	and.w	r6, r6, #15
 8001e34:	444e      	add	r6, r9
 8001e36:	4446      	add	r6, r8
 8001e38:	60ae      	str	r6, [r5, #8]
 8001e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e3e:	bf00      	nop
 8001e40:	40011000 	.word	0x40011000
 8001e44:	40011400 	.word	0x40011400

08001e48 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e48:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001e4a:	4604      	mov	r4, r0
 8001e4c:	b340      	cbz	r0, 8001ea0 <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001e4e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001e52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e56:	b91b      	cbnz	r3, 8001e60 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e58:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001e5c:	f7fe ff20 	bl	8000ca0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e60:	2324      	movs	r3, #36	; 0x24
 8001e62:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e66:	6823      	ldr	r3, [r4, #0]
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e6e:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e70:	4620      	mov	r0, r4
 8001e72:	f7ff fec9 	bl	8001c08 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8001e76:	6823      	ldr	r3, [r4, #0]
 8001e78:	691a      	ldr	r2, [r3, #16]
 8001e7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e7e:	611a      	str	r2, [r3, #16]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8001e80:	695a      	ldr	r2, [r3, #20]
 8001e82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e86:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e8e:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e90:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001e92:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e94:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001e96:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001e9a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 8001e9e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8001ea0:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 8001ea2:	bd10      	pop	{r4, pc}

08001ea4 <HAL_UART_Transmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001ea4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001ea8:	2b20      	cmp	r3, #32
 8001eaa:	d118      	bne.n	8001ede <HAL_UART_Transmit_IT+0x3a>
  {
    if((pData == NULL ) || (Size == 0U)) 
 8001eac:	b1a9      	cbz	r1, 8001eda <HAL_UART_Transmit_IT+0x36>
 8001eae:	b1a2      	cbz	r2, 8001eda <HAL_UART_Transmit_IT+0x36>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8001eb0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d012      	beq.n	8001ede <HAL_UART_Transmit_IT+0x3a>
    
    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
 8001eb8:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8001eba:	84c2      	strh	r2, [r0, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ebc:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ebe:	2221      	movs	r2, #33	; 0x21
    
    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ec0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ec2:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001ec6:	6802      	ldr	r2, [r0, #0]
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
    
    huart->pTxBuffPtr = pData;
 8001ec8:	6201      	str	r1, [r0, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001eca:	68d1      	ldr	r1, [r2, #12]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ecc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001ed0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001ed4:	60d1      	str	r1, [r2, #12]
    
    return HAL_OK;
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	4770      	bx	lr
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U)) 
    {
      return HAL_ERROR;
 8001eda:	2001      	movs	r0, #1
 8001edc:	4770      	bx	lr
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;   
 8001ede:	2002      	movs	r0, #2
  }
}
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 8001ee2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001ee6:	2b20      	cmp	r3, #32
 8001ee8:	d120      	bne.n	8001f2c <HAL_UART_Receive_IT+0x4a>
  {
    if((pData == NULL ) || (Size == 0U)) 
 8001eea:	b1e9      	cbz	r1, 8001f28 <HAL_UART_Receive_IT+0x46>
 8001eec:	b1e2      	cbz	r2, 8001f28 <HAL_UART_Receive_IT+0x46>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8001eee:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d01a      	beq.n	8001f2c <HAL_UART_Receive_IT+0x4a>
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
 8001ef6:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001ef8:	85c2      	strh	r2, [r0, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001efa:	2322      	movs	r3, #34	; 0x22
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001efc:	2200      	movs	r2, #0
 8001efe:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f00:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001f04:	6803      	ldr	r3, [r0, #0]
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
    
    huart->pRxBuffPtr = pData;
 8001f06:	6281      	str	r1, [r0, #40]	; 0x28
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
        
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001f08:	68d9      	ldr	r1, [r3, #12]
 8001f0a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001f0e:	60d9      	str	r1, [r3, #12]
    
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001f10:	6959      	ldr	r1, [r3, #20]
 8001f12:	f041 0101 	orr.w	r1, r1, #1
 8001f16:	6159      	str	r1, [r3, #20]
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
    
    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001f18:	68d9      	ldr	r1, [r3, #12]
    
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f1a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001f1e:	f041 0120 	orr.w	r1, r1, #32
 8001f22:	60d9      	str	r1, [r3, #12]
    
    return HAL_OK;
 8001f24:	4610      	mov	r0, r2
 8001f26:	4770      	bx	lr
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U)) 
    {
      return HAL_ERROR;
 8001f28:	2001      	movs	r0, #1
 8001f2a:	4770      	bx	lr
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY; 
 8001f2c:	2002      	movs	r0, #2
  }
}
 8001f2e:	4770      	bx	lr

08001f30 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f30:	4770      	bx	lr

08001f32 <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f32:	4770      	bx	lr

08001f34 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001f34:	4770      	bx	lr

08001f36 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f36:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t tmp1 = 0U, tmp2 = 0U;

  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8001f38:	6803      	ldr	r3, [r0, #0]
 8001f3a:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 8001f3c:	68da      	ldr	r2, [r3, #12]
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8001f3e:	07c9      	lsls	r1, r1, #31
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f40:	4604      	mov	r4, r0
  uint32_t tmp1 = 0U, tmp2 = 0U;

  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8001f42:	d50c      	bpl.n	8001f5e <HAL_UART_IRQHandler+0x28>
 8001f44:	05d0      	lsls	r0, r2, #23
 8001f46:	d50a      	bpl.n	8001f5e <HAL_UART_IRQHandler+0x28>
  { 
    __HAL_UART_CLEAR_PEFLAG(huart);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	9200      	str	r2, [sp, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	9200      	str	r2, [sp, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	9200      	str	r2, [sp, #0]
 8001f54:	9a00      	ldr	r2, [sp, #0]
    
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f56:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001f58:	f042 0201 	orr.w	r2, r2, #1
 8001f5c:	63e2      	str	r2, [r4, #60]	; 0x3c
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 8001f5e:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8001f60:	695a      	ldr	r2, [r3, #20]
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8001f62:	0789      	lsls	r1, r1, #30
 8001f64:	d50c      	bpl.n	8001f80 <HAL_UART_IRQHandler+0x4a>
 8001f66:	07d0      	lsls	r0, r2, #31
 8001f68:	d50a      	bpl.n	8001f80 <HAL_UART_IRQHandler+0x4a>
  { 
    __HAL_UART_CLEAR_FEFLAG(huart);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	9201      	str	r2, [sp, #4]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	9201      	str	r2, [sp, #4]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	9201      	str	r2, [sp, #4]
 8001f76:	9a01      	ldr	r2, [sp, #4]
    
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f78:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001f7a:	f042 0204 	orr.w	r2, r2, #4
 8001f7e:	63e2      	str	r2, [r4, #60]	; 0x3c
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8001f80:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8001f82:	695a      	ldr	r2, [r3, #20]
  /* UART noise error interrupt occurred -------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8001f84:	0749      	lsls	r1, r1, #29
 8001f86:	d50c      	bpl.n	8001fa2 <HAL_UART_IRQHandler+0x6c>
 8001f88:	07d0      	lsls	r0, r2, #31
 8001f8a:	d50a      	bpl.n	8001fa2 <HAL_UART_IRQHandler+0x6c>
  { 
    __HAL_UART_CLEAR_NEFLAG(huart);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	9202      	str	r2, [sp, #8]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	9202      	str	r2, [sp, #8]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	9202      	str	r2, [sp, #8]
 8001f98:	9a02      	ldr	r2, [sp, #8]
    
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f9a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001f9c:	f042 0202 	orr.w	r2, r2, #2
 8001fa0:	63e2      	str	r2, [r4, #60]	; 0x3c
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 8001fa2:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8001fa4:	695a      	ldr	r2, [r3, #20]
  /* UART Over-Run interrupt occurred ----------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8001fa6:	0709      	lsls	r1, r1, #28
 8001fa8:	d50c      	bpl.n	8001fc4 <HAL_UART_IRQHandler+0x8e>
 8001faa:	07d0      	lsls	r0, r2, #31
 8001fac:	d50a      	bpl.n	8001fc4 <HAL_UART_IRQHandler+0x8e>
  { 
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	9203      	str	r2, [sp, #12]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	9203      	str	r2, [sp, #12]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	9203      	str	r2, [sp, #12]
 8001fba:	9a03      	ldr	r2, [sp, #12]
    
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fbc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001fbe:	f042 0208 	orr.w	r2, r2, #8
 8001fc2:	63e2      	str	r2, [r4, #60]	; 0x3c
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 8001fc4:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 8001fc6:	68da      	ldr	r2, [r3, #12]
  /* UART in mode Receiver ---------------------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8001fc8:	0689      	lsls	r1, r1, #26
 8001fca:	d53a      	bpl.n	8002042 <HAL_UART_IRQHandler+0x10c>
 8001fcc:	0690      	lsls	r0, r2, #26
 8001fce:	d538      	bpl.n	8002042 <HAL_UART_IRQHandler+0x10c>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001fd0:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 8001fd4:	2a22      	cmp	r2, #34	; 0x22
 8001fd6:	d134      	bne.n	8002042 <HAL_UART_IRQHandler+0x10c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001fd8:	68a2      	ldr	r2, [r4, #8]
 8001fda:	6921      	ldr	r1, [r4, #16]
 8001fdc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001fe0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001fe2:	d10b      	bne.n	8001ffc <HAL_UART_IRQHandler+0xc6>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 8001fe4:	685b      	ldr	r3, [r3, #4]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001fe6:	b921      	cbnz	r1, 8001ff2 <HAL_UART_IRQHandler+0xbc>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 8001fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fec:	f822 3b02 	strh.w	r3, [r2], #2
 8001ff0:	e002      	b.n	8001ff8 <HAL_UART_IRQHandler+0xc2>
        huart->pRxBuffPtr += 2U;
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FFU);
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	f822 3b01 	strh.w	r3, [r2], #1
        huart->pRxBuffPtr += 1U;
 8001ff8:	62a2      	str	r2, [r4, #40]	; 0x28
 8001ffa:	e00a      	b.n	8002012 <HAL_UART_IRQHandler+0xdc>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001ffc:	b919      	cbnz	r1, 8002006 <HAL_UART_IRQHandler+0xd0>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FFU);
 8001ffe:	1c51      	adds	r1, r2, #1
 8002000:	62a1      	str	r1, [r4, #40]	; 0x28
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	e004      	b.n	8002010 <HAL_UART_IRQHandler+0xda>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	1c51      	adds	r1, r2, #1
 800200a:	62a1      	str	r1, [r4, #40]	; 0x28
 800200c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002010:	7013      	strb	r3, [r2, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8002012:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002014:	3b01      	subs	r3, #1
 8002016:	b29b      	uxth	r3, r3
 8002018:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800201a:	b993      	cbnz	r3, 8002042 <HAL_UART_IRQHandler+0x10c>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800201c:	6823      	ldr	r3, [r4, #0]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	f022 0220 	bic.w	r2, r2, #32
 8002024:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800202c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800202e:	695a      	ldr	r2, [r3, #20]
 8002030:	f022 0201 	bic.w	r2, r2, #1
 8002034:	615a      	str	r2, [r3, #20]

	  /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002036:	2320      	movs	r3, #32
 8002038:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 800203c:	4620      	mov	r0, r4
 800203e:	f7ff ff78 	bl	8001f32 <HAL_UART_RxCpltCallback>
  if((tmp1 != RESET) && (tmp2 != RESET))
  { 
    UART_Receive_IT(huart);
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8002042:	6823      	ldr	r3, [r4, #0]
 8002044:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 8002046:	68da      	ldr	r2, [r3, #12]
  /* UART in mode Transmitter ------------------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8002048:	0609      	lsls	r1, r1, #24
 800204a:	d526      	bpl.n	800209a <HAL_UART_IRQHandler+0x164>
 800204c:	0610      	lsls	r0, r2, #24
 800204e:	d524      	bpl.n	800209a <HAL_UART_IRQHandler+0x164>
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002050:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002054:	2a21      	cmp	r2, #33	; 0x21
 8002056:	d120      	bne.n	800209a <HAL_UART_IRQHandler+0x164>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002058:	68a2      	ldr	r2, [r4, #8]
 800205a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800205e:	6a22      	ldr	r2, [r4, #32]
 8002060:	d10a      	bne.n	8002078 <HAL_UART_IRQHandler+0x142>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FFU);
 8002062:	8811      	ldrh	r1, [r2, #0]
 8002064:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002068:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800206a:	6921      	ldr	r1, [r4, #16]
 800206c:	b909      	cbnz	r1, 8002072 <HAL_UART_IRQHandler+0x13c>
      {
        huart->pTxBuffPtr += 2U;
 800206e:	3202      	adds	r2, #2
 8002070:	e000      	b.n	8002074 <HAL_UART_IRQHandler+0x13e>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002072:	3201      	adds	r2, #1
 8002074:	6222      	str	r2, [r4, #32]
 8002076:	e003      	b.n	8002080 <HAL_UART_IRQHandler+0x14a>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FFU);
 8002078:	1c51      	adds	r1, r2, #1
 800207a:	6221      	str	r1, [r4, #32]
 800207c:	7812      	ldrb	r2, [r2, #0]
 800207e:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8002080:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002082:	3a01      	subs	r2, #1
 8002084:	b292      	uxth	r2, r2
 8002086:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002088:	b93a      	cbnz	r2, 800209a <HAL_UART_IRQHandler+0x164>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002090:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002098:	60da      	str	r2, [r3, #12]
  if((tmp1 != RESET) && (tmp2 != RESET))
  {
    UART_Transmit_IT(huart);
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 800209a:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 800209c:	68da      	ldr	r2, [r3, #12]
  /* UART in mode Transmitter end --------------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 800209e:	0649      	lsls	r1, r1, #25
 80020a0:	d50b      	bpl.n	80020ba <HAL_UART_IRQHandler+0x184>
 80020a2:	0652      	lsls	r2, r2, #25
 80020a4:	d509      	bpl.n	80020ba <HAL_UART_IRQHandler+0x184>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020ac:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80020ae:	2320      	movs	r3, #32
 80020b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 80020b4:	4620      	mov	r0, r4
 80020b6:	f7ff ff3b 	bl	8001f30 <HAL_UART_TxCpltCallback>
  if((tmp1 != RESET) && (tmp2 != RESET))
  {
    UART_EndTransmit_IT(huart);
  }

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80020bc:	b13b      	cbz	r3, 80020ce <HAL_UART_IRQHandler+0x198>
  {
    /* Set the UART state ready to be able to start again the process */
    huart->gState = HAL_UART_STATE_READY;
 80020be:	2320      	movs	r3, #32
 80020c0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    huart->RxState = HAL_UART_STATE_READY;
    
    HAL_UART_ErrorCallback(huart);
 80020c4:	4620      	mov	r0, r4

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
  {
    /* Set the UART state ready to be able to start again the process */
    huart->gState = HAL_UART_STATE_READY;
    huart->RxState = HAL_UART_STATE_READY;
 80020c6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    
    HAL_UART_ErrorCallback(huart);
 80020ca:	f7ff ff33 	bl	8001f34 <HAL_UART_ErrorCallback>
  }  
}
 80020ce:	b004      	add	sp, #16
 80020d0:	bd10      	pop	{r4, pc}

080020d2 <HAL_TIMEx_CommutationCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80020d2:	4770      	bx	lr

080020d4 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020d4:	4770      	bx	lr

080020d6 <HAL_TIM_Base_MspInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80020d6:	4770      	bx	lr

080020d8 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020d8:	6803      	ldr	r3, [r0, #0]
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	f042 0201 	orr.w	r2, r2, #1
 80020e0:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	f042 0201 	orr.w	r2, r2, #1
 80020e8:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 80020ea:	2000      	movs	r0, #0
 80020ec:	4770      	bx	lr

080020ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020ee:	4770      	bx	lr

080020f0 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020f0:	4770      	bx	lr

080020f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020f2:	4770      	bx	lr

080020f4 <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020f4:	4770      	bx	lr

080020f6 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020f6:	6803      	ldr	r3, [r0, #0]
 80020f8:	691a      	ldr	r2, [r3, #16]
 80020fa:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020fc:	b510      	push	{r4, lr}
 80020fe:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002100:	d514      	bpl.n	800212c <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	0792      	lsls	r2, r2, #30
 8002106:	d511      	bpl.n	800212c <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002108:	f06f 0202 	mvn.w	r2, #2
 800210c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800210e:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002110:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002112:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002114:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002116:	d002      	beq.n	800211e <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002118:	f7ff ffea 	bl	80020f0 <HAL_TIM_IC_CaptureCallback>
 800211c:	e004      	b.n	8002128 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800211e:	f7ff ffe6 	bl	80020ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002122:	4620      	mov	r0, r4
 8002124:	f7ff ffe5 	bl	80020f2 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002128:	2300      	movs	r3, #0
 800212a:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	0750      	lsls	r0, r2, #29
 8002132:	d516      	bpl.n	8002162 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	0751      	lsls	r1, r2, #29
 8002138:	d513      	bpl.n	8002162 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800213a:	f06f 0204 	mvn.w	r2, #4
 800213e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002140:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002142:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002144:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002148:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800214a:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800214c:	d002      	beq.n	8002154 <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800214e:	f7ff ffcf 	bl	80020f0 <HAL_TIM_IC_CaptureCallback>
 8002152:	e004      	b.n	800215e <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002154:	f7ff ffcb 	bl	80020ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002158:	4620      	mov	r0, r4
 800215a:	f7ff ffca 	bl	80020f2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215e:	2300      	movs	r3, #0
 8002160:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002162:	6823      	ldr	r3, [r4, #0]
 8002164:	691a      	ldr	r2, [r3, #16]
 8002166:	0712      	lsls	r2, r2, #28
 8002168:	d515      	bpl.n	8002196 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	0710      	lsls	r0, r2, #28
 800216e:	d512      	bpl.n	8002196 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002170:	f06f 0208 	mvn.w	r2, #8
 8002174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002176:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002178:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800217a:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800217c:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800217e:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002180:	d002      	beq.n	8002188 <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002182:	f7ff ffb5 	bl	80020f0 <HAL_TIM_IC_CaptureCallback>
 8002186:	e004      	b.n	8002192 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002188:	f7ff ffb1 	bl	80020ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800218c:	4620      	mov	r0, r4
 800218e:	f7ff ffb0 	bl	80020f2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002192:	2300      	movs	r3, #0
 8002194:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002196:	6823      	ldr	r3, [r4, #0]
 8002198:	691a      	ldr	r2, [r3, #16]
 800219a:	06d2      	lsls	r2, r2, #27
 800219c:	d516      	bpl.n	80021cc <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	06d0      	lsls	r0, r2, #27
 80021a2:	d513      	bpl.n	80021cc <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021a4:	f06f 0210 	mvn.w	r2, #16
 80021a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021aa:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021ac:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021ae:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021b2:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80021b4:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021b6:	d002      	beq.n	80021be <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80021b8:	f7ff ff9a 	bl	80020f0 <HAL_TIM_IC_CaptureCallback>
 80021bc:	e004      	b.n	80021c8 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021be:	f7ff ff96 	bl	80020ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c2:	4620      	mov	r0, r4
 80021c4:	f7ff ff95 	bl	80020f2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c8:	2300      	movs	r3, #0
 80021ca:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021cc:	6823      	ldr	r3, [r4, #0]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	07d1      	lsls	r1, r2, #31
 80021d2:	d508      	bpl.n	80021e6 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	07d2      	lsls	r2, r2, #31
 80021d8:	d505      	bpl.n	80021e6 <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021da:	f06f 0201 	mvn.w	r2, #1
 80021de:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80021e0:	4620      	mov	r0, r4
 80021e2:	f7fe fd37 	bl	8000c54 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021e6:	6823      	ldr	r3, [r4, #0]
 80021e8:	691a      	ldr	r2, [r3, #16]
 80021ea:	0610      	lsls	r0, r2, #24
 80021ec:	d508      	bpl.n	8002200 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	0611      	lsls	r1, r2, #24
 80021f2:	d505      	bpl.n	8002200 <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021f8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80021fa:	4620      	mov	r0, r4
 80021fc:	f7ff ff6a 	bl	80020d4 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002200:	6823      	ldr	r3, [r4, #0]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	0652      	lsls	r2, r2, #25
 8002206:	d508      	bpl.n	800221a <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	0650      	lsls	r0, r2, #25
 800220c:	d505      	bpl.n	800221a <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800220e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002212:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002214:	4620      	mov	r0, r4
 8002216:	f7ff ff6d 	bl	80020f4 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800221a:	6823      	ldr	r3, [r4, #0]
 800221c:	691a      	ldr	r2, [r3, #16]
 800221e:	0691      	lsls	r1, r2, #26
 8002220:	d50a      	bpl.n	8002238 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	0692      	lsls	r2, r2, #26
 8002226:	d507      	bpl.n	8002238 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002228:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800222c:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800222e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8002230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 8002234:	f7ff bf4d 	b.w	80020d2 <HAL_TIMEx_CommutationCallback>
 8002238:	bd10      	pop	{r4, pc}
	...

0800223c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800223c:	4a22      	ldr	r2, [pc, #136]	; (80022c8 <TIM_Base_SetConfig+0x8c>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 800223e:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002240:	4290      	cmp	r0, r2
 8002242:	d00e      	beq.n	8002262 <TIM_Base_SetConfig+0x26>
 8002244:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002248:	d00b      	beq.n	8002262 <TIM_Base_SetConfig+0x26>
 800224a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800224e:	4290      	cmp	r0, r2
 8002250:	d007      	beq.n	8002262 <TIM_Base_SetConfig+0x26>
 8002252:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002256:	4290      	cmp	r0, r2
 8002258:	d003      	beq.n	8002262 <TIM_Base_SetConfig+0x26>
 800225a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800225e:	4290      	cmp	r0, r2
 8002260:	d114      	bne.n	800228c <TIM_Base_SetConfig+0x50>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002262:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002268:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800226a:	4a17      	ldr	r2, [pc, #92]	; (80022c8 <TIM_Base_SetConfig+0x8c>)
 800226c:	4290      	cmp	r0, r2
 800226e:	d025      	beq.n	80022bc <TIM_Base_SetConfig+0x80>
 8002270:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002274:	d022      	beq.n	80022bc <TIM_Base_SetConfig+0x80>
 8002276:	4a15      	ldr	r2, [pc, #84]	; (80022cc <TIM_Base_SetConfig+0x90>)
 8002278:	4290      	cmp	r0, r2
 800227a:	d01f      	beq.n	80022bc <TIM_Base_SetConfig+0x80>
 800227c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002280:	4290      	cmp	r0, r2
 8002282:	d01b      	beq.n	80022bc <TIM_Base_SetConfig+0x80>
 8002284:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002288:	4290      	cmp	r0, r2
 800228a:	d017      	beq.n	80022bc <TIM_Base_SetConfig+0x80>
 800228c:	4a10      	ldr	r2, [pc, #64]	; (80022d0 <TIM_Base_SetConfig+0x94>)
 800228e:	4290      	cmp	r0, r2
 8002290:	d014      	beq.n	80022bc <TIM_Base_SetConfig+0x80>
 8002292:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002296:	4290      	cmp	r0, r2
 8002298:	d010      	beq.n	80022bc <TIM_Base_SetConfig+0x80>
 800229a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800229e:	4290      	cmp	r0, r2
 80022a0:	d00c      	beq.n	80022bc <TIM_Base_SetConfig+0x80>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80022a2:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022a4:	688b      	ldr	r3, [r1, #8]
 80022a6:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80022a8:	680b      	ldr	r3, [r1, #0]
 80022aa:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <TIM_Base_SetConfig+0x8c>)
 80022ae:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022b0:	bf04      	itt	eq
 80022b2:	690b      	ldreq	r3, [r1, #16]
 80022b4:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022b6:	2301      	movs	r3, #1
 80022b8:	6143      	str	r3, [r0, #20]
 80022ba:	4770      	bx	lr
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022bc:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022c2:	4313      	orrs	r3, r2
 80022c4:	e7ed      	b.n	80022a2 <TIM_Base_SetConfig+0x66>
 80022c6:	bf00      	nop
 80022c8:	40010000 	.word	0x40010000
 80022cc:	40000400 	.word	0x40000400
 80022d0:	40014000 	.word	0x40014000

080022d4 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80022d4:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80022d6:	4604      	mov	r4, r0
 80022d8:	b1a0      	cbz	r0, 8002304 <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80022da:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80022de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022e2:	b91b      	cbnz	r3, 80022ec <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022e4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022e8:	f7ff fef5 	bl	80020d6 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80022ec:	2302      	movs	r3, #2
 80022ee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80022f2:	6820      	ldr	r0, [r4, #0]
 80022f4:	1d21      	adds	r1, r4, #4
 80022f6:	f7ff ffa1 	bl	800223c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80022fa:	2301      	movs	r3, #1
 80022fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8002300:	2000      	movs	r0, #0
 8002302:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002304:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8002306:	bd10      	pop	{r4, pc}

08002308 <HAL_RCC_OscConfig>:
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002308:	6803      	ldr	r3, [r0, #0]
  *         first and then HSE On or HSE Bypass.
  
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800230a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800230c:	07d9      	lsls	r1, r3, #31
  *         first and then HSE On or HSE Bypass.
  
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800230e:	4604      	mov	r4, r0
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002310:	d403      	bmi.n	800231a <HAL_RCC_OscConfig+0x12>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002312:	6823      	ldr	r3, [r4, #0]
 8002314:	079a      	lsls	r2, r3, #30
 8002316:	d437      	bmi.n	8002388 <HAL_RCC_OscConfig+0x80>
 8002318:	e079      	b.n	800240e <HAL_RCC_OscConfig+0x106>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800231a:	4ba1      	ldr	r3, [pc, #644]	; (80025a0 <HAL_RCC_OscConfig+0x298>)
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	f002 020c 	and.w	r2, r2, #12
 8002322:	2a04      	cmp	r2, #4
 8002324:	d007      	beq.n	8002336 <HAL_RCC_OscConfig+0x2e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	f002 020c 	and.w	r2, r2, #12
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800232c:	2a08      	cmp	r2, #8
 800232e:	d10b      	bne.n	8002348 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	025b      	lsls	r3, r3, #9
 8002334:	d508      	bpl.n	8002348 <HAL_RCC_OscConfig+0x40>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002336:	4b9a      	ldr	r3, [pc, #616]	; (80025a0 <HAL_RCC_OscConfig+0x298>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	039f      	lsls	r7, r3, #14
 800233c:	d5e9      	bpl.n	8002312 <HAL_RCC_OscConfig+0xa>
 800233e:	6863      	ldr	r3, [r4, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1e6      	bne.n	8002312 <HAL_RCC_OscConfig+0xa>
      {
        return HAL_ERROR;
 8002344:	2001      	movs	r0, #1
 8002346:	e128      	b.n	800259a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002348:	4b96      	ldr	r3, [pc, #600]	; (80025a4 <HAL_RCC_OscConfig+0x29c>)
 800234a:	7922      	ldrb	r2, [r4, #4]
 800234c:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800234e:	6863      	ldr	r3, [r4, #4]
 8002350:	b16b      	cbz	r3, 800236e <HAL_RCC_OscConfig+0x66>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002352:	f000 fbef 	bl	8002b34 <HAL_GetTick>
 8002356:	4605      	mov	r5, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002358:	4b91      	ldr	r3, [pc, #580]	; (80025a0 <HAL_RCC_OscConfig+0x298>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	039e      	lsls	r6, r3, #14
 800235e:	d4d8      	bmi.n	8002312 <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002360:	f000 fbe8 	bl	8002b34 <HAL_GetTick>
 8002364:	1b40      	subs	r0, r0, r5
 8002366:	2864      	cmp	r0, #100	; 0x64
 8002368:	d9f6      	bls.n	8002358 <HAL_RCC_OscConfig+0x50>
          {
            return HAL_TIMEOUT;
 800236a:	2003      	movs	r0, #3
 800236c:	e115      	b.n	800259a <HAL_RCC_OscConfig+0x292>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236e:	f000 fbe1 	bl	8002b34 <HAL_GetTick>
 8002372:	4605      	mov	r5, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002374:	4b8a      	ldr	r3, [pc, #552]	; (80025a0 <HAL_RCC_OscConfig+0x298>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	0398      	lsls	r0, r3, #14
 800237a:	d5ca      	bpl.n	8002312 <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800237c:	f000 fbda 	bl	8002b34 <HAL_GetTick>
 8002380:	1b40      	subs	r0, r0, r5
 8002382:	2864      	cmp	r0, #100	; 0x64
 8002384:	d9f6      	bls.n	8002374 <HAL_RCC_OscConfig+0x6c>
 8002386:	e7f0      	b.n	800236a <HAL_RCC_OscConfig+0x62>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002388:	4b85      	ldr	r3, [pc, #532]	; (80025a0 <HAL_RCC_OscConfig+0x298>)
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	f012 0f0c 	tst.w	r2, #12
 8002390:	d007      	beq.n	80023a2 <HAL_RCC_OscConfig+0x9a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	f002 020c 	and.w	r2, r2, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002398:	2a08      	cmp	r2, #8
 800239a:	d10a      	bne.n	80023b2 <HAL_RCC_OscConfig+0xaa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	0259      	lsls	r1, r3, #9
 80023a0:	d407      	bmi.n	80023b2 <HAL_RCC_OscConfig+0xaa>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a2:	4b7f      	ldr	r3, [pc, #508]	; (80025a0 <HAL_RCC_OscConfig+0x298>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	0792      	lsls	r2, r2, #30
 80023a8:	d515      	bpl.n	80023d6 <HAL_RCC_OscConfig+0xce>
 80023aa:	68e2      	ldr	r2, [r4, #12]
 80023ac:	2a01      	cmp	r2, #1
 80023ae:	d1c9      	bne.n	8002344 <HAL_RCC_OscConfig+0x3c>
 80023b0:	e011      	b.n	80023d6 <HAL_RCC_OscConfig+0xce>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023b2:	68e2      	ldr	r2, [r4, #12]
 80023b4:	4b7c      	ldr	r3, [pc, #496]	; (80025a8 <HAL_RCC_OscConfig+0x2a0>)
 80023b6:	b1e2      	cbz	r2, 80023f2 <HAL_RCC_OscConfig+0xea>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023b8:	2201      	movs	r2, #1
 80023ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023bc:	f000 fbba 	bl	8002b34 <HAL_GetTick>
 80023c0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c2:	4b77      	ldr	r3, [pc, #476]	; (80025a0 <HAL_RCC_OscConfig+0x298>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	0797      	lsls	r7, r2, #30
 80023c8:	d405      	bmi.n	80023d6 <HAL_RCC_OscConfig+0xce>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ca:	f000 fbb3 	bl	8002b34 <HAL_GetTick>
 80023ce:	1b40      	subs	r0, r0, r5
 80023d0:	2802      	cmp	r0, #2
 80023d2:	d9f6      	bls.n	80023c2 <HAL_RCC_OscConfig+0xba>
 80023d4:	e7c9      	b.n	800236a <HAL_RCC_OscConfig+0x62>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d6:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	21f8      	movs	r1, #248	; 0xf8
 80023da:	fa91 f1a1 	rbit	r1, r1
 80023de:	6923      	ldr	r3, [r4, #16]
 80023e0:	fab1 f181 	clz	r1, r1
 80023e4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80023e8:	408b      	lsls	r3, r1
 80023ea:	4313      	orrs	r3, r2
 80023ec:	4a6c      	ldr	r2, [pc, #432]	; (80025a0 <HAL_RCC_OscConfig+0x298>)
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	e00d      	b.n	800240e <HAL_RCC_OscConfig+0x106>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f000 fb9e 	bl	8002b34 <HAL_GetTick>
 80023f8:	4605      	mov	r5, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fa:	4b69      	ldr	r3, [pc, #420]	; (80025a0 <HAL_RCC_OscConfig+0x298>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	079e      	lsls	r6, r3, #30
 8002400:	d505      	bpl.n	800240e <HAL_RCC_OscConfig+0x106>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002402:	f000 fb97 	bl	8002b34 <HAL_GetTick>
 8002406:	1b40      	subs	r0, r0, r5
 8002408:	2802      	cmp	r0, #2
 800240a:	d9f6      	bls.n	80023fa <HAL_RCC_OscConfig+0xf2>
 800240c:	e7ad      	b.n	800236a <HAL_RCC_OscConfig+0x62>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800240e:	6823      	ldr	r3, [r4, #0]
 8002410:	0718      	lsls	r0, r3, #28
 8002412:	d403      	bmi.n	800241c <HAL_RCC_OscConfig+0x114>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002414:	6823      	ldr	r3, [r4, #0]
 8002416:	0759      	lsls	r1, r3, #29
 8002418:	d544      	bpl.n	80024a4 <HAL_RCC_OscConfig+0x19c>
 800241a:	e01f      	b.n	800245c <HAL_RCC_OscConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800241c:	6962      	ldr	r2, [r4, #20]
 800241e:	4b63      	ldr	r3, [pc, #396]	; (80025ac <HAL_RCC_OscConfig+0x2a4>)
 8002420:	b172      	cbz	r2, 8002440 <HAL_RCC_OscConfig+0x138>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002422:	2201      	movs	r2, #1
 8002424:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002426:	f000 fb85 	bl	8002b34 <HAL_GetTick>
 800242a:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242c:	4b5c      	ldr	r3, [pc, #368]	; (80025a0 <HAL_RCC_OscConfig+0x298>)
 800242e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002430:	079a      	lsls	r2, r3, #30
 8002432:	d4ef      	bmi.n	8002414 <HAL_RCC_OscConfig+0x10c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002434:	f000 fb7e 	bl	8002b34 <HAL_GetTick>
 8002438:	1b40      	subs	r0, r0, r5
 800243a:	2802      	cmp	r0, #2
 800243c:	d9f6      	bls.n	800242c <HAL_RCC_OscConfig+0x124>
 800243e:	e794      	b.n	800236a <HAL_RCC_OscConfig+0x62>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002440:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002442:	f000 fb77 	bl	8002b34 <HAL_GetTick>
 8002446:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002448:	4b55      	ldr	r3, [pc, #340]	; (80025a0 <HAL_RCC_OscConfig+0x298>)
 800244a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800244c:	079b      	lsls	r3, r3, #30
 800244e:	d5e1      	bpl.n	8002414 <HAL_RCC_OscConfig+0x10c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002450:	f000 fb70 	bl	8002b34 <HAL_GetTick>
 8002454:	1b40      	subs	r0, r0, r5
 8002456:	2802      	cmp	r0, #2
 8002458:	d9f6      	bls.n	8002448 <HAL_RCC_OscConfig+0x140>
 800245a:	e786      	b.n	800236a <HAL_RCC_OscConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800245c:	2300      	movs	r3, #0
 800245e:	9301      	str	r3, [sp, #4]
 8002460:	4b4f      	ldr	r3, [pc, #316]	; (80025a0 <HAL_RCC_OscConfig+0x298>)
 8002462:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002464:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002468:	641a      	str	r2, [r3, #64]	; 0x40
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002470:	9301      	str	r3, [sp, #4]
 8002472:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002474:	4b4e      	ldr	r3, [pc, #312]	; (80025b0 <HAL_RCC_OscConfig+0x2a8>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800247c:	601a      	str	r2, [r3, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 800247e:	f000 fb59 	bl	8002b34 <HAL_GetTick>
 8002482:	4605      	mov	r5, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002484:	4b4a      	ldr	r3, [pc, #296]	; (80025b0 <HAL_RCC_OscConfig+0x2a8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	05df      	lsls	r7, r3, #23
 800248a:	d50e      	bpl.n	80024aa <HAL_RCC_OscConfig+0x1a2>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800248c:	4b49      	ldr	r3, [pc, #292]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 800248e:	7a22      	ldrb	r2, [r4, #8]
 8002490:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002492:	68a3      	ldr	r3, [r4, #8]
 8002494:	b1bb      	cbz	r3, 80024c6 <HAL_RCC_OscConfig+0x1be>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002496:	f000 fb4d 	bl	8002b34 <HAL_GetTick>
 800249a:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249c:	4b40      	ldr	r3, [pc, #256]	; (80025a0 <HAL_RCC_OscConfig+0x298>)
 800249e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a0:	079e      	lsls	r6, r3, #30
 80024a2:	d508      	bpl.n	80024b6 <HAL_RCC_OscConfig+0x1ae>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024a4:	69a3      	ldr	r3, [r4, #24]
 80024a6:	b9eb      	cbnz	r3, 80024e4 <HAL_RCC_OscConfig+0x1dc>
 80024a8:	e05c      	b.n	8002564 <HAL_RCC_OscConfig+0x25c>
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80024aa:	f000 fb43 	bl	8002b34 <HAL_GetTick>
 80024ae:	1b40      	subs	r0, r0, r5
 80024b0:	2802      	cmp	r0, #2
 80024b2:	d9e7      	bls.n	8002484 <HAL_RCC_OscConfig+0x17c>
 80024b4:	e759      	b.n	800236a <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b6:	f000 fb3d 	bl	8002b34 <HAL_GetTick>
 80024ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80024be:	1b40      	subs	r0, r0, r5
 80024c0:	4298      	cmp	r0, r3
 80024c2:	d9eb      	bls.n	800249c <HAL_RCC_OscConfig+0x194>
 80024c4:	e751      	b.n	800236a <HAL_RCC_OscConfig+0x62>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c6:	f000 fb35 	bl	8002b34 <HAL_GetTick>
 80024ca:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024cc:	4b34      	ldr	r3, [pc, #208]	; (80025a0 <HAL_RCC_OscConfig+0x298>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d0:	0798      	lsls	r0, r3, #30
 80024d2:	d5e7      	bpl.n	80024a4 <HAL_RCC_OscConfig+0x19c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024d4:	f000 fb2e 	bl	8002b34 <HAL_GetTick>
 80024d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80024dc:	1b40      	subs	r0, r0, r5
 80024de:	4298      	cmp	r0, r3
 80024e0:	d9f4      	bls.n	80024cc <HAL_RCC_OscConfig+0x1c4>
 80024e2:	e742      	b.n	800236a <HAL_RCC_OscConfig+0x62>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024e4:	4a2e      	ldr	r2, [pc, #184]	; (80025a0 <HAL_RCC_OscConfig+0x298>)
 80024e6:	6892      	ldr	r2, [r2, #8]
 80024e8:	f002 020c 	and.w	r2, r2, #12
 80024ec:	2a08      	cmp	r2, #8
 80024ee:	f43f af29 	beq.w	8002344 <HAL_RCC_OscConfig+0x3c>
 80024f2:	4d31      	ldr	r5, [pc, #196]	; (80025b8 <HAL_RCC_OscConfig+0x2b0>)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	f04f 0300 	mov.w	r3, #0
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fa:	602b      	str	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024fc:	d140      	bne.n	8002580 <HAL_RCC_OscConfig+0x278>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fe:	f000 fb19 	bl	8002b34 <HAL_GetTick>
 8002502:	4606      	mov	r6, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002504:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <HAL_RCC_OscConfig+0x298>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	0199      	lsls	r1, r3, #6
 800250a:	d42d      	bmi.n	8002568 <HAL_RCC_OscConfig+0x260>
 800250c:	f647 7ec0 	movw	lr, #32704	; 0x7fc0
 8002510:	fa9e feae 	rbit	lr, lr
 8002514:	f44f 3740 	mov.w	r7, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002518:	fabe fe8e 	clz	lr, lr
 800251c:	fa97 f7a7 	rbit	r7, r7
 8002520:	f04f 6670 	mov.w	r6, #251658240	; 0xf000000
 8002524:	fab7 f787 	clz	r7, r7
 8002528:	fa96 f6a6 	rbit	r6, r6
 800252c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800252e:	6a20      	ldr	r0, [r4, #32]
 8002530:	69e1      	ldr	r1, [r4, #28]
 8002532:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002534:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8002536:	085b      	lsrs	r3, r3, #1
 8002538:	4301      	orrs	r1, r0
 800253a:	fa02 f20e 	lsl.w	r2, r2, lr
 800253e:	3b01      	subs	r3, #1
 8002540:	430a      	orrs	r2, r1
 8002542:	40bb      	lsls	r3, r7
 8002544:	fab6 f686 	clz	r6, r6
 8002548:	431a      	orrs	r2, r3
 800254a:	40b4      	lsls	r4, r6
 800254c:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <HAL_RCC_OscConfig+0x298>)
 800254e:	4322      	orrs	r2, r4
 8002550:	605a      	str	r2, [r3, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002552:	2301      	movs	r3, #1
 8002554:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002556:	f000 faed 	bl	8002b34 <HAL_GetTick>
 800255a:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255c:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <HAL_RCC_OscConfig+0x298>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	019a      	lsls	r2, r3, #6
 8002562:	d507      	bpl.n	8002574 <HAL_RCC_OscConfig+0x26c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002564:	2000      	movs	r0, #0
 8002566:	e018      	b.n	800259a <HAL_RCC_OscConfig+0x292>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002568:	f000 fae4 	bl	8002b34 <HAL_GetTick>
 800256c:	1b80      	subs	r0, r0, r6
 800256e:	2802      	cmp	r0, #2
 8002570:	d9c8      	bls.n	8002504 <HAL_RCC_OscConfig+0x1fc>
 8002572:	e6fa      	b.n	800236a <HAL_RCC_OscConfig+0x62>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002574:	f000 fade 	bl	8002b34 <HAL_GetTick>
 8002578:	1b00      	subs	r0, r0, r4
 800257a:	2802      	cmp	r0, #2
 800257c:	d9ee      	bls.n	800255c <HAL_RCC_OscConfig+0x254>
 800257e:	e6f4      	b.n	800236a <HAL_RCC_OscConfig+0x62>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002580:	f000 fad8 	bl	8002b34 <HAL_GetTick>
 8002584:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_RCC_OscConfig+0x298>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	019b      	lsls	r3, r3, #6
 800258c:	d5ea      	bpl.n	8002564 <HAL_RCC_OscConfig+0x25c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800258e:	f000 fad1 	bl	8002b34 <HAL_GetTick>
 8002592:	1b00      	subs	r0, r0, r4
 8002594:	2802      	cmp	r0, #2
 8002596:	d9f6      	bls.n	8002586 <HAL_RCC_OscConfig+0x27e>
 8002598:	e6e7      	b.n	800236a <HAL_RCC_OscConfig+0x62>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800259a:	b003      	add	sp, #12
 800259c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800259e:	bf00      	nop
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40023802 	.word	0x40023802
 80025a8:	42470000 	.word	0x42470000
 80025ac:	42470e80 	.word	0x42470e80
 80025b0:	40007000 	.word	0x40007000
 80025b4:	40023870 	.word	0x40023870
 80025b8:	42470060 	.word	0x42470060

080025bc <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80025bc:	4b4e      	ldr	r3, [pc, #312]	; (80026f8 <HAL_RCC_ClockConfig+0x13c>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	f002 020f 	and.w	r2, r2, #15
 80025c4:	4291      	cmp	r1, r2
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c6:	b570      	push	{r4, r5, r6, lr}
 80025c8:	4604      	mov	r4, r0
 80025ca:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80025cc:	d80a      	bhi.n	80025e4 <HAL_RCC_ClockConfig+0x28>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ce:	6823      	ldr	r3, [r4, #0]
 80025d0:	0798      	lsls	r0, r3, #30
 80025d2:	d510      	bpl.n	80025f6 <HAL_RCC_ClockConfig+0x3a>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d4:	4a49      	ldr	r2, [pc, #292]	; (80026fc <HAL_RCC_ClockConfig+0x140>)
 80025d6:	68a1      	ldr	r1, [r4, #8]
 80025d8:	6890      	ldr	r0, [r2, #8]
 80025da:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 80025de:	4301      	orrs	r1, r0
 80025e0:	6091      	str	r1, [r2, #8]
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_ClockConfig+0x3a>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e4:	b2ca      	uxtb	r2, r1
 80025e6:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	428b      	cmp	r3, r1
 80025f0:	d0ed      	beq.n	80025ce <HAL_RCC_ClockConfig+0x12>
    {
      return HAL_ERROR;
 80025f2:	2001      	movs	r0, #1
 80025f4:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025f6:	07d9      	lsls	r1, r3, #31
 80025f8:	d406      	bmi.n	8002608 <HAL_RCC_ClockConfig+0x4c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80025fa:	4b3f      	ldr	r3, [pc, #252]	; (80026f8 <HAL_RCC_ClockConfig+0x13c>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	f002 020f 	and.w	r2, r2, #15
 8002602:	4295      	cmp	r5, r2
 8002604:	d357      	bcc.n	80026b6 <HAL_RCC_ClockConfig+0xfa>
 8002606:	e05d      	b.n	80026c4 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002608:	6863      	ldr	r3, [r4, #4]
 800260a:	4a3c      	ldr	r2, [pc, #240]	; (80026fc <HAL_RCC_ClockConfig+0x140>)
 800260c:	2b01      	cmp	r3, #1
 800260e:	d103      	bne.n	8002618 <HAL_RCC_ClockConfig+0x5c>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002610:	6812      	ldr	r2, [r2, #0]
 8002612:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002616:	e008      	b.n	800262a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8002618:	1e99      	subs	r1, r3, #2
 800261a:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261c:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800261e:	d802      	bhi.n	8002626 <HAL_RCC_ClockConfig+0x6a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002620:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002624:	e001      	b.n	800262a <HAL_RCC_ClockConfig+0x6e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002626:	f012 0f02 	tst.w	r2, #2
 800262a:	d0e2      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x36>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800262c:	4a33      	ldr	r2, [pc, #204]	; (80026fc <HAL_RCC_ClockConfig+0x140>)
 800262e:	6891      	ldr	r1, [r2, #8]
 8002630:	f021 0103 	bic.w	r1, r1, #3
 8002634:	430b      	orrs	r3, r1
 8002636:	6093      	str	r3, [r2, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002638:	f000 fa7c 	bl	8002b34 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263c:	6863      	ldr	r3, [r4, #4]
 800263e:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002640:	4606      	mov	r6, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002642:	d10e      	bne.n	8002662 <HAL_RCC_ClockConfig+0xa6>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002644:	4b2d      	ldr	r3, [pc, #180]	; (80026fc <HAL_RCC_ClockConfig+0x140>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	2b04      	cmp	r3, #4
 800264e:	d0d4      	beq.n	80025fa <HAL_RCC_ClockConfig+0x3e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002650:	f000 fa70 	bl	8002b34 <HAL_GetTick>
 8002654:	f241 3388 	movw	r3, #5000	; 0x1388
 8002658:	1b80      	subs	r0, r0, r6
 800265a:	4298      	cmp	r0, r3
 800265c:	d9f2      	bls.n	8002644 <HAL_RCC_ClockConfig+0x88>
        {
          return HAL_TIMEOUT;
 800265e:	2003      	movs	r0, #3
 8002660:	bd70      	pop	{r4, r5, r6, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002662:	2b02      	cmp	r3, #2
 8002664:	d10d      	bne.n	8002682 <HAL_RCC_ClockConfig+0xc6>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002666:	4b25      	ldr	r3, [pc, #148]	; (80026fc <HAL_RCC_ClockConfig+0x140>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b08      	cmp	r3, #8
 8002670:	d0c3      	beq.n	80025fa <HAL_RCC_ClockConfig+0x3e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002672:	f000 fa5f 	bl	8002b34 <HAL_GetTick>
 8002676:	f241 3388 	movw	r3, #5000	; 0x1388
 800267a:	1b80      	subs	r0, r0, r6
 800267c:	4298      	cmp	r0, r3
 800267e:	d9f2      	bls.n	8002666 <HAL_RCC_ClockConfig+0xaa>
 8002680:	e7ed      	b.n	800265e <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8002682:	2b03      	cmp	r3, #3
 8002684:	d005      	beq.n	8002692 <HAL_RCC_ClockConfig+0xd6>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002686:	4b1d      	ldr	r3, [pc, #116]	; (80026fc <HAL_RCC_ClockConfig+0x140>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f013 0f0c 	tst.w	r3, #12
 800268e:	d10a      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xea>
 8002690:	e7b3      	b.n	80025fa <HAL_RCC_ClockConfig+0x3e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8002692:	4b1a      	ldr	r3, [pc, #104]	; (80026fc <HAL_RCC_ClockConfig+0x140>)
 8002694:	689b      	ldr	r3, [r3, #8]
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002696:	f000 fa4d 	bl	8002b34 <HAL_GetTick>
 800269a:	f241 3388 	movw	r3, #5000	; 0x1388
 800269e:	1b80      	subs	r0, r0, r6
 80026a0:	4298      	cmp	r0, r3
 80026a2:	d9f6      	bls.n	8002692 <HAL_RCC_ClockConfig+0xd6>
 80026a4:	e7db      	b.n	800265e <HAL_RCC_ClockConfig+0xa2>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a6:	f000 fa45 	bl	8002b34 <HAL_GetTick>
 80026aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80026ae:	1b80      	subs	r0, r0, r6
 80026b0:	4298      	cmp	r0, r3
 80026b2:	d9e8      	bls.n	8002686 <HAL_RCC_ClockConfig+0xca>
 80026b4:	e7d3      	b.n	800265e <HAL_RCC_ClockConfig+0xa2>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b6:	b2ea      	uxtb	r2, r5
 80026b8:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 030f 	and.w	r3, r3, #15
 80026c0:	42ab      	cmp	r3, r5
 80026c2:	d196      	bne.n	80025f2 <HAL_RCC_ClockConfig+0x36>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c4:	6823      	ldr	r3, [r4, #0]
 80026c6:	075a      	lsls	r2, r3, #29
 80026c8:	d506      	bpl.n	80026d8 <HAL_RCC_ClockConfig+0x11c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ca:	4a0c      	ldr	r2, [pc, #48]	; (80026fc <HAL_RCC_ClockConfig+0x140>)
 80026cc:	68e1      	ldr	r1, [r4, #12]
 80026ce:	6890      	ldr	r0, [r2, #8]
 80026d0:	f420 50e0 	bic.w	r0, r0, #7168	; 0x1c00
 80026d4:	4301      	orrs	r1, r0
 80026d6:	6091      	str	r1, [r2, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d8:	071b      	lsls	r3, r3, #28
 80026da:	d507      	bpl.n	80026ec <HAL_RCC_ClockConfig+0x130>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026dc:	4b07      	ldr	r3, [pc, #28]	; (80026fc <HAL_RCC_ClockConfig+0x140>)
 80026de:	6921      	ldr	r1, [r4, #16]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026e6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80026ea:	609a      	str	r2, [r3, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80026ec:	2000      	movs	r0, #0
 80026ee:	f7fe fa75 	bl	8000bdc <HAL_InitTick>
  
  return HAL_OK;
 80026f2:	2000      	movs	r0, #0
}
 80026f4:	bd70      	pop	{r4, r5, r6, pc}
 80026f6:	bf00      	nop
 80026f8:	40023c00 	.word	0x40023c00
 80026fc:	40023800 	.word	0x40023800

08002700 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002700:	4b1f      	ldr	r3, [pc, #124]	; (8002780 <HAL_RCC_GetSysClockFreq+0x80>)
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	f002 020c 	and.w	r2, r2, #12
 8002708:	2a04      	cmp	r2, #4
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800270a:	b510      	push	{r4, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800270c:	d036      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0x7c>
 800270e:	2a08      	cmp	r2, #8
 8002710:	d001      	beq.n	8002716 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002712:	481c      	ldr	r0, [pc, #112]	; (8002784 <HAL_RCC_GetSysClockFreq+0x84>)
 8002714:	bd10      	pop	{r4, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002716:	6859      	ldr	r1, [r3, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002718:	685a      	ldr	r2, [r3, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800271a:	685c      	ldr	r4, [r3, #4]
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800271c:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002720:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002724:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002728:	d00c      	beq.n	8002744 <HAL_RCC_GetSysClockFreq+0x44>
 800272a:	fa92 f2a2 	rbit	r2, r2
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800272e:	fab2 f382 	clz	r3, r2
 8002732:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002736:	4022      	ands	r2, r4
 8002738:	40da      	lsrs	r2, r3
 800273a:	4b13      	ldr	r3, [pc, #76]	; (8002788 <HAL_RCC_GetSysClockFreq+0x88>)
 800273c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002740:	4353      	muls	r3, r2
 8002742:	e00b      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x5c>
 8002744:	fa92 f2a2 	rbit	r2, r2
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8002748:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800274c:	480d      	ldr	r0, [pc, #52]	; (8002784 <HAL_RCC_GetSysClockFreq+0x84>)
 800274e:	fab2 f282 	clz	r2, r2
 8002752:	4023      	ands	r3, r4
 8002754:	40d3      	lsrs	r3, r2
 8002756:	fbb0 f1f1 	udiv	r1, r0, r1
 800275a:	434b      	muls	r3, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 800275c:	4a08      	ldr	r2, [pc, #32]	; (8002780 <HAL_RCC_GetSysClockFreq+0x80>)
 800275e:	6850      	ldr	r0, [r2, #4]
 8002760:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002764:	fa92 f2a2 	rbit	r2, r2
 8002768:	fab2 f282 	clz	r2, r2
 800276c:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8002770:	40d0      	lsrs	r0, r2
 8002772:	3001      	adds	r0, #1
 8002774:	0040      	lsls	r0, r0, #1
      
      sysclockfreq = pllvco/pllp;
 8002776:	fbb3 f0f0 	udiv	r0, r3, r0
      break;
 800277a:	bd10      	pop	{r4, pc}
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800277c:	4802      	ldr	r0, [pc, #8]	; (8002788 <HAL_RCC_GetSysClockFreq+0x88>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800277e:	bd10      	pop	{r4, pc}
 8002780:	40023800 	.word	0x40023800
 8002784:	00f42400 	.word	0x00f42400
 8002788:	007a1200 	.word	0x007a1200

0800278c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800278c:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800278e:	f7ff ffb7 	bl	8002700 <HAL_RCC_GetSysClockFreq>
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_RCC_GetHCLKFreq+0x28>)
 8002794:	22f0      	movs	r2, #240	; 0xf0
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	fa92 f2a2 	rbit	r2, r2
 800279c:	fab2 f282 	clz	r2, r2
 80027a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027a4:	40d3      	lsrs	r3, r2
 80027a6:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80027a8:	5cd3      	ldrb	r3, [r2, r3]
 80027aa:	40d8      	lsrs	r0, r3
 80027ac:	4b03      	ldr	r3, [pc, #12]	; (80027bc <HAL_RCC_GetHCLKFreq+0x30>)
 80027ae:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80027b0:	bd08      	pop	{r3, pc}
 80027b2:	bf00      	nop
 80027b4:	40023800 	.word	0x40023800
 80027b8:	08002c9a 	.word	0x08002c9a
 80027bc:	20000008 	.word	0x20000008

080027c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 80027c0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80027c2:	f7ff ffe3 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027c6:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027c8:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	fa92 f2a2 	rbit	r2, r2
 80027d2:	fab2 f282 	clz	r2, r2
 80027d6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80027da:	40d3      	lsrs	r3, r2
 80027dc:	4a02      	ldr	r2, [pc, #8]	; (80027e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027de:	5cd3      	ldrb	r3, [r2, r3]
}
 80027e0:	40d8      	lsrs	r0, r3
 80027e2:	bd08      	pop	{r3, pc}
 80027e4:	40023800 	.word	0x40023800
 80027e8:	08002c9a 	.word	0x08002c9a

080027ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027ec:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80027ee:	f7ff ffcd 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027f2:	4b07      	ldr	r3, [pc, #28]	; (8002810 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027f4:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	fa92 f2a2 	rbit	r2, r2
 80027fe:	fab2 f282 	clz	r2, r2
 8002802:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002806:	40d3      	lsrs	r3, r2
 8002808:	4a02      	ldr	r2, [pc, #8]	; (8002814 <HAL_RCC_GetPCLK2Freq+0x28>)
 800280a:	5cd3      	ldrb	r3, [r2, r3]
} 
 800280c:	40d8      	lsrs	r0, r3
 800280e:	bd08      	pop	{r3, pc}
 8002810:	40023800 	.word	0x40023800
 8002814:	08002c9a 	.word	0x08002c9a

08002818 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002818:	230f      	movs	r3, #15
 800281a:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCC_GetClockConfig+0x34>)
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	f002 0203 	and.w	r2, r2, #3
 8002824:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800282c:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002834:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800283c:	08db      	lsrs	r3, r3, #3
 800283e:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002840:	4b03      	ldr	r3, [pc, #12]	; (8002850 <HAL_RCC_GetClockConfig+0x38>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 030f 	and.w	r3, r3, #15
 8002848:	600b      	str	r3, [r1, #0]
 800284a:	4770      	bx	lr
 800284c:	40023800 	.word	0x40023800
 8002850:	40023c00 	.word	0x40023c00

08002854 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002854:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002858:	680f      	ldr	r7, [r1, #0]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800285a:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 800285c:	2201      	movs	r2, #1
 800285e:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002860:	ea02 0407 	and.w	r4, r2, r7

    if(iocurrent == ioposition)
 8002864:	4294      	cmp	r4, r2
 8002866:	f040 80bb 	bne.w	80029e0 <HAL_GPIO_Init+0x18c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800286a:	684a      	ldr	r2, [r1, #4]
 800286c:	f022 0610 	bic.w	r6, r2, #16
 8002870:	2e02      	cmp	r6, #2
 8002872:	d116      	bne.n	80028a2 <HAL_GPIO_Init+0x4e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002874:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8002878:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800287c:	f003 0807 	and.w	r8, r3, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002880:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8002884:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8002888:	f04f 090f 	mov.w	r9, #15
 800288c:	fa09 f908 	lsl.w	r9, r9, r8
 8002890:	ea25 0909 	bic.w	r9, r5, r9
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002894:	690d      	ldr	r5, [r1, #16]
 8002896:	fa05 f808 	lsl.w	r8, r5, r8
 800289a:	ea49 0508 	orr.w	r5, r9, r8
        GPIOx->AFR[position >> 3U] = temp;
 800289e:	f8cc 5020 	str.w	r5, [ip, #32]
 80028a2:	005d      	lsls	r5, r3, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028a4:	f04f 0c03 	mov.w	ip, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028a8:	f8d0 9000 	ldr.w	r9, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028ac:	fa0c fc05 	lsl.w	ip, ip, r5
 80028b0:	ea6f 0c0c 	mvn.w	ip, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028b4:	f002 0803 	and.w	r8, r2, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028b8:	ea0c 0909 	and.w	r9, ip, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028bc:	fa08 f805 	lsl.w	r8, r8, r5
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028c0:	3e01      	subs	r6, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028c2:	ea49 0808 	orr.w	r8, r9, r8
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028c6:	2e01      	cmp	r6, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 80028c8:	f8c0 8000 	str.w	r8, [r0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028cc:	d810      	bhi.n	80028f0 <HAL_GPIO_Init+0x9c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ce:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028d0:	ea0c 0806 	and.w	r8, ip, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028d4:	68ce      	ldr	r6, [r1, #12]
 80028d6:	40ae      	lsls	r6, r5
 80028d8:	ea48 0606 	orr.w	r6, r8, r6
        GPIOx->OSPEEDR = temp;
 80028dc:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028de:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e0:	ea26 0804 	bic.w	r8, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028e4:	f3c2 1600 	ubfx	r6, r2, #4, #1
 80028e8:	409e      	lsls	r6, r3
 80028ea:	ea48 0606 	orr.w	r6, r8, r6
        GPIOx->OTYPER = temp;
 80028ee:	6046      	str	r6, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028f0:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028f2:	ea0c 0c06 	and.w	ip, ip, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f6:	688e      	ldr	r6, [r1, #8]
 80028f8:	40ae      	lsls	r6, r5
 80028fa:	ea4c 0506 	orr.w	r5, ip, r6
      GPIOx->PUPDR = temp;
 80028fe:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002900:	00d5      	lsls	r5, r2, #3
 8002902:	d56d      	bpl.n	80029e0 <HAL_GPIO_Init+0x18c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002904:	4e3a      	ldr	r6, [pc, #232]	; (80029f0 <HAL_GPIO_Init+0x19c>)
 8002906:	2500      	movs	r5, #0
 8002908:	9501      	str	r5, [sp, #4]
 800290a:	f8d6 c044 	ldr.w	ip, [r6, #68]	; 0x44
 800290e:	f44c 4c80 	orr.w	ip, ip, #16384	; 0x4000
 8002912:	f8c6 c044 	str.w	ip, [r6, #68]	; 0x44
 8002916:	6c76      	ldr	r6, [r6, #68]	; 0x44
 8002918:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800291c:	9601      	str	r6, [sp, #4]
 800291e:	9e01      	ldr	r6, [sp, #4]
 8002920:	f023 0603 	bic.w	r6, r3, #3
 8002924:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002928:	f506 369c 	add.w	r6, r6, #79872	; 0x13800

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800292c:	f003 0c03 	and.w	ip, r3, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
 8002930:	f8d6 9008 	ldr.w	r9, [r6, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002934:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002938:	f04f 080f 	mov.w	r8, #15
 800293c:	fa08 f80c 	lsl.w	r8, r8, ip
 8002940:	ea29 0808 	bic.w	r8, r9, r8
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002944:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80029f8 <HAL_GPIO_Init+0x1a4>
 8002948:	4548      	cmp	r0, r9
 800294a:	d019      	beq.n	8002980 <HAL_GPIO_Init+0x12c>
 800294c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8002950:	f505 3501 	add.w	r5, r5, #132096	; 0x20400
 8002954:	42a8      	cmp	r0, r5
 8002956:	d00e      	beq.n	8002976 <HAL_GPIO_Init+0x122>
 8002958:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800295c:	42a8      	cmp	r0, r5
 800295e:	d00c      	beq.n	800297a <HAL_GPIO_Init+0x126>
 8002960:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002964:	42a8      	cmp	r0, r5
 8002966:	d00a      	beq.n	800297e <HAL_GPIO_Init+0x12a>
 8002968:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800296c:	42a8      	cmp	r0, r5
 800296e:	bf14      	ite	ne
 8002970:	2505      	movne	r5, #5
 8002972:	2504      	moveq	r5, #4
 8002974:	e004      	b.n	8002980 <HAL_GPIO_Init+0x12c>
 8002976:	2501      	movs	r5, #1
 8002978:	e002      	b.n	8002980 <HAL_GPIO_Init+0x12c>
 800297a:	2502      	movs	r5, #2
 800297c:	e000      	b.n	8002980 <HAL_GPIO_Init+0x12c>
 800297e:	2503      	movs	r5, #3
 8002980:	fa05 f50c 	lsl.w	r5, r5, ip
 8002984:	ea45 0508 	orr.w	r5, r5, r8
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002988:	60b5      	str	r5, [r6, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800298a:	4e1a      	ldr	r6, [pc, #104]	; (80029f4 <HAL_GPIO_Init+0x1a0>)
 800298c:	f8d6 c000 	ldr.w	ip, [r6]
        temp &= ~((uint32_t)iocurrent);
 8002990:	43e5      	mvns	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002992:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        {
          temp |= iocurrent;
 8002996:	bf14      	ite	ne
 8002998:	ea44 0c0c 	orrne.w	ip, r4, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 800299c:	ea05 0c0c 	andeq.w	ip, r5, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80029a0:	f8c6 c000 	str.w	ip, [r6]

        temp = EXTI->EMR;
 80029a4:	6876      	ldr	r6, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029a6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        {
          temp |= iocurrent;
 80029aa:	bf14      	ite	ne
 80029ac:	ea44 0c06 	orrne.w	ip, r4, r6
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 80029b0:	ea05 0c06 	andeq.w	ip, r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80029b4:	4e0f      	ldr	r6, [pc, #60]	; (80029f4 <HAL_GPIO_Init+0x1a0>)
 80029b6:	f8c6 c004 	str.w	ip, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ba:	f8d6 c008 	ldr.w	ip, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029be:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        {
          temp |= iocurrent;
 80029c2:	bf14      	ite	ne
 80029c4:	ea44 0c0c 	orrne.w	ip, r4, ip
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 80029c8:	ea05 0c0c 	andeq.w	ip, r5, ip
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80029cc:	f8c6 c008 	str.w	ip, [r6, #8]

        temp = EXTI->FTSR;
 80029d0:	68f6      	ldr	r6, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029d2:	0292      	lsls	r2, r2, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80029d4:	4a07      	ldr	r2, [pc, #28]	; (80029f4 <HAL_GPIO_Init+0x1a0>)
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 80029d6:	bf54      	ite	pl
 80029d8:	ea05 0406 	andpl.w	r4, r5, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 80029dc:	4334      	orrmi	r4, r6
        }
        EXTI->FTSR = temp;
 80029de:	60d4      	str	r4, [r2, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029e0:	3301      	adds	r3, #1
 80029e2:	2b10      	cmp	r3, #16
 80029e4:	f47f af3a 	bne.w	800285c <HAL_GPIO_Init+0x8>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 80029e8:	b003      	add	sp, #12
 80029ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40013c00 	.word	0x40013c00
 80029f8:	40020000 	.word	0x40020000

080029fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029fc:	b902      	cbnz	r2, 8002a00 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029fe:	0409      	lsls	r1, r1, #16
 8002a00:	6181      	str	r1, [r0, #24]
 8002a02:	4770      	bx	lr

08002a04 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002a04:	6943      	ldr	r3, [r0, #20]
 8002a06:	4059      	eors	r1, r3
 8002a08:	6141      	str	r1, [r0, #20]
 8002a0a:	4770      	bx	lr

08002a0c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a0c:	4a07      	ldr	r2, [pc, #28]	; (8002a2c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002a0e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a10:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a14:	041b      	lsls	r3, r3, #16
 8002a16:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a20:	f000 0007 	and.w	r0, r0, #7

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8002a24:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8002a28:	60d3      	str	r3, [r2, #12]
 8002a2a:	4770      	bx	lr
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a30:	4b16      	ldr	r3, [pc, #88]	; (8002a8c <HAL_NVIC_SetPriority+0x5c>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a38:	b570      	push	{r4, r5, r6, lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a3a:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a3c:	f1c3 0407 	rsb	r4, r3, #7
 8002a40:	2c04      	cmp	r4, #4
 8002a42:	bf28      	it	cs
 8002a44:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a46:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a48:	f04f 0501 	mov.w	r5, #1
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a4c:	bf8c      	ite	hi
 8002a4e:	3b03      	subhi	r3, #3
 8002a50:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a52:	fa05 f404 	lsl.w	r4, r5, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a56:	fa05 f603 	lsl.w	r6, r5, r3

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a5a:	3c01      	subs	r4, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a5c:	3e01      	subs	r6, #1

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a5e:	4021      	ands	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a60:	4032      	ands	r2, r6

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a62:	fa01 f303 	lsl.w	r3, r1, r3
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002a66:	4313      	orrs	r3, r2
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8002a68:	2800      	cmp	r0, #0
 8002a6a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002a6e:	da05      	bge.n	8002a7c <HAL_NVIC_SetPriority+0x4c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	f000 000f 	and.w	r0, r0, #15
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_NVIC_SetPriority+0x60>)
 8002a78:	541a      	strb	r2, [r3, r0]
 8002a7a:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002a80:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
 8002a8a:	bd70      	pop	{r4, r5, r6, pc}
 8002a8c:	e000ed00 	.word	0xe000ed00
 8002a90:	e000ed14 	.word	0xe000ed14

08002a94 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002a94:	0942      	lsrs	r2, r0, #5
 8002a96:	2301      	movs	r3, #1
 8002a98:	f000 001f 	and.w	r0, r0, #31
 8002a9c:	fa03 f000 	lsl.w	r0, r3, r0
 8002aa0:	4b01      	ldr	r3, [pc, #4]	; (8002aa8 <HAL_NVIC_EnableIRQ+0x14>)
 8002aa2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002aa6:	4770      	bx	lr
 8002aa8:	e000e100 	.word	0xe000e100

08002aac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aac:	3801      	subs	r0, #1
 8002aae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002ab2:	d20a      	bcs.n	8002aca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab6:	4a07      	ldr	r2, [pc, #28]	; (8002ad4 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ab8:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aba:	21f0      	movs	r1, #240	; 0xf0
 8002abc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ac0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ac2:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ac4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	e000e010 	.word	0xe000e010
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002ad8:	4b04      	ldr	r3, [pc, #16]	; (8002aec <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002ada:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002adc:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002ade:	bf0c      	ite	eq
 8002ae0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002ae4:	f022 0204 	bicne.w	r2, r2, #4
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	4770      	bx	lr
 8002aec:	e000e010 	.word	0xe000e010

08002af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002af0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002af2:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_Init+0x30>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002afa:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b02:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b0a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b0c:	2003      	movs	r0, #3
 8002b0e:	f7ff ff7d 	bl	8002a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b12:	2000      	movs	r0, #0
 8002b14:	f7fe f862 	bl	8000bdc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002b18:	f7fe f89e 	bl	8000c58 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	bd08      	pop	{r3, pc}
 8002b20:	40023c00 	.word	0x40023c00

08002b24 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8002b24:	4b02      	ldr	r3, [pc, #8]	; (8002b30 <HAL_IncTick+0xc>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	3201      	adds	r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	20003df0 	.word	0x20003df0

08002b34 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002b34:	4b01      	ldr	r3, [pc, #4]	; (8002b3c <HAL_GetTick+0x8>)
 8002b36:	6818      	ldr	r0, [r3, #0]
}
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	20003df0 	.word	0x20003df0

08002b40 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b40:	4a0f      	ldr	r2, [pc, #60]	; (8002b80 <SystemInit+0x40>)
 8002b42:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002b46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	; (8002b84 <SystemInit+0x44>)
 8002b50:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002b52:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002b54:	f041 0101 	orr.w	r1, r1, #1
 8002b58:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002b5a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002b5c:	6819      	ldr	r1, [r3, #0]
 8002b5e:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8002b62:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002b66:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002b68:	4907      	ldr	r1, [pc, #28]	; (8002b88 <SystemInit+0x48>)
 8002b6a:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002b6c:	6819      	ldr	r1, [r3, #0]
 8002b6e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002b72:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002b74:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b7a:	6093      	str	r3, [r2, #8]
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	e000ed00 	.word	0xe000ed00
 8002b84:	40023800 	.word	0x40023800
 8002b88:	24003010 	.word	0x24003010

08002b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b8c:	f8df d03c 	ldr.w	sp, [pc, #60]	; 8002bcc <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b92:	f000 b804 	b.w	8002b9e <LoopCopyDataInit>

08002b96 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b96:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 8002b98:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b9a:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b9c:	3104      	adds	r1, #4

08002b9e <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b9e:	480d      	ldr	r0, [pc, #52]	; (8002bd4 <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 8002ba0:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 8002ba2:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ba4:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ba6:	f4ff aff6 	bcc.w	8002b96 <CopyDataInit>
  ldr  r2, =_sbss
 8002baa:	4a0c      	ldr	r2, [pc, #48]	; (8002bdc <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 8002bac:	f000 b803 	b.w	8002bb6 <LoopFillZerobss>

08002bb0 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002bb0:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002bb2:	f842 3b04 	str.w	r3, [r2], #4

08002bb6 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 8002bb8:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002bba:	f4ff aff9 	bcc.w	8002bb0 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002bbe:	f7ff ffbf 	bl	8002b40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bc2:	f000 f811 	bl	8002be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bc6:	f7fe f919 	bl	8000dfc <main>
  bx  lr    
 8002bca:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bcc:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8002bd0:	08002cb4 	.word	0x08002cb4
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002bd4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002bd8:	2000000c 	.word	0x2000000c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8002bdc:	2000000c 	.word	0x2000000c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002be0:	20003df4 	.word	0x20003df4

08002be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002be4:	f7ff bffe 	b.w	8002be4 <ADC_IRQHandler>

08002be8 <__libc_init_array>:
 8002be8:	b570      	push	{r4, r5, r6, lr}
 8002bea:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <__libc_init_array+0x3c>)
 8002bec:	4d0e      	ldr	r5, [pc, #56]	; (8002c28 <__libc_init_array+0x40>)
 8002bee:	1aed      	subs	r5, r5, r3
 8002bf0:	10ad      	asrs	r5, r5, #2
 8002bf2:	2400      	movs	r4, #0
 8002bf4:	461e      	mov	r6, r3
 8002bf6:	42ac      	cmp	r4, r5
 8002bf8:	d004      	beq.n	8002c04 <__libc_init_array+0x1c>
 8002bfa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002bfe:	4790      	blx	r2
 8002c00:	3401      	adds	r4, #1
 8002c02:	e7f8      	b.n	8002bf6 <__libc_init_array+0xe>
 8002c04:	f000 f81e 	bl	8002c44 <_init>
 8002c08:	4d08      	ldr	r5, [pc, #32]	; (8002c2c <__libc_init_array+0x44>)
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <__libc_init_array+0x48>)
 8002c0c:	1aed      	subs	r5, r5, r3
 8002c0e:	10ad      	asrs	r5, r5, #2
 8002c10:	2400      	movs	r4, #0
 8002c12:	461e      	mov	r6, r3
 8002c14:	42ac      	cmp	r4, r5
 8002c16:	d004      	beq.n	8002c22 <__libc_init_array+0x3a>
 8002c18:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002c1c:	4790      	blx	r2
 8002c1e:	3401      	adds	r4, #1
 8002c20:	e7f8      	b.n	8002c14 <__libc_init_array+0x2c>
 8002c22:	bd70      	pop	{r4, r5, r6, pc}
 8002c24:	08002cac 	.word	0x08002cac
 8002c28:	08002cac 	.word	0x08002cac
 8002c2c:	08002cb0 	.word	0x08002cb0
 8002c30:	08002cac 	.word	0x08002cac

08002c34 <memset>:
 8002c34:	4402      	add	r2, r0
 8002c36:	4603      	mov	r3, r0
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d002      	beq.n	8002c42 <memset+0xe>
 8002c3c:	f803 1b01 	strb.w	r1, [r3], #1
 8002c40:	e7fa      	b.n	8002c38 <memset+0x4>
 8002c42:	4770      	bx	lr

08002c44 <_init>:
 8002c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c46:	bf00      	nop
 8002c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c4a:	bc08      	pop	{r3}
 8002c4c:	469e      	mov	lr, r3
 8002c4e:	4770      	bx	lr

08002c50 <_fini>:
 8002c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c52:	bf00      	nop
 8002c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c56:	bc08      	pop	{r3}
 8002c58:	469e      	mov	lr, r3
 8002c5a:	4770      	bx	lr
