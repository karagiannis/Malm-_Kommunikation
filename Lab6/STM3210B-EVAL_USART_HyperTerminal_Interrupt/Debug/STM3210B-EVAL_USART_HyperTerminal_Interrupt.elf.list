
STM3210B-EVAL_USART_HyperTerminal_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d2c  0800010c  0800010c  0000810c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08000e38  08000e38  00008e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08000e3c  08000e3c  00008e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000090  20000000  08000e40  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000050  20000090  08000ed0  00010090  2**2
                  ALLOC
  6 ._user_heap_stack 00000100  200000e0  08000ed0  000100e0  2**0
                  ALLOC
  7 .ARM.attributes 00000029  00000000  00000000  00010090  2**0
                  CONTENTS, READONLY
  8 .debug_info   000037ef  00000000  00000000  000100b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000b70  00000000  00000000  000138a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000470  00000000  00000000  00014418  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003e8  00000000  00000000  00014888  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000019a8  00000000  00000000  00014c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001991  00000000  00000000  00016618  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000082  00000000  00000000  00017fa9  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00000d1c  00000000  00000000  0001802c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08000e20 	.word	0x08000e20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4803      	ldr	r0, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	08000e20 	.word	0x08000e20
 8000148:	20000094 	.word	0x20000094

0800014c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000150:	4b15      	ldr	r3, [pc, #84]	; (80001a8 <SystemInit+0x5c>)
 8000152:	4a15      	ldr	r2, [pc, #84]	; (80001a8 <SystemInit+0x5c>)
 8000154:	6812      	ldr	r2, [r2, #0]
 8000156:	f042 0201 	orr.w	r2, r2, #1
 800015a:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800015c:	4a12      	ldr	r2, [pc, #72]	; (80001a8 <SystemInit+0x5c>)
 800015e:	4b12      	ldr	r3, [pc, #72]	; (80001a8 <SystemInit+0x5c>)
 8000160:	6859      	ldr	r1, [r3, #4]
 8000162:	4b12      	ldr	r3, [pc, #72]	; (80001ac <SystemInit+0x60>)
 8000164:	400b      	ands	r3, r1
 8000166:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000168:	4a0f      	ldr	r2, [pc, #60]	; (80001a8 <SystemInit+0x5c>)
 800016a:	4b0f      	ldr	r3, [pc, #60]	; (80001a8 <SystemInit+0x5c>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000176:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000178:	4b0b      	ldr	r3, [pc, #44]	; (80001a8 <SystemInit+0x5c>)
 800017a:	4a0b      	ldr	r2, [pc, #44]	; (80001a8 <SystemInit+0x5c>)
 800017c:	6812      	ldr	r2, [r2, #0]
 800017e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000182:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000184:	4b08      	ldr	r3, [pc, #32]	; (80001a8 <SystemInit+0x5c>)
 8000186:	4a08      	ldr	r2, [pc, #32]	; (80001a8 <SystemInit+0x5c>)
 8000188:	6852      	ldr	r2, [r2, #4]
 800018a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800018e:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000190:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <SystemInit+0x5c>)
 8000192:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000196:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000198:	f000 f80c 	bl	80001b4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <SystemInit+0x64>)
 800019e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80001a2:	609a      	str	r2, [r3, #8]
#endif 
}
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	40021000 	.word	0x40021000
 80001ac:	f8ff0000 	.word	0xf8ff0000
 80001b0:	e000ed00 	.word	0xe000ed00

080001b4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80001b8:	f000 f802 	bl	80001c0 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop

080001c0 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80001c0:	b480      	push	{r7}
 80001c2:	b083      	sub	sp, #12
 80001c4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80001c6:	2300      	movs	r3, #0
 80001c8:	607b      	str	r3, [r7, #4]
 80001ca:	2300      	movs	r3, #0
 80001cc:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80001ce:	4b3a      	ldr	r3, [pc, #232]	; (80002b8 <SetSysClockTo72+0xf8>)
 80001d0:	4a39      	ldr	r2, [pc, #228]	; (80002b8 <SetSysClockTo72+0xf8>)
 80001d2:	6812      	ldr	r2, [r2, #0]
 80001d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80001d8:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80001da:	4b37      	ldr	r3, [pc, #220]	; (80002b8 <SetSysClockTo72+0xf8>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001e2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d103      	bne.n	80001f8 <SetSysClockTo72+0x38>
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80001f6:	d1f0      	bne.n	80001da <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80001f8:	4b2f      	ldr	r3, [pc, #188]	; (80002b8 <SetSysClockTo72+0xf8>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000200:	2b00      	cmp	r3, #0
 8000202:	d002      	beq.n	800020a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000204:	2301      	movs	r3, #1
 8000206:	603b      	str	r3, [r7, #0]
 8000208:	e001      	b.n	800020e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800020a:	2300      	movs	r3, #0
 800020c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	2b01      	cmp	r3, #1
 8000212:	d14b      	bne.n	80002ac <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000214:	4b29      	ldr	r3, [pc, #164]	; (80002bc <SetSysClockTo72+0xfc>)
 8000216:	4a29      	ldr	r2, [pc, #164]	; (80002bc <SetSysClockTo72+0xfc>)
 8000218:	6812      	ldr	r2, [r2, #0]
 800021a:	f042 0210 	orr.w	r2, r2, #16
 800021e:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000220:	4b26      	ldr	r3, [pc, #152]	; (80002bc <SetSysClockTo72+0xfc>)
 8000222:	4a26      	ldr	r2, [pc, #152]	; (80002bc <SetSysClockTo72+0xfc>)
 8000224:	6812      	ldr	r2, [r2, #0]
 8000226:	f022 0203 	bic.w	r2, r2, #3
 800022a:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800022c:	4b23      	ldr	r3, [pc, #140]	; (80002bc <SetSysClockTo72+0xfc>)
 800022e:	4a23      	ldr	r2, [pc, #140]	; (80002bc <SetSysClockTo72+0xfc>)
 8000230:	6812      	ldr	r2, [r2, #0]
 8000232:	f042 0202 	orr.w	r2, r2, #2
 8000236:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000238:	4b1f      	ldr	r3, [pc, #124]	; (80002b8 <SetSysClockTo72+0xf8>)
 800023a:	4a1f      	ldr	r2, [pc, #124]	; (80002b8 <SetSysClockTo72+0xf8>)
 800023c:	6852      	ldr	r2, [r2, #4]
 800023e:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000240:	4b1d      	ldr	r3, [pc, #116]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000242:	4a1d      	ldr	r2, [pc, #116]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000244:	6852      	ldr	r2, [r2, #4]
 8000246:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000248:	4b1b      	ldr	r3, [pc, #108]	; (80002b8 <SetSysClockTo72+0xf8>)
 800024a:	4a1b      	ldr	r2, [pc, #108]	; (80002b8 <SetSysClockTo72+0xf8>)
 800024c:	6852      	ldr	r2, [r2, #4]
 800024e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000252:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000254:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000256:	4a18      	ldr	r2, [pc, #96]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000258:	6852      	ldr	r2, [r2, #4]
 800025a:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800025e:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000262:	4a15      	ldr	r2, [pc, #84]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000264:	6852      	ldr	r2, [r2, #4]
 8000266:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 800026a:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <SetSysClockTo72+0xf8>)
 800026e:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000270:	6812      	ldr	r2, [r2, #0]
 8000272:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000276:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000278:	bf00      	nop
 800027a:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <SetSysClockTo72+0xf8>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000282:	2b00      	cmp	r3, #0
 8000284:	d0f9      	beq.n	800027a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000286:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000288:	4a0b      	ldr	r2, [pc, #44]	; (80002b8 <SetSysClockTo72+0xf8>)
 800028a:	6852      	ldr	r2, [r2, #4]
 800028c:	f022 0203 	bic.w	r2, r2, #3
 8000290:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000292:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000294:	4a08      	ldr	r2, [pc, #32]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000296:	6852      	ldr	r2, [r2, #4]
 8000298:	f042 0202 	orr.w	r2, r2, #2
 800029c:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800029e:	bf00      	nop
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <SetSysClockTo72+0xf8>)
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	f003 030c 	and.w	r3, r3, #12
 80002a8:	2b08      	cmp	r3, #8
 80002aa:	d1f9      	bne.n	80002a0 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	40021000 	.word	0x40021000
 80002bc:	40022000 	.word	0x40022000

080002c0 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
}
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr

080002cc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80002d0:	e7fe      	b.n	80002d0 <HardFault_Handler+0x4>
 80002d2:	bf00      	nop

080002d4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80002d8:	e7fe      	b.n	80002d8 <MemManage_Handler+0x4>
 80002da:	bf00      	nop

080002dc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80002e0:	e7fe      	b.n	80002e0 <BusFault_Handler+0x4>
 80002e2:	bf00      	nop

080002e4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80002e8:	e7fe      	b.n	80002e8 <UsageFault_Handler+0x4>
 80002ea:	bf00      	nop

080002ec <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
}
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr

080002f8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
}
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <PendSV_Handler>:
  * @brief  This function handles PendSV_Handler exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
}
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
}
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr

0800031c <USART1_IRQHandler>:
  * @brief  This function handles USARTx global interrupt request.
  * @param  None
  * @retval None
  */
void USARTx_IRQHandler(void)
{
 800031c:	b598      	push	{r3, r4, r7, lr}
 800031e:	af00      	add	r7, sp, #0
  if(USART_GetITStatus(EVAL_COM1, USART_IT_RXNE) != RESET)
 8000320:	4823      	ldr	r0, [pc, #140]	; (80003b0 <USART1_IRQHandler+0x94>)
 8000322:	f240 5125 	movw	r1, #1317	; 0x525
 8000326:	f000 fa73 	bl	8000810 <USART_GetITStatus>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d01d      	beq.n	800036c <USART1_IRQHandler+0x50>
  {
    /* Read one byte from the receive data register */
    RxBuffer[RxCounter++] = (USART_ReceiveData(EVAL_COM1) & 0x7F);
 8000330:	4b20      	ldr	r3, [pc, #128]	; (80003b4 <USART1_IRQHandler+0x98>)
 8000332:	881b      	ldrh	r3, [r3, #0]
 8000334:	1c5a      	adds	r2, r3, #1
 8000336:	b291      	uxth	r1, r2
 8000338:	4a1e      	ldr	r2, [pc, #120]	; (80003b4 <USART1_IRQHandler+0x98>)
 800033a:	8011      	strh	r1, [r2, #0]
 800033c:	461c      	mov	r4, r3
 800033e:	481c      	ldr	r0, [pc, #112]	; (80003b0 <USART1_IRQHandler+0x94>)
 8000340:	f000 fa56 	bl	80007f0 <USART_ReceiveData>
 8000344:	4603      	mov	r3, r0
 8000346:	b2db      	uxtb	r3, r3
 8000348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800034c:	b2da      	uxtb	r2, r3
 800034e:	4b1a      	ldr	r3, [pc, #104]	; (80003b8 <USART1_IRQHandler+0x9c>)
 8000350:	551a      	strb	r2, [r3, r4]

    if(RxCounter == NbrOfDataToRead)
 8000352:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <USART1_IRQHandler+0xa0>)
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	461a      	mov	r2, r3
 8000358:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <USART1_IRQHandler+0x98>)
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	429a      	cmp	r2, r3
 800035e:	d105      	bne.n	800036c <USART1_IRQHandler+0x50>
    {
      /* Disable the EVAL_COM1 Receive interrupt */
      USART_ITConfig(EVAL_COM1, USART_IT_RXNE, DISABLE);
 8000360:	4813      	ldr	r0, [pc, #76]	; (80003b0 <USART1_IRQHandler+0x94>)
 8000362:	f240 5125 	movw	r1, #1317	; 0x525
 8000366:	2200      	movs	r2, #0
 8000368:	f000 f9e8 	bl	800073c <USART_ITConfig>
    }
  }

  if(USART_GetITStatus(EVAL_COM1, USART_IT_TXE) != RESET)
 800036c:	4810      	ldr	r0, [pc, #64]	; (80003b0 <USART1_IRQHandler+0x94>)
 800036e:	f240 7127 	movw	r1, #1831	; 0x727
 8000372:	f000 fa4d 	bl	8000810 <USART_GetITStatus>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d017      	beq.n	80003ac <USART1_IRQHandler+0x90>
  {   
    /* Write one byte to the transmit data register */
    USART_SendData(EVAL_COM1, TxBuffer[TxCounter++]);
 800037c:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <USART1_IRQHandler+0xa4>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	1c5a      	adds	r2, r3, #1
 8000382:	b2d1      	uxtb	r1, r2
 8000384:	4a0e      	ldr	r2, [pc, #56]	; (80003c0 <USART1_IRQHandler+0xa4>)
 8000386:	7011      	strb	r1, [r2, #0]
 8000388:	4a0e      	ldr	r2, [pc, #56]	; (80003c4 <USART1_IRQHandler+0xa8>)
 800038a:	5cd3      	ldrb	r3, [r2, r3]
 800038c:	4808      	ldr	r0, [pc, #32]	; (80003b0 <USART1_IRQHandler+0x94>)
 800038e:	4619      	mov	r1, r3
 8000390:	f000 fa1c 	bl	80007cc <USART_SendData>

    if(TxCounter == NbrOfDataToTransfer)
 8000394:	4b0a      	ldr	r3, [pc, #40]	; (80003c0 <USART1_IRQHandler+0xa4>)
 8000396:	781a      	ldrb	r2, [r3, #0]
 8000398:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <USART1_IRQHandler+0xac>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	429a      	cmp	r2, r3
 800039e:	d105      	bne.n	80003ac <USART1_IRQHandler+0x90>
    {
      /* Disable the EVAL_COM1 Transmit interrupt */
      USART_ITConfig(EVAL_COM1, USART_IT_TXE, DISABLE);
 80003a0:	4803      	ldr	r0, [pc, #12]	; (80003b0 <USART1_IRQHandler+0x94>)
 80003a2:	f240 7127 	movw	r1, #1831	; 0x727
 80003a6:	2200      	movs	r2, #0
 80003a8:	f000 f9c8 	bl	800073c <USART_ITConfig>
    }
  }
}
 80003ac:	bd98      	pop	{r3, r4, r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40013800 	.word	0x40013800
 80003b4:	200000ae 	.word	0x200000ae
 80003b8:	200000b0 	.word	0x200000b0
 80003bc:	20000061 	.word	0x20000061
 80003c0:	200000ac 	.word	0x200000ac
 80003c4:	20000000 	.word	0x20000000
 80003c8:	20000060 	.word	0x20000060

080003cc <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80003cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80003ce:	f000 b804 	b.w	80003da <LoopCopyDataInit>

080003d2 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80003d2:	4b0d      	ldr	r3, [pc, #52]	; (8000408 <LoopFillZerobss+0x16>)
	ldr	r3, [r3, r1]
 80003d4:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80003d6:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80003d8:	3104      	adds	r1, #4

080003da <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80003da:	480c      	ldr	r0, [pc, #48]	; (800040c <LoopFillZerobss+0x1a>)
	ldr	r3, =_edata
 80003dc:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <LoopFillZerobss+0x1e>)
	adds	r2, r0, r1
 80003de:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80003e0:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80003e2:	f4ff aff6 	bcc.w	80003d2 <CopyDataInit>
	ldr	r2, =_sbss
 80003e6:	4a0b      	ldr	r2, [pc, #44]	; (8000414 <LoopFillZerobss+0x22>)
	b	LoopFillZerobss
 80003e8:	f000 b803 	b.w	80003f2 <LoopFillZerobss>

080003ec <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80003ec:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80003ee:	f842 3b04 	str.w	r3, [r2], #4

080003f2 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80003f2:	4b09      	ldr	r3, [pc, #36]	; (8000418 <LoopFillZerobss+0x26>)
	cmp	r2, r3
 80003f4:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80003f6:	f4ff aff9 	bcc.w	80003ec <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003fa:	f7ff fea7 	bl	800014c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003fe:	f000 fcd9 	bl	8000db4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000402:	f000 f80d 	bl	8000420 <main>
	bx	lr
 8000406:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000408:	08000e40 	.word	0x08000e40
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 800040c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000410:	20000090 	.word	0x20000090
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000414:	20000090 	.word	0x20000090
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000418:	200000e0 	.word	0x200000e0

0800041c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800041c:	f7ff bffe 	b.w	800041c <ADC1_2_IRQHandler>

08000420 <main>:
  * @brief   Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
       To reconfigure the default setting of SystemInit() function, refer to
       system_stm32f10x.c file
     */     
              
  /* NVIC configuration */
  NVIC_Configuration();
 8000424:	f000 f82a 	bl	800047c <NVIC_Configuration>
        - Two Stop Bit
        - Odd parity
        - Hardware flow control disabled (RTS and CTS signals)
        - Receive and transmit enabled
  */
  USART_InitStructure.USART_BaudRate = 9600;
 8000428:	4b12      	ldr	r3, [pc, #72]	; (8000474 <main+0x54>)
 800042a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800042e:	601a      	str	r2, [r3, #0]
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000430:	4b10      	ldr	r3, [pc, #64]	; (8000474 <main+0x54>)
 8000432:	2200      	movs	r2, #0
 8000434:	809a      	strh	r2, [r3, #4]
  USART_InitStructure.USART_StopBits = USART_StopBits_2;
 8000436:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <main+0x54>)
 8000438:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800043c:	80da      	strh	r2, [r3, #6]
  USART_InitStructure.USART_Parity = USART_Parity_Odd;
 800043e:	4b0d      	ldr	r3, [pc, #52]	; (8000474 <main+0x54>)
 8000440:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000444:	811a      	strh	r2, [r3, #8]
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <main+0x54>)
 8000448:	2200      	movs	r2, #0
 800044a:	819a      	strh	r2, [r3, #12]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800044c:	4b09      	ldr	r3, [pc, #36]	; (8000474 <main+0x54>)
 800044e:	220c      	movs	r2, #12
 8000450:	815a      	strh	r2, [r3, #10]

  STM_EVAL_COMInit(COM1, &USART_InitStructure);
 8000452:	2000      	movs	r0, #0
 8000454:	4907      	ldr	r1, [pc, #28]	; (8000474 <main+0x54>)
 8000456:	f000 f823 	bl	80004a0 <STM_EVAL_COMInit>

  /* Enable the EVAL_COM1 Transmit interrupt: this interrupt is generated when the 
     EVAL_COM1 transmit data register is empty */  
  USART_ITConfig(EVAL_COM1, USART_IT_TXE, ENABLE);
 800045a:	4807      	ldr	r0, [pc, #28]	; (8000478 <main+0x58>)
 800045c:	f240 7127 	movw	r1, #1831	; 0x727
 8000460:	2201      	movs	r2, #1
 8000462:	f000 f96b 	bl	800073c <USART_ITConfig>

  /* Enable the EVAL_COM1 Receive interrupt: this interrupt is generated when the 
     EVAL_COM1 receive data register is not empty */
  USART_ITConfig(EVAL_COM1, USART_IT_RXNE, ENABLE);
 8000466:	4804      	ldr	r0, [pc, #16]	; (8000478 <main+0x58>)
 8000468:	f240 5125 	movw	r1, #1317	; 0x525
 800046c:	2201      	movs	r2, #1
 800046e:	f000 f965 	bl	800073c <USART_ITConfig>

  while (1)
  {
  }
 8000472:	e7fe      	b.n	8000472 <main+0x52>
 8000474:	200000d0 	.word	0x200000d0
 8000478:	40013800 	.word	0x40013800

0800047c <NVIC_Configuration>:
  * @brief  Configures the nested vectored interrupt controller.
  * @param  None
  * @retval None
  */
void NVIC_Configuration(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the USARTx Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = USARTx_IRQn;
 8000482:	2325      	movs	r3, #37	; 0x25
 8000484:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800048a:	2300      	movs	r3, #0
 800048c:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800048e:	2301      	movs	r3, #1
 8000490:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	4618      	mov	r0, r3
 8000496:	f000 fc2d 	bl	8000cf4 <NVIC_Init>
}
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}

080004a0 <STM_EVAL_COMInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that
  *   contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void STM_EVAL_COMInit(COM_TypeDef COM, USART_InitTypeDef* USART_InitStruct)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	6039      	str	r1, [r7, #0]
 80004aa:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIO clock */
  RCC_APB2PeriphClockCmd(COM_TX_PORT_CLK[COM] | COM_RX_PORT_CLK[COM] | RCC_APB2Periph_AFIO, ENABLE);
 80004ac:	79fa      	ldrb	r2, [r7, #7]
 80004ae:	4b2e      	ldr	r3, [pc, #184]	; (8000568 <STM_EVAL_COMInit+0xc8>)
 80004b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004b4:	79f9      	ldrb	r1, [r7, #7]
 80004b6:	4b2d      	ldr	r3, [pc, #180]	; (800056c <STM_EVAL_COMInit+0xcc>)
 80004b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80004bc:	4313      	orrs	r3, r2
 80004be:	f043 0301 	orr.w	r3, r3, #1
 80004c2:	4618      	mov	r0, r3
 80004c4:	2101      	movs	r1, #1
 80004c6:	f000 faad 	bl	8000a24 <RCC_APB2PeriphClockCmd>

  if (COM == COM1)
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d108      	bne.n	80004e2 <STM_EVAL_COMInit+0x42>
  {
    RCC_APB2PeriphClockCmd(COM_USART_CLK[COM], ENABLE); 
 80004d0:	79fa      	ldrb	r2, [r7, #7]
 80004d2:	4b27      	ldr	r3, [pc, #156]	; (8000570 <STM_EVAL_COMInit+0xd0>)
 80004d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004d8:	4618      	mov	r0, r3
 80004da:	2101      	movs	r1, #1
 80004dc:	f000 faa2 	bl	8000a24 <RCC_APB2PeriphClockCmd>
 80004e0:	e00b      	b.n	80004fa <STM_EVAL_COMInit+0x5a>
  }
  else
  {
    /* Enable the USART2 Pins Software Remapping */
    GPIO_PinRemapConfig(GPIO_Remap_USART2, ENABLE);
 80004e2:	2008      	movs	r0, #8
 80004e4:	2101      	movs	r1, #1
 80004e6:	f000 fb95 	bl	8000c14 <GPIO_PinRemapConfig>
    RCC_APB1PeriphClockCmd(COM_USART_CLK[COM], ENABLE);
 80004ea:	79fa      	ldrb	r2, [r7, #7]
 80004ec:	4b20      	ldr	r3, [pc, #128]	; (8000570 <STM_EVAL_COMInit+0xd0>)
 80004ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004f2:	4618      	mov	r0, r3
 80004f4:	2101      	movs	r1, #1
 80004f6:	f000 fab3 	bl	8000a60 <RCC_APB1PeriphClockCmd>
  }

  /* Configure USART Tx as alternate function push-pull */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80004fa:	2318      	movs	r3, #24
 80004fc:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
 80004fe:	79fa      	ldrb	r2, [r7, #7]
 8000500:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <STM_EVAL_COMInit+0xd4>)
 8000502:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000506:	81bb      	strh	r3, [r7, #12]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000508:	2303      	movs	r3, #3
 800050a:	73bb      	strb	r3, [r7, #14]
  GPIO_Init(COM_TX_PORT[COM], &GPIO_InitStructure);
 800050c:	79fa      	ldrb	r2, [r7, #7]
 800050e:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <STM_EVAL_COMInit+0xd8>)
 8000510:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	4610      	mov	r0, r2
 800051a:	4619      	mov	r1, r3
 800051c:	f000 fabe 	bl	8000a9c <GPIO_Init>


  /* Configure USART Rx as input floating */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000520:	2304      	movs	r3, #4
 8000522:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Pin = COM_RX_PIN[COM];
 8000524:	79fa      	ldrb	r2, [r7, #7]
 8000526:	4b15      	ldr	r3, [pc, #84]	; (800057c <STM_EVAL_COMInit+0xdc>)
 8000528:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800052c:	81bb      	strh	r3, [r7, #12]
  GPIO_Init(COM_RX_PORT[COM], &GPIO_InitStructure);
 800052e:	79fa      	ldrb	r2, [r7, #7]
 8000530:	4b13      	ldr	r3, [pc, #76]	; (8000580 <STM_EVAL_COMInit+0xe0>)
 8000532:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000536:	f107 030c 	add.w	r3, r7, #12
 800053a:	4610      	mov	r0, r2
 800053c:	4619      	mov	r1, r3
 800053e:	f000 faad 	bl	8000a9c <GPIO_Init>

  /* USART configuration */
  USART_Init(COM_USART[COM], USART_InitStruct);
 8000542:	79fa      	ldrb	r2, [r7, #7]
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <STM_EVAL_COMInit+0xe4>)
 8000546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800054a:	4618      	mov	r0, r3
 800054c:	6839      	ldr	r1, [r7, #0]
 800054e:	f000 f81b 	bl	8000588 <USART_Init>
    
  /* Enable USART */
  USART_Cmd(COM_USART[COM], ENABLE);
 8000552:	79fa      	ldrb	r2, [r7, #7]
 8000554:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <STM_EVAL_COMInit+0xe4>)
 8000556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800055a:	4618      	mov	r0, r3
 800055c:	2101      	movs	r1, #1
 800055e:	f000 f8cd 	bl	80006fc <USART_Cmd>
}
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	08000e08 	.word	0x08000e08
 800056c:	08000e10 	.word	0x08000e10
 8000570:	08000e00 	.word	0x08000e00
 8000574:	08000e18 	.word	0x08000e18
 8000578:	2000006c 	.word	0x2000006c
 800057c:	08000e1c 	.word	0x08000e1c
 8000580:	20000074 	.word	0x20000074
 8000584:	20000064 	.word	0x20000064

08000588 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08c      	sub	sp, #48	; 0x30
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000592:	2300      	movs	r3, #0
 8000594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000596:	2300      	movs	r3, #0
 8000598:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 800059a:	2300      	movs	r3, #0
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 800059e:	2300      	movs	r3, #0
 80005a0:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	8a1b      	ldrh	r3, [r3, #16]
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 80005b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005b4:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80005b8:	4013      	ands	r3, r2
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	88db      	ldrh	r3, [r3, #6]
 80005c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005c2:	4313      	orrs	r3, r2
 80005c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80005c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	899b      	ldrh	r3, [r3, #12]
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80005d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005d8:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 80005dc:	4013      	ands	r3, r2
 80005de:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	889a      	ldrh	r2, [r3, #4]
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	891b      	ldrh	r3, [r3, #8]
 80005e8:	4313      	orrs	r3, r2
 80005ea:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80005f0:	4313      	orrs	r3, r2
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005f6:	4313      	orrs	r3, r2
 80005f8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80005fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	8a9b      	ldrh	r3, [r3, #20]
 8000606:	b29b      	uxth	r3, r3
 8000608:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 800060a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800060c:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000610:	4013      	ands	r3, r2
 8000612:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	899b      	ldrh	r3, [r3, #12]
 8000618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800061a:	4313      	orrs	r3, r2
 800061c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800061e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000620:	b29a      	uxth	r2, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	4618      	mov	r0, r3
 800062c:	f000 f948 	bl	80008c0 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8000630:	69fa      	ldr	r2, [r7, #28]
 8000632:	4b30      	ldr	r3, [pc, #192]	; (80006f4 <USART_Init+0x16c>)
 8000634:	429a      	cmp	r2, r3
 8000636:	d102      	bne.n	800063e <USART_Init+0xb6>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	62bb      	str	r3, [r7, #40]	; 0x28
 800063c:	e001      	b.n	8000642 <USART_Init+0xba>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800063e:	693b      	ldr	r3, [r7, #16]
 8000640:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	899b      	ldrh	r3, [r3, #12]
 8000646:	b29b      	uxth	r3, r3
 8000648:	b29b      	uxth	r3, r3
 800064a:	b21b      	sxth	r3, r3
 800064c:	2b00      	cmp	r3, #0
 800064e:	da0c      	bge.n	800066a <USART_Init+0xe2>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000650:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000652:	4613      	mov	r3, r2
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	4413      	add	r3, r2
 8000658:	009a      	lsls	r2, r3, #2
 800065a:	441a      	add	r2, r3
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	fbb2 f3f3 	udiv	r3, r2, r3
 8000666:	627b      	str	r3, [r7, #36]	; 0x24
 8000668:	e00b      	b.n	8000682 <USART_Init+0xfa>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800066a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800066c:	4613      	mov	r3, r2
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	4413      	add	r3, r2
 8000672:	009a      	lsls	r2, r3, #2
 8000674:	441a      	add	r2, r3
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8000682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000684:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <USART_Init+0x170>)
 8000686:	fba3 1302 	umull	r1, r3, r3, r2
 800068a:	095b      	lsrs	r3, r3, #5
 800068c:	011b      	lsls	r3, r3, #4
 800068e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000692:	091b      	lsrs	r3, r3, #4
 8000694:	2264      	movs	r2, #100	; 0x64
 8000696:	fb02 f303 	mul.w	r3, r2, r3
 800069a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	899b      	ldrh	r3, [r3, #12]
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	b21b      	sxth	r3, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	da0d      	bge.n	80006ca <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80006ae:	6a3b      	ldr	r3, [r7, #32]
 80006b0:	00db      	lsls	r3, r3, #3
 80006b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <USART_Init+0x170>)
 80006b8:	fba3 1302 	umull	r1, r3, r3, r2
 80006bc:	095b      	lsrs	r3, r3, #5
 80006be:	f003 0307 	and.w	r3, r3, #7
 80006c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006c4:	4313      	orrs	r3, r2
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006c8:	e00c      	b.n	80006e4 <USART_Init+0x15c>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80006ca:	6a3b      	ldr	r3, [r7, #32]
 80006cc:	011b      	lsls	r3, r3, #4
 80006ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <USART_Init+0x170>)
 80006d4:	fba3 1302 	umull	r1, r3, r3, r2
 80006d8:	095b      	lsrs	r3, r3, #5
 80006da:	f003 030f 	and.w	r3, r3, #15
 80006de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006e0:	4313      	orrs	r3, r2
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80006e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	811a      	strh	r2, [r3, #8]
}
 80006ec:	3730      	adds	r7, #48	; 0x30
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40013800 	.word	0x40013800
 80006f8:	51eb851f 	.word	0x51eb851f

080006fc <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000708:	78fb      	ldrb	r3, [r7, #3]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d008      	beq.n	8000720 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	899b      	ldrh	r3, [r3, #12]
 8000712:	b29b      	uxth	r3, r3
 8000714:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000718:	b29a      	uxth	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	819a      	strh	r2, [r3, #12]
 800071e:	e007      	b.n	8000730 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	899b      	ldrh	r3, [r3, #12]
 8000724:	b29b      	uxth	r3, r3
 8000726:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800072a:	b29a      	uxth	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	819a      	strh	r2, [r3, #12]
  }
}
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop

0800073c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800073c:	b480      	push	{r7}
 800073e:	b087      	sub	sp, #28
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	4613      	mov	r3, r2
 8000746:	460a      	mov	r2, r1
 8000748:	807a      	strh	r2, [r7, #2]
 800074a:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000760:	887b      	ldrh	r3, [r7, #2]
 8000762:	b2db      	uxtb	r3, r3
 8000764:	095b      	lsrs	r3, r3, #5
 8000766:	b2db      	uxtb	r3, r3
 8000768:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 800076a:	887b      	ldrh	r3, [r7, #2]
 800076c:	f003 031f 	and.w	r3, r3, #31
 8000770:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2201      	movs	r2, #1
 8000776:	fa02 f303 	lsl.w	r3, r2, r3
 800077a:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d103      	bne.n	800078a <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	330c      	adds	r3, #12
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	e009      	b.n	800079e <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800078a:	693b      	ldr	r3, [r7, #16]
 800078c:	2b02      	cmp	r3, #2
 800078e:	d103      	bne.n	8000798 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	3310      	adds	r3, #16
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	e002      	b.n	800079e <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	3314      	adds	r3, #20
 800079c:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800079e:	787b      	ldrb	r3, [r7, #1]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d006      	beq.n	80007b2 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	697a      	ldr	r2, [r7, #20]
 80007a8:	6811      	ldr	r1, [r2, #0]
 80007aa:	68ba      	ldr	r2, [r7, #8]
 80007ac:	430a      	orrs	r2, r1
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	e006      	b.n	80007c0 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	697a      	ldr	r2, [r7, #20]
 80007b6:	6811      	ldr	r1, [r2, #0]
 80007b8:	68ba      	ldr	r2, [r7, #8]
 80007ba:	43d2      	mvns	r2, r2
 80007bc:	400a      	ands	r2, r1
 80007be:	601a      	str	r2, [r3, #0]
  }
}
 80007c0:	371c      	adds	r7, #28
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop

080007cc <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80007d8:	887b      	ldrh	r3, [r7, #2]
 80007da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80007de:	b29a      	uxth	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	809a      	strh	r2, [r3, #4]
}
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop

080007f0 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	889b      	ldrh	r3, [r3, #4]
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000802:	b29b      	uxth	r3, r3
}
 8000804:	4618      	mov	r0, r3
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000810:	b480      	push	{r7}
 8000812:	b087      	sub	sp, #28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000828:	2300      	movs	r3, #0
 800082a:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800082c:	887b      	ldrh	r3, [r7, #2]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	095b      	lsrs	r3, r3, #5
 8000832:	b2db      	uxtb	r3, r3
 8000834:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 8000836:	887b      	ldrh	r3, [r7, #2]
 8000838:	f003 031f 	and.w	r3, r3, #31
 800083c:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	2201      	movs	r2, #1
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d106      	bne.n	800085c <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	899b      	ldrh	r3, [r3, #12]
 8000852:	b29b      	uxth	r3, r3
 8000854:	697a      	ldr	r2, [r7, #20]
 8000856:	4013      	ands	r3, r2
 8000858:	617b      	str	r3, [r7, #20]
 800085a:	e00f      	b.n	800087c <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	2b02      	cmp	r3, #2
 8000860:	d106      	bne.n	8000870 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	8a1b      	ldrh	r3, [r3, #16]
 8000866:	b29b      	uxth	r3, r3
 8000868:	697a      	ldr	r2, [r7, #20]
 800086a:	4013      	ands	r3, r2
 800086c:	617b      	str	r3, [r7, #20]
 800086e:	e005      	b.n	800087c <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	8a9b      	ldrh	r3, [r3, #20]
 8000874:	b29b      	uxth	r3, r3
 8000876:	697a      	ldr	r2, [r7, #20]
 8000878:	4013      	ands	r3, r2
 800087a:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800087c:	887b      	ldrh	r3, [r7, #2]
 800087e:	0a1b      	lsrs	r3, r3, #8
 8000880:	b29b      	uxth	r3, r3
 8000882:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	2201      	movs	r2, #1
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	881b      	ldrh	r3, [r3, #0]
 8000892:	b29b      	uxth	r3, r3
 8000894:	68fa      	ldr	r2, [r7, #12]
 8000896:	4013      	ands	r3, r2
 8000898:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d005      	beq.n	80008ac <USART_GetITStatus+0x9c>
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d002      	beq.n	80008ac <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
 80008a6:	2301      	movs	r3, #1
 80008a8:	74fb      	strb	r3, [r7, #19]
 80008aa:	e001      	b.n	80008b0 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
 80008ac:	2300      	movs	r3, #0
 80008ae:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80008b0:	7cfb      	ldrb	r3, [r7, #19]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	371c      	adds	r7, #28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop

080008c0 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b087      	sub	sp, #28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	2300      	movs	r3, #0
 80008d6:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80008d8:	4b4d      	ldr	r3, [pc, #308]	; (8000a10 <RCC_GetClocksFreq+0x150>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	f003 030c 	and.w	r3, r3, #12
 80008e0:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	2b04      	cmp	r3, #4
 80008e6:	d007      	beq.n	80008f8 <RCC_GetClocksFreq+0x38>
 80008e8:	2b08      	cmp	r3, #8
 80008ea:	d009      	beq.n	8000900 <RCC_GetClocksFreq+0x40>
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d134      	bne.n	800095a <RCC_GetClocksFreq+0x9a>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a48      	ldr	r2, [pc, #288]	; (8000a14 <RCC_GetClocksFreq+0x154>)
 80008f4:	601a      	str	r2, [r3, #0]
      break;
 80008f6:	e034      	b.n	8000962 <RCC_GetClocksFreq+0xa2>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a46      	ldr	r2, [pc, #280]	; (8000a14 <RCC_GetClocksFreq+0x154>)
 80008fc:	601a      	str	r2, [r3, #0]
      break;
 80008fe:	e030      	b.n	8000962 <RCC_GetClocksFreq+0xa2>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000900:	4b43      	ldr	r3, [pc, #268]	; (8000a10 <RCC_GetClocksFreq+0x150>)
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000908:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 800090a:	4b41      	ldr	r3, [pc, #260]	; (8000a10 <RCC_GetClocksFreq+0x150>)
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000912:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	0c9b      	lsrs	r3, r3, #18
 8000918:	3302      	adds	r3, #2
 800091a:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d106      	bne.n	8000930 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	4a3c      	ldr	r2, [pc, #240]	; (8000a18 <RCC_GetClocksFreq+0x158>)
 8000926:	fb02 f203 	mul.w	r2, r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	e013      	b.n	8000958 <RCC_GetClocksFreq+0x98>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000930:	4b37      	ldr	r3, [pc, #220]	; (8000a10 <RCC_GetClocksFreq+0x150>)
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000938:	2b00      	cmp	r3, #0
 800093a:	d006      	beq.n	800094a <RCC_GetClocksFreq+0x8a>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	4a36      	ldr	r2, [pc, #216]	; (8000a18 <RCC_GetClocksFreq+0x158>)
 8000940:	fb02 f203 	mul.w	r2, r2, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	e006      	b.n	8000958 <RCC_GetClocksFreq+0x98>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	4a31      	ldr	r2, [pc, #196]	; (8000a14 <RCC_GetClocksFreq+0x154>)
 800094e:	fb02 f203 	mul.w	r2, r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000956:	e004      	b.n	8000962 <RCC_GetClocksFreq+0xa2>
 8000958:	e003      	b.n	8000962 <RCC_GetClocksFreq+0xa2>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a2d      	ldr	r2, [pc, #180]	; (8000a14 <RCC_GetClocksFreq+0x154>)
 800095e:	601a      	str	r2, [r3, #0]
      break;
 8000960:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000962:	4b2b      	ldr	r3, [pc, #172]	; (8000a10 <RCC_GetClocksFreq+0x150>)
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800096a:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	091b      	lsrs	r3, r3, #4
 8000970:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000972:	4a2a      	ldr	r2, [pc, #168]	; (8000a1c <RCC_GetClocksFreq+0x15c>)
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	4413      	add	r3, r2
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	40da      	lsrs	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 800098a:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <RCC_GetClocksFreq+0x150>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000992:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	0a1b      	lsrs	r3, r3, #8
 8000998:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800099a:	4a20      	ldr	r2, [pc, #128]	; (8000a1c <RCC_GetClocksFreq+0x15c>)
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	4413      	add	r3, r2
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	685a      	ldr	r2, [r3, #4]
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	40da      	lsrs	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80009b2:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <RCC_GetClocksFreq+0x150>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80009ba:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	0adb      	lsrs	r3, r3, #11
 80009c0:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80009c2:	4a16      	ldr	r2, [pc, #88]	; (8000a1c <RCC_GetClocksFreq+0x15c>)
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	4413      	add	r3, r2
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	685a      	ldr	r2, [r3, #4]
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	40da      	lsrs	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <RCC_GetClocksFreq+0x150>)
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009e2:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	0b9b      	lsrs	r3, r3, #14
 80009e8:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80009ea:	4a0d      	ldr	r2, [pc, #52]	; (8000a20 <RCC_GetClocksFreq+0x160>)
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	4413      	add	r3, r2
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	68da      	ldr	r2, [r3, #12]
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	611a      	str	r2, [r3, #16]
}
 8000a04:	371c      	adds	r7, #28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000
 8000a14:	007a1200 	.word	0x007a1200
 8000a18:	003d0900 	.word	0x003d0900
 8000a1c:	2000007c 	.word	0x2000007c
 8000a20:	2000008c 	.word	0x2000008c

08000a24 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a30:	78fb      	ldrb	r3, [r7, #3]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d006      	beq.n	8000a44 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <RCC_APB2PeriphClockCmd+0x38>)
 8000a38:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <RCC_APB2PeriphClockCmd+0x38>)
 8000a3a:	6991      	ldr	r1, [r2, #24]
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	619a      	str	r2, [r3, #24]
 8000a42:	e006      	b.n	8000a52 <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <RCC_APB2PeriphClockCmd+0x38>)
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <RCC_APB2PeriphClockCmd+0x38>)
 8000a48:	6991      	ldr	r1, [r2, #24]
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	43d2      	mvns	r2, r2
 8000a4e:	400a      	ands	r2, r1
 8000a50:	619a      	str	r2, [r3, #24]
  }
}
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	40021000 	.word	0x40021000

08000a60 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	460b      	mov	r3, r1
 8000a6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a6c:	78fb      	ldrb	r3, [r7, #3]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d006      	beq.n	8000a80 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <RCC_APB1PeriphClockCmd+0x38>)
 8000a74:	4a08      	ldr	r2, [pc, #32]	; (8000a98 <RCC_APB1PeriphClockCmd+0x38>)
 8000a76:	69d1      	ldr	r1, [r2, #28]
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	61da      	str	r2, [r3, #28]
 8000a7e:	e006      	b.n	8000a8e <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <RCC_APB1PeriphClockCmd+0x38>)
 8000a82:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <RCC_APB1PeriphClockCmd+0x38>)
 8000a84:	69d1      	ldr	r1, [r2, #28]
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	43d2      	mvns	r2, r2
 8000a8a:	400a      	ands	r2, r1
 8000a8c:	61da      	str	r2, [r3, #28]
  }
}
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	40021000 	.word	0x40021000

08000a9c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b089      	sub	sp, #36	; 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61bb      	str	r3, [r7, #24]
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	78db      	ldrb	r3, [r3, #3]
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	78db      	ldrb	r3, [r3, #3]
 8000acc:	f003 0310 	and.w	r3, r3, #16
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d004      	beq.n	8000ade <GPIO_Init+0x42>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	789b      	ldrb	r3, [r3, #2]
 8000ad8:	69fa      	ldr	r2, [r7, #28]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d044      	beq.n	8000b72 <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000aee:	2300      	movs	r3, #0
 8000af0:	61bb      	str	r3, [r7, #24]
 8000af2:	e038      	b.n	8000b66 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	2201      	movs	r2, #1
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	461a      	mov	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4013      	ands	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d126      	bne.n	8000b60 <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	220f      	movs	r2, #15
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	43db      	mvns	r3, r3
 8000b26:	697a      	ldr	r2, [r7, #20]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	69fa      	ldr	r2, [r7, #28]
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	697a      	ldr	r2, [r7, #20]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	78db      	ldrb	r3, [r3, #3]
 8000b3e:	2b28      	cmp	r3, #40	; 0x28
 8000b40:	d105      	bne.n	8000b4e <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	2201      	movs	r2, #1
 8000b46:	409a      	lsls	r2, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	615a      	str	r2, [r3, #20]
 8000b4c:	e008      	b.n	8000b60 <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	78db      	ldrb	r3, [r3, #3]
 8000b52:	2b48      	cmp	r3, #72	; 0x48
 8000b54:	d104      	bne.n	8000b60 <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	2201      	movs	r2, #1
 8000b5a:	409a      	lsls	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	3301      	adds	r3, #1
 8000b64:	61bb      	str	r3, [r7, #24]
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	2b07      	cmp	r3, #7
 8000b6a:	d9c3      	bls.n	8000af4 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	697a      	ldr	r2, [r7, #20]
 8000b70:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	2bff      	cmp	r3, #255	; 0xff
 8000b78:	d946      	bls.n	8000c08 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000b80:	2300      	movs	r3, #0
 8000b82:	61bb      	str	r3, [r7, #24]
 8000b84:	e03a      	b.n	8000bfc <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	3308      	adds	r3, #8
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d127      	bne.n	8000bf6 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	220f      	movs	r2, #15
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	697a      	ldr	r2, [r7, #20]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	69fa      	ldr	r2, [r7, #28]
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	697a      	ldr	r2, [r7, #20]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	78db      	ldrb	r3, [r3, #3]
 8000bd2:	2b28      	cmp	r3, #40	; 0x28
 8000bd4:	d105      	bne.n	8000be2 <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	3308      	adds	r3, #8
 8000bda:	2201      	movs	r2, #1
 8000bdc:	409a      	lsls	r2, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	78db      	ldrb	r3, [r3, #3]
 8000be6:	2b48      	cmp	r3, #72	; 0x48
 8000be8:	d105      	bne.n	8000bf6 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	3308      	adds	r3, #8
 8000bee:	2201      	movs	r2, #1
 8000bf0:	409a      	lsls	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	2b07      	cmp	r3, #7
 8000c00:	d9c1      	bls.n	8000b86 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	697a      	ldr	r2, [r7, #20]
 8000c06:	605a      	str	r2, [r3, #4]
  }
}
 8000c08:	3724      	adds	r7, #36	; 0x24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop

08000c14 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b087      	sub	sp, #28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	da03      	bge.n	8000c3e <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 8000c36:	4b2e      	ldr	r3, [pc, #184]	; (8000cf0 <GPIO_PinRemapConfig+0xdc>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	e002      	b.n	8000c44 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 8000c3e:	4b2c      	ldr	r3, [pc, #176]	; (8000cf0 <GPIO_PinRemapConfig+0xdc>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c4a:	0c1b      	lsrs	r3, r3, #16
 8000c4c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000c5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000c5e:	d10a      	bne.n	8000c76 <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000c66:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8000c68:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <GPIO_PinRemapConfig+0xdc>)
 8000c6a:	4a21      	ldr	r2, [pc, #132]	; (8000cf0 <GPIO_PinRemapConfig+0xdc>)
 8000c6c:	6852      	ldr	r2, [r2, #4]
 8000c6e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	e021      	b.n	8000cba <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d00e      	beq.n	8000c9e <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	2203      	movs	r2, #3
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	4013      	ands	r3, r2
 8000c92:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	e00d      	b.n	8000cba <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	0d5b      	lsrs	r3, r3, #21
 8000ca2:	011b      	lsls	r3, r3, #4
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000cb8:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 8000cba:	78fb      	ldrb	r3, [r7, #3]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d008      	beq.n	8000cd2 <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	0d5b      	lsrs	r3, r3, #21
 8000cc4:	011b      	lsls	r3, r3, #4
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	da03      	bge.n	8000ce0 <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <GPIO_PinRemapConfig+0xdc>)
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	61da      	str	r2, [r3, #28]
 8000cde:	e002      	b.n	8000ce6 <GPIO_PinRemapConfig+0xd2>
  }
  else
  {
    AFIO->MAPR = tmpreg;
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <GPIO_PinRemapConfig+0xdc>)
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	605a      	str	r2, [r3, #4]
  }  
}
 8000ce6:	371c      	adds	r7, #28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	40010000 	.word	0x40010000

08000cf4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b087      	sub	sp, #28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	2300      	movs	r3, #0
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	230f      	movs	r3, #15
 8000d06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	78db      	ldrb	r3, [r3, #3]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d038      	beq.n	8000d82 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000d10:	4b26      	ldr	r3, [pc, #152]	; (8000dac <NVIC_Init+0xb8>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	43db      	mvns	r3, r3
 8000d16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000d1a:	0a1b      	lsrs	r3, r3, #8
 8000d1c:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	f1c3 0304 	rsb	r3, r3, #4
 8000d24:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	68fa      	ldr	r2, [r7, #12]
 8000d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d2e:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	785b      	ldrb	r3, [r3, #1]
 8000d34:	461a      	mov	r2, r3
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	789b      	ldrb	r3, [r3, #2]
 8000d42:	461a      	mov	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4013      	ands	r3, r2
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	011b      	lsls	r3, r3, #4
 8000d52:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000d54:	4916      	ldr	r1, [pc, #88]	; (8000db0 <NVIC_Init+0xbc>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <NVIC_Init+0xbc>)
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	7812      	ldrb	r2, [r2, #0]
 8000d6a:	0952      	lsrs	r2, r2, #5
 8000d6c:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	7809      	ldrb	r1, [r1, #0]
 8000d72:	f001 011f 	and.w	r1, r1, #31
 8000d76:	2001      	movs	r0, #1
 8000d78:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000d80:	e00e      	b.n	8000da0 <NVIC_Init+0xac>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <NVIC_Init+0xbc>)
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	7812      	ldrb	r2, [r2, #0]
 8000d88:	0952      	lsrs	r2, r2, #5
 8000d8a:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d8c:	6879      	ldr	r1, [r7, #4]
 8000d8e:	7809      	ldrb	r1, [r1, #0]
 8000d90:	f001 011f 	and.w	r1, r1, #31
 8000d94:	2001      	movs	r0, #1
 8000d96:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d9a:	3220      	adds	r2, #32
 8000d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000da0:	371c      	adds	r7, #28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000ed00 	.word	0xe000ed00
 8000db0:	e000e100 	.word	0xe000e100

08000db4 <__libc_init_array>:
 8000db4:	b570      	push	{r4, r5, r6, lr}
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <__libc_init_array+0x3c>)
 8000db8:	4d0e      	ldr	r5, [pc, #56]	; (8000df4 <__libc_init_array+0x40>)
 8000dba:	2400      	movs	r4, #0
 8000dbc:	1aed      	subs	r5, r5, r3
 8000dbe:	10ad      	asrs	r5, r5, #2
 8000dc0:	461e      	mov	r6, r3
 8000dc2:	42ac      	cmp	r4, r5
 8000dc4:	d004      	beq.n	8000dd0 <__libc_init_array+0x1c>
 8000dc6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8000dca:	4790      	blx	r2
 8000dcc:	3401      	adds	r4, #1
 8000dce:	e7f8      	b.n	8000dc2 <__libc_init_array+0xe>
 8000dd0:	f000 f826 	bl	8000e20 <_init>
 8000dd4:	4d08      	ldr	r5, [pc, #32]	; (8000df8 <__libc_init_array+0x44>)
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <__libc_init_array+0x48>)
 8000dd8:	2400      	movs	r4, #0
 8000dda:	1aed      	subs	r5, r5, r3
 8000ddc:	10ad      	asrs	r5, r5, #2
 8000dde:	461e      	mov	r6, r3
 8000de0:	42ac      	cmp	r4, r5
 8000de2:	d004      	beq.n	8000dee <__libc_init_array+0x3a>
 8000de4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8000de8:	4790      	blx	r2
 8000dea:	3401      	adds	r4, #1
 8000dec:	e7f8      	b.n	8000de0 <__libc_init_array+0x2c>
 8000dee:	bd70      	pop	{r4, r5, r6, pc}
 8000df0:	08000e38 	.word	0x08000e38
 8000df4:	08000e38 	.word	0x08000e38
 8000df8:	08000e3c 	.word	0x08000e3c
 8000dfc:	08000e38 	.word	0x08000e38

08000e00 <COM_USART_CLK>:
 8000e00:	00004000 00020000                       .@......

08000e08 <COM_TX_PORT_CLK>:
 8000e08:	00000004 00000020                       .... ...

08000e10 <COM_RX_PORT_CLK>:
 8000e10:	00000004 00000020                       .... ...

08000e18 <COM_TX_PIN>:
 8000e18:	00200200                                .. .

08000e1c <COM_RX_PIN>:
 8000e1c:	00400400                                ..@.

08000e20 <_init>:
 8000e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e22:	bf00      	nop
 8000e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e26:	bc08      	pop	{r3}
 8000e28:	469e      	mov	lr, r3
 8000e2a:	4770      	bx	lr

08000e2c <_fini>:
 8000e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e2e:	bf00      	nop
 8000e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e32:	bc08      	pop	{r3}
 8000e34:	469e      	mov	lr, r3
 8000e36:	4770      	bx	lr
