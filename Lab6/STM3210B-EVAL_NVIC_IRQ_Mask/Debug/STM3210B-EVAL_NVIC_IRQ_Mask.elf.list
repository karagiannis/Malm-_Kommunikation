
STM3210B-EVAL_NVIC_IRQ_Mask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ffc  0800010c  0800010c  0000810c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08001108  08001108  00009108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  0800110c  0800110c  0000910c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000034  20000000  08001110  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000020  20000034  08001144  00010034  2**2
                  ALLOC
  6 ._user_heap_stack 00000100  20000054  08001144  00010054  2**0
                  ALLOC
  7 .ARM.attributes 00000029  00000000  00000000  00010034  2**0
                  CONTENTS, READONLY
  8 .debug_info   00005168  00000000  00000000  0001005d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000d96  00000000  00000000  000151c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000006d0  00000000  00000000  00015f60  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000638  00000000  00000000  00016630  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002330  00000000  00000000  00016c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000229f  00000000  00000000  00018f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000082  00000000  00000000  0001b237  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00001538  00000000  00000000  0001b2bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	080010f0 	.word	0x080010f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4803      	ldr	r0, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	080010f0 	.word	0x080010f0
 8000148:	20000038 	.word	0x20000038

0800014c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000150:	4b15      	ldr	r3, [pc, #84]	; (80001a8 <SystemInit+0x5c>)
 8000152:	4a15      	ldr	r2, [pc, #84]	; (80001a8 <SystemInit+0x5c>)
 8000154:	6812      	ldr	r2, [r2, #0]
 8000156:	f042 0201 	orr.w	r2, r2, #1
 800015a:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800015c:	4a12      	ldr	r2, [pc, #72]	; (80001a8 <SystemInit+0x5c>)
 800015e:	4b12      	ldr	r3, [pc, #72]	; (80001a8 <SystemInit+0x5c>)
 8000160:	6859      	ldr	r1, [r3, #4]
 8000162:	4b12      	ldr	r3, [pc, #72]	; (80001ac <SystemInit+0x60>)
 8000164:	400b      	ands	r3, r1
 8000166:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000168:	4a0f      	ldr	r2, [pc, #60]	; (80001a8 <SystemInit+0x5c>)
 800016a:	4b0f      	ldr	r3, [pc, #60]	; (80001a8 <SystemInit+0x5c>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000176:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000178:	4b0b      	ldr	r3, [pc, #44]	; (80001a8 <SystemInit+0x5c>)
 800017a:	4a0b      	ldr	r2, [pc, #44]	; (80001a8 <SystemInit+0x5c>)
 800017c:	6812      	ldr	r2, [r2, #0]
 800017e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000182:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000184:	4b08      	ldr	r3, [pc, #32]	; (80001a8 <SystemInit+0x5c>)
 8000186:	4a08      	ldr	r2, [pc, #32]	; (80001a8 <SystemInit+0x5c>)
 8000188:	6852      	ldr	r2, [r2, #4]
 800018a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800018e:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000190:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <SystemInit+0x5c>)
 8000192:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000196:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000198:	f000 f80c 	bl	80001b4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <SystemInit+0x64>)
 800019e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80001a2:	609a      	str	r2, [r3, #8]
#endif 
}
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	40021000 	.word	0x40021000
 80001ac:	f8ff0000 	.word	0xf8ff0000
 80001b0:	e000ed00 	.word	0xe000ed00

080001b4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80001b8:	f000 f802 	bl	80001c0 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop

080001c0 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80001c0:	b480      	push	{r7}
 80001c2:	b083      	sub	sp, #12
 80001c4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80001c6:	2300      	movs	r3, #0
 80001c8:	607b      	str	r3, [r7, #4]
 80001ca:	2300      	movs	r3, #0
 80001cc:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80001ce:	4b3a      	ldr	r3, [pc, #232]	; (80002b8 <SetSysClockTo72+0xf8>)
 80001d0:	4a39      	ldr	r2, [pc, #228]	; (80002b8 <SetSysClockTo72+0xf8>)
 80001d2:	6812      	ldr	r2, [r2, #0]
 80001d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80001d8:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80001da:	4b37      	ldr	r3, [pc, #220]	; (80002b8 <SetSysClockTo72+0xf8>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001e2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d103      	bne.n	80001f8 <SetSysClockTo72+0x38>
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80001f6:	d1f0      	bne.n	80001da <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80001f8:	4b2f      	ldr	r3, [pc, #188]	; (80002b8 <SetSysClockTo72+0xf8>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000200:	2b00      	cmp	r3, #0
 8000202:	d002      	beq.n	800020a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000204:	2301      	movs	r3, #1
 8000206:	603b      	str	r3, [r7, #0]
 8000208:	e001      	b.n	800020e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800020a:	2300      	movs	r3, #0
 800020c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	2b01      	cmp	r3, #1
 8000212:	d14b      	bne.n	80002ac <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000214:	4b29      	ldr	r3, [pc, #164]	; (80002bc <SetSysClockTo72+0xfc>)
 8000216:	4a29      	ldr	r2, [pc, #164]	; (80002bc <SetSysClockTo72+0xfc>)
 8000218:	6812      	ldr	r2, [r2, #0]
 800021a:	f042 0210 	orr.w	r2, r2, #16
 800021e:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000220:	4b26      	ldr	r3, [pc, #152]	; (80002bc <SetSysClockTo72+0xfc>)
 8000222:	4a26      	ldr	r2, [pc, #152]	; (80002bc <SetSysClockTo72+0xfc>)
 8000224:	6812      	ldr	r2, [r2, #0]
 8000226:	f022 0203 	bic.w	r2, r2, #3
 800022a:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800022c:	4b23      	ldr	r3, [pc, #140]	; (80002bc <SetSysClockTo72+0xfc>)
 800022e:	4a23      	ldr	r2, [pc, #140]	; (80002bc <SetSysClockTo72+0xfc>)
 8000230:	6812      	ldr	r2, [r2, #0]
 8000232:	f042 0202 	orr.w	r2, r2, #2
 8000236:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000238:	4b1f      	ldr	r3, [pc, #124]	; (80002b8 <SetSysClockTo72+0xf8>)
 800023a:	4a1f      	ldr	r2, [pc, #124]	; (80002b8 <SetSysClockTo72+0xf8>)
 800023c:	6852      	ldr	r2, [r2, #4]
 800023e:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000240:	4b1d      	ldr	r3, [pc, #116]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000242:	4a1d      	ldr	r2, [pc, #116]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000244:	6852      	ldr	r2, [r2, #4]
 8000246:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000248:	4b1b      	ldr	r3, [pc, #108]	; (80002b8 <SetSysClockTo72+0xf8>)
 800024a:	4a1b      	ldr	r2, [pc, #108]	; (80002b8 <SetSysClockTo72+0xf8>)
 800024c:	6852      	ldr	r2, [r2, #4]
 800024e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000252:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000254:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000256:	4a18      	ldr	r2, [pc, #96]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000258:	6852      	ldr	r2, [r2, #4]
 800025a:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800025e:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000262:	4a15      	ldr	r2, [pc, #84]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000264:	6852      	ldr	r2, [r2, #4]
 8000266:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 800026a:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <SetSysClockTo72+0xf8>)
 800026e:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000270:	6812      	ldr	r2, [r2, #0]
 8000272:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000276:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000278:	bf00      	nop
 800027a:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <SetSysClockTo72+0xf8>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000282:	2b00      	cmp	r3, #0
 8000284:	d0f9      	beq.n	800027a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000286:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000288:	4a0b      	ldr	r2, [pc, #44]	; (80002b8 <SetSysClockTo72+0xf8>)
 800028a:	6852      	ldr	r2, [r2, #4]
 800028c:	f022 0203 	bic.w	r2, r2, #3
 8000290:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000292:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000294:	4a08      	ldr	r2, [pc, #32]	; (80002b8 <SetSysClockTo72+0xf8>)
 8000296:	6852      	ldr	r2, [r2, #4]
 8000298:	f042 0202 	orr.w	r2, r2, #2
 800029c:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800029e:	bf00      	nop
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <SetSysClockTo72+0xf8>)
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	f003 030c 	and.w	r3, r3, #12
 80002a8:	2b08      	cmp	r3, #8
 80002aa:	d1f9      	bne.n	80002a0 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	40021000 	.word	0x40021000
 80002bc:	40022000 	.word	0x40022000

080002c0 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
}
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr

080002cc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80002d0:	e7fe      	b.n	80002d0 <HardFault_Handler+0x4>
 80002d2:	bf00      	nop

080002d4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80002d8:	e7fe      	b.n	80002d8 <MemManage_Handler+0x4>
 80002da:	bf00      	nop

080002dc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80002e0:	e7fe      	b.n	80002e0 <BusFault_Handler+0x4>
 80002e2:	bf00      	nop

080002e4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80002e8:	e7fe      	b.n	80002e8 <UsageFault_Handler+0x4>
 80002ea:	bf00      	nop

080002ec <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
}
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr

080002f8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
}
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <PendSV_Handler>:
  * @brief  This function handles PendSV_Handler exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
}
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
}
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr

0800031c <EXTI0_IRQHandler>:
  * @brief  This function handles EXTI Lines 0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
  if(EXTI_GetITStatus(WAKEUP_BUTTON_EXTI_LINE) != RESET)
 8000322:	2001      	movs	r0, #1
 8000324:	f000 fdd6 	bl	8000ed4 <EXTI_GetITStatus>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d019      	beq.n	8000362 <EXTI0_IRQHandler+0x46>
  {
    if(index == 0)
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <EXTI0_IRQHandler+0x4c>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d10a      	bne.n	800034c <EXTI0_IRQHandler+0x30>
 8000336:	2340      	movs	r3, #64	; 0x40
 8000338:	607b      	str	r3, [r7, #4]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) static __INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	f383 8811 	msr	BASEPRI, r3
    {
      /* Configure the BASEPRI register to 0x40 (Preemption priority = 1). 
         Only IRQ with higher preemption priority than 1 are permitted. 
         This will mask TIM3 and TIM4 IRQ from generation. */
      __set_BASEPRI(0x40);
      index++;
 8000340:	4b09      	ldr	r3, [pc, #36]	; (8000368 <EXTI0_IRQHandler+0x4c>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	1c5a      	adds	r2, r3, #1
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <EXTI0_IRQHandler+0x4c>)
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	e007      	b.n	800035c <EXTI0_IRQHandler+0x40>
 800034c:	2300      	movs	r3, #0
 800034e:	603b      	str	r3, [r7, #0]
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	f383 8811 	msr	BASEPRI, r3
      /* Configure the BASEPRI register to 0x00 (Preemption priority = 0). 
         When this BASEPRI register is set to 0, it has no effect on the current 
         priority.
         TIM2, TIM3 and TIM4 generation is controlled by NVIC priority registers. */
      __set_BASEPRI(0x00);
      index = 0;
 8000356:	4b04      	ldr	r3, [pc, #16]	; (8000368 <EXTI0_IRQHandler+0x4c>)
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
    }
    /* Clears the SEL Button EXTI line pending bits. */
    EXTI_ClearITPendingBit(WAKEUP_BUTTON_EXTI_LINE);  
 800035c:	2001      	movs	r0, #1
 800035e:	f000 fddd 	bl	8000f1c <EXTI_ClearITPendingBit>
  }
} 
 8000362:	3708      	adds	r7, #8
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	20000050 	.word	0x20000050

0800036c <TIM2_IRQHandler>:
  * @brief  This function handles TIM2 global interrupt request.
  * @param  None
  * @retval None
  */
void TIM2_IRQHandler(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* Clear TIM2 update interrupt */
  TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8000370:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000374:	2101      	movs	r1, #1
 8000376:	f000 fbdf 	bl	8000b38 <TIM_ClearITPendingBit>
  
  /* Toggle LED1 */
  STM_EVAL_LEDToggle(LED1);
 800037a:	2000      	movs	r0, #0
 800037c:	f000 f9a6 	bl	80006cc <STM_EVAL_LEDToggle>
}
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop

08000384 <TIM3_IRQHandler>:
  * @brief  This function handles TIM3 global interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* Clear TIM3 update interrupt */
  TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8000388:	4803      	ldr	r0, [pc, #12]	; (8000398 <TIM3_IRQHandler+0x14>)
 800038a:	2101      	movs	r1, #1
 800038c:	f000 fbd4 	bl	8000b38 <TIM_ClearITPendingBit>
  
  /* Toggle LED2 */
  STM_EVAL_LEDToggle(LED2);
 8000390:	2001      	movs	r0, #1
 8000392:	f000 f99b 	bl	80006cc <STM_EVAL_LEDToggle>
}
 8000396:	bd80      	pop	{r7, pc}
 8000398:	40000400 	.word	0x40000400

0800039c <TIM4_IRQHandler>:
  * @brief  This function handles TIM4 global interrupt request.
  * @param  None
  * @retval None
  */
void TIM4_IRQHandler(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* Clear TIM4 update interrupt */
  TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 80003a0:	4803      	ldr	r0, [pc, #12]	; (80003b0 <TIM4_IRQHandler+0x14>)
 80003a2:	2101      	movs	r1, #1
 80003a4:	f000 fbc8 	bl	8000b38 <TIM_ClearITPendingBit>
  
  /* Toggle LED3 */
  STM_EVAL_LEDToggle(LED3);
 80003a8:	2002      	movs	r0, #2
 80003aa:	f000 f98f 	bl	80006cc <STM_EVAL_LEDToggle>
}
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40000800 	.word	0x40000800

080003b4 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80003b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80003b6:	f000 b804 	b.w	80003c2 <LoopCopyDataInit>

080003ba <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80003ba:	4b0d      	ldr	r3, [pc, #52]	; (80003f0 <LoopFillZerobss+0x16>)
	ldr	r3, [r3, r1]
 80003bc:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80003be:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80003c0:	3104      	adds	r1, #4

080003c2 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80003c2:	480c      	ldr	r0, [pc, #48]	; (80003f4 <LoopFillZerobss+0x1a>)
	ldr	r3, =_edata
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <LoopFillZerobss+0x1e>)
	adds	r2, r0, r1
 80003c6:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80003c8:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80003ca:	f4ff aff6 	bcc.w	80003ba <CopyDataInit>
	ldr	r2, =_sbss
 80003ce:	4a0b      	ldr	r2, [pc, #44]	; (80003fc <LoopFillZerobss+0x22>)
	b	LoopFillZerobss
 80003d0:	f000 b803 	b.w	80003da <LoopFillZerobss>

080003d4 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80003d4:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80003d6:	f842 3b04 	str.w	r3, [r2], #4

080003da <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80003da:	4b09      	ldr	r3, [pc, #36]	; (8000400 <LoopFillZerobss+0x26>)
	cmp	r2, r3
 80003dc:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80003de:	f4ff aff9 	bcc.w	80003d4 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003e2:	f7ff feb3 	bl	800014c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003e6:	f000 fe19 	bl	800101c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003ea:	f000 f80d 	bl	8000408 <main>
	bx	lr
 80003ee:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80003f0:	08001110 	.word	0x08001110
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80003f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80003f8:	20000034 	.word	0x20000034
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80003fc:	20000034 	.word	0x20000034
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000400:	20000054 	.word	0x20000054

08000404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000404:	f7ff bffe 	b.w	8000404 <ADC1_2_IRQHandler>

08000408 <main>:
  * @brief   Main program.
  * @param  None
  * @retval None
  */
int main(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
       To reconfigure the default setting of SystemInit() function, refer to
       system_stm32f10x.c file
     */

  /* Initialize Leds mounted on STM3210X-EVAL board */
  STM_EVAL_LEDInit(LED1);
 800040c:	2000      	movs	r0, #0
 800040e:	f000 f903 	bl	8000618 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED2);
 8000412:	2001      	movs	r0, #1
 8000414:	f000 f900 	bl	8000618 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED3);
 8000418:	2002      	movs	r0, #2
 800041a:	f000 f8fd 	bl	8000618 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED4);
 800041e:	2003      	movs	r0, #3
 8000420:	f000 f8fa 	bl	8000618 <STM_EVAL_LEDInit>

  /* Initialize the KEY and WAKEUP buttons mounted on STM3210X-EVAL board */
  STM_EVAL_PBInit(BUTTON_KEY, BUTTON_MODE_GPIO);
 8000424:	2002      	movs	r0, #2
 8000426:	2100      	movs	r1, #0
 8000428:	f000 f96e 	bl	8000708 <STM_EVAL_PBInit>
  STM_EVAL_PBInit(BUTTON_WAKEUP, BUTTON_MODE_EXTI);
 800042c:	2000      	movs	r0, #0
 800042e:	2101      	movs	r1, #1
 8000430:	f000 f96a 	bl	8000708 <STM_EVAL_PBInit>
    
  /* TIM configuration -------------------------------------------------------*/
  TIM_Config();
 8000434:	f000 f826 	bl	8000484 <TIM_Config>

  while (1)
  { 
    /* Wait until KEY button is pressed. */
    while(STM_EVAL_PBGetState(BUTTON_KEY) == RESET)
 8000438:	bf00      	nop
 800043a:	2002      	movs	r0, #2
 800043c:	f000 f9d0 	bl	80007e0 <STM_EVAL_PBGetState>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d0f9      	beq.n	800043a <main+0x32>
    {
    }
    while(STM_EVAL_PBGetState(BUTTON_KEY) != RESET)
 8000446:	bf00      	nop
 8000448:	2002      	movs	r0, #2
 800044a:	f000 f9c9 	bl	80007e0 <STM_EVAL_PBGetState>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d1f9      	bne.n	8000448 <main+0x40>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 8000454:	b672      	cpsid	i
       exceptions with configurable priority from activating, other than through 
       the HardFault fault escalation mechanism. */
    __disable_irq();

    /* Turn LED4 ON */
    STM_EVAL_LEDOn(LED4);
 8000456:	2003      	movs	r0, #3
 8000458:	f000 f908 	bl	800066c <STM_EVAL_LEDOn>

    /* Wait until KEY button is pressed. */
    while(STM_EVAL_PBGetState(BUTTON_KEY) == RESET)
 800045c:	bf00      	nop
 800045e:	2002      	movs	r0, #2
 8000460:	f000 f9be 	bl	80007e0 <STM_EVAL_PBGetState>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d0f9      	beq.n	800045e <main+0x56>
    {
    }
    while(STM_EVAL_PBGetState(BUTTON_KEY) != RESET)
 800046a:	bf00      	nop
 800046c:	2002      	movs	r0, #2
 800046e:	f000 f9b7 	bl	80007e0 <STM_EVAL_PBGetState>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d1f9      	bne.n	800046c <main+0x64>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 8000478:	b662      	cpsie	i
    /* This instruction will allow all exceptions with configurable priority to 
       be activated. */
    __enable_irq();

    /* Turn LED4 OFF */
    STM_EVAL_LEDOff(LED4);
 800047a:	2003      	movs	r0, #3
 800047c:	f000 f90e 	bl	800069c <STM_EVAL_LEDOff>
  }
 8000480:	bf00      	nop
  TIM_Config();

  while (1)
  { 
    /* Wait until KEY button is pressed. */
    while(STM_EVAL_PBGetState(BUTTON_KEY) == RESET)
 8000482:	e7d9      	b.n	8000438 <main+0x30>

08000484 <TIM_Config>:
  * @brief  Configures the used Timers.
  * @param  None
  * @retval None
  */
void TIM_Config(void)
{ 
 8000484:	b580      	push	{r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af00      	add	r7, sp, #0
  TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
  TIM_OCInitTypeDef  TIM_OCInitStructure;
  NVIC_InitTypeDef  NVIC_InitStructure;

  /* Enable TIM2, TIM3 and TIM4 clocks */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2 | RCC_APB1Periph_TIM3 |
 800048a:	2007      	movs	r0, #7
 800048c:	2101      	movs	r1, #1
 800048e:	f000 fb81 	bl	8000b94 <RCC_APB1PeriphClockCmd>
                         RCC_APB1Periph_TIM4, ENABLE);

  /* TIM2 configuration */
  TIM_TimeBaseStructure.TIM_Period = 0x4AF;          
 8000492:	f240 43af 	movw	r3, #1199	; 0x4af
 8000496:	833b      	strh	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = ((SystemCoreClock/1200) - 1);
 8000498:	4b5b      	ldr	r3, [pc, #364]	; (8000608 <TIM_Config+0x184>)
 800049a:	681a      	ldr	r2, [r3, #0]
 800049c:	4b5b      	ldr	r3, [pc, #364]	; (800060c <TIM_Config+0x188>)
 800049e:	fba3 1302 	umull	r1, r3, r3, r2
 80004a2:	09db      	lsrs	r3, r3, #7
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	3b01      	subs	r3, #1
 80004a8:	b29b      	uxth	r3, r3
 80004aa:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = 0x0;    
 80004ac:	2300      	movs	r3, #0
 80004ae:	837b      	strh	r3, [r7, #26]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  
 80004b0:	2300      	movs	r3, #0
 80004b2:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80004b4:	f107 0314 	add.w	r3, r7, #20
 80004b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80004bc:	4619      	mov	r1, r3
 80004be:	f000 f9a9 	bl	8000814 <TIM_TimeBaseInit>
  TIM_OCStructInit(&TIM_OCInitStructure);
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	4618      	mov	r0, r3
 80004c6:	f000 faad 	bl	8000a24 <TIM_OCStructInit>
  
  /* Output Compare Timing Mode configuration: Channel1 */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
 80004ca:	2300      	movs	r3, #0
 80004cc:	80bb      	strh	r3, [r7, #4]
  TIM_OCInitStructure.TIM_Pulse = 0x0;  
 80004ce:	2300      	movs	r3, #0
 80004d0:	817b      	strh	r3, [r7, #10]
  TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80004d8:	4619      	mov	r1, r3
 80004da:	f000 fa17 	bl	800090c <TIM_OC1Init>
  
  /* TIM3 configuration */
  TIM_TimeBaseStructure.TIM_Period = 0x95F;    
 80004de:	f640 135f 	movw	r3, #2399	; 0x95f
 80004e2:	833b      	strh	r3, [r7, #24]
  TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 80004e4:	f107 0314 	add.w	r3, r7, #20
 80004e8:	4849      	ldr	r0, [pc, #292]	; (8000610 <TIM_Config+0x18c>)
 80004ea:	4619      	mov	r1, r3
 80004ec:	f000 f992 	bl	8000814 <TIM_TimeBaseInit>
  
  /* Output Compare Timing Mode configuration: Channel1 */
  TIM_OC1Init(TIM3, &TIM_OCInitStructure);
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	4847      	ldr	r0, [pc, #284]	; (8000610 <TIM_Config+0x18c>)
 80004f4:	4619      	mov	r1, r3
 80004f6:	f000 fa09 	bl	800090c <TIM_OC1Init>
  
  /* TIM4 configuration */
  TIM_TimeBaseStructure.TIM_Period = 0xE0F;  
 80004fa:	f640 630f 	movw	r3, #3599	; 0xe0f
 80004fe:	833b      	strh	r3, [r7, #24]
  TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 8000500:	f107 0314 	add.w	r3, r7, #20
 8000504:	4843      	ldr	r0, [pc, #268]	; (8000614 <TIM_Config+0x190>)
 8000506:	4619      	mov	r1, r3
 8000508:	f000 f984 	bl	8000814 <TIM_TimeBaseInit>
  
  /* Output Compare Timing Mode configuration: Channel1 */
  TIM_OC1Init(TIM4, &TIM_OCInitStructure);
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	4841      	ldr	r0, [pc, #260]	; (8000614 <TIM_Config+0x190>)
 8000510:	4619      	mov	r1, r3
 8000512:	f000 f9fb 	bl	800090c <TIM_OC1Init>

  /* Immediate load of TIM2,TIM3 and TIM4 Precaler values */
  TIM_PrescalerConfig(TIM2, ((SystemCoreClock/1200) - 1), TIM_PSCReloadMode_Immediate);
 8000516:	4b3c      	ldr	r3, [pc, #240]	; (8000608 <TIM_Config+0x184>)
 8000518:	681a      	ldr	r2, [r3, #0]
 800051a:	4b3c      	ldr	r3, [pc, #240]	; (800060c <TIM_Config+0x188>)
 800051c:	fba3 1302 	umull	r1, r3, r3, r2
 8000520:	09db      	lsrs	r3, r3, #7
 8000522:	b29b      	uxth	r3, r3
 8000524:	3b01      	subs	r3, #1
 8000526:	b29b      	uxth	r3, r3
 8000528:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800052c:	4619      	mov	r1, r3
 800052e:	2201      	movs	r2, #1
 8000530:	f000 fade 	bl	8000af0 <TIM_PrescalerConfig>
  TIM_PrescalerConfig(TIM3, ((SystemCoreClock/1200) - 1), TIM_PSCReloadMode_Immediate);
 8000534:	4b34      	ldr	r3, [pc, #208]	; (8000608 <TIM_Config+0x184>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b34      	ldr	r3, [pc, #208]	; (800060c <TIM_Config+0x188>)
 800053a:	fba3 1302 	umull	r1, r3, r3, r2
 800053e:	09db      	lsrs	r3, r3, #7
 8000540:	b29b      	uxth	r3, r3
 8000542:	3b01      	subs	r3, #1
 8000544:	b29b      	uxth	r3, r3
 8000546:	4832      	ldr	r0, [pc, #200]	; (8000610 <TIM_Config+0x18c>)
 8000548:	4619      	mov	r1, r3
 800054a:	2201      	movs	r2, #1
 800054c:	f000 fad0 	bl	8000af0 <TIM_PrescalerConfig>
  TIM_PrescalerConfig(TIM4, ((SystemCoreClock/1200) - 1), TIM_PSCReloadMode_Immediate);
 8000550:	4b2d      	ldr	r3, [pc, #180]	; (8000608 <TIM_Config+0x184>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b2d      	ldr	r3, [pc, #180]	; (800060c <TIM_Config+0x188>)
 8000556:	fba3 1302 	umull	r1, r3, r3, r2
 800055a:	09db      	lsrs	r3, r3, #7
 800055c:	b29b      	uxth	r3, r3
 800055e:	3b01      	subs	r3, #1
 8000560:	b29b      	uxth	r3, r3
 8000562:	482c      	ldr	r0, [pc, #176]	; (8000614 <TIM_Config+0x190>)
 8000564:	4619      	mov	r1, r3
 8000566:	2201      	movs	r2, #1
 8000568:	f000 fac2 	bl	8000af0 <TIM_PrescalerConfig>

  /* Clear TIM2, TIM3 and TIM4 update pending flags */
  TIM_ClearFlag(TIM2, TIM_FLAG_Update);
 800056c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000570:	2101      	movs	r1, #1
 8000572:	f000 fad1 	bl	8000b18 <TIM_ClearFlag>
  TIM_ClearFlag(TIM3, TIM_FLAG_Update);
 8000576:	4826      	ldr	r0, [pc, #152]	; (8000610 <TIM_Config+0x18c>)
 8000578:	2101      	movs	r1, #1
 800057a:	f000 facd 	bl	8000b18 <TIM_ClearFlag>
  TIM_ClearFlag(TIM4, TIM_FLAG_Update);
 800057e:	4825      	ldr	r0, [pc, #148]	; (8000614 <TIM_Config+0x190>)
 8000580:	2101      	movs	r1, #1
 8000582:	f000 fac9 	bl	8000b18 <TIM_ClearFlag>

  /* Configure two bits for preemption priority */
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 8000586:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800058a:	f000 fcd5 	bl	8000f38 <NVIC_PriorityGroupConfig>

  /* Enable the TIM2 Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 800058e:	231c      	movs	r3, #28
 8000590:	703b      	strb	r3, [r7, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	707b      	strb	r3, [r7, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	70bb      	strb	r3, [r7, #2]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800059a:	2301      	movs	r3, #1
 800059c:	70fb      	strb	r3, [r7, #3]
  NVIC_Init(&NVIC_InitStructure);
 800059e:	463b      	mov	r3, r7
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fcdb 	bl	8000f5c <NVIC_Init>
  
  /* Enable the TIM3 Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 80005a6:	231d      	movs	r3, #29
 80005a8:	703b      	strb	r3, [r7, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 80005aa:	2301      	movs	r3, #1
 80005ac:	707b      	strb	r3, [r7, #1]
  NVIC_Init(&NVIC_InitStructure);
 80005ae:	463b      	mov	r3, r7
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fcd3 	bl	8000f5c <NVIC_Init>

  /* Enable the TIM4 Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;
 80005b6:	231e      	movs	r3, #30
 80005b8:	703b      	strb	r3, [r7, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	707b      	strb	r3, [r7, #1]
  NVIC_Init(&NVIC_InitStructure);
 80005be:	463b      	mov	r3, r7
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fccb 	bl	8000f5c <NVIC_Init>

  /* Enable TIM2, TIM3 and TIM4 Update interrupts */
  TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 80005c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005ca:	2101      	movs	r1, #1
 80005cc:	2201      	movs	r2, #1
 80005ce:	f000 fa6b 	bl	8000aa8 <TIM_ITConfig>
  TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 80005d2:	480f      	ldr	r0, [pc, #60]	; (8000610 <TIM_Config+0x18c>)
 80005d4:	2101      	movs	r1, #1
 80005d6:	2201      	movs	r2, #1
 80005d8:	f000 fa66 	bl	8000aa8 <TIM_ITConfig>
  TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 80005dc:	480d      	ldr	r0, [pc, #52]	; (8000614 <TIM_Config+0x190>)
 80005de:	2101      	movs	r1, #1
 80005e0:	2201      	movs	r2, #1
 80005e2:	f000 fa61 	bl	8000aa8 <TIM_ITConfig>

  /* TIM2, TIM3 and TIM4 enable counters */
  TIM_Cmd(TIM2, ENABLE);
 80005e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005ea:	2101      	movs	r1, #1
 80005ec:	f000 fa3c 	bl	8000a68 <TIM_Cmd>
  TIM_Cmd(TIM3, ENABLE);
 80005f0:	4807      	ldr	r0, [pc, #28]	; (8000610 <TIM_Config+0x18c>)
 80005f2:	2101      	movs	r1, #1
 80005f4:	f000 fa38 	bl	8000a68 <TIM_Cmd>
  TIM_Cmd(TIM4, ENABLE);
 80005f8:	4806      	ldr	r0, [pc, #24]	; (8000614 <TIM_Config+0x190>)
 80005fa:	2101      	movs	r1, #1
 80005fc:	f000 fa34 	bl	8000a68 <TIM_Cmd>
}
 8000600:	3720      	adds	r7, #32
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000000 	.word	0x20000000
 800060c:	1b4e81b5 	.word	0x1b4e81b5
 8000610:	40000400 	.word	0x40000400
 8000614:	40000800 	.word	0x40000800

08000618 <STM_EVAL_LEDInit>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_APB2PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8000622:	79fa      	ldrb	r2, [r7, #7]
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <STM_EVAL_LEDInit+0x48>)
 8000626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800062a:	4618      	mov	r0, r3
 800062c:	2101      	movs	r1, #1
 800062e:	f000 fa93 	bl	8000b58 <RCC_APB2PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8000632:	79fa      	ldrb	r2, [r7, #7]
 8000634:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <STM_EVAL_LEDInit+0x4c>)
 8000636:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800063a:	81bb      	strh	r3, [r7, #12]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800063c:	2310      	movs	r3, #16
 800063e:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000640:	2303      	movs	r3, #3
 8000642:	73bb      	strb	r3, [r7, #14]

  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8000644:	79fa      	ldrb	r2, [r7, #7]
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <STM_EVAL_LEDInit+0x50>)
 8000648:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	4610      	mov	r0, r2
 8000652:	4619      	mov	r1, r3
 8000654:	f000 fabc 	bl	8000bd0 <GPIO_Init>
}
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	08001070 	.word	0x08001070
 8000664:	08001068 	.word	0x08001068
 8000668:	20000004 	.word	0x20000004

0800066c <STM_EVAL_LEDOn>:
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRR = GPIO_PIN[Led];     
 8000676:	79fa      	ldrb	r2, [r7, #7]
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <STM_EVAL_LEDOn+0x28>)
 800067a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800067e:	79f9      	ldrb	r1, [r7, #7]
 8000680:	4a05      	ldr	r2, [pc, #20]	; (8000698 <STM_EVAL_LEDOn+0x2c>)
 8000682:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000686:	611a      	str	r2, [r3, #16]
}
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000004 	.word	0x20000004
 8000698:	08001068 	.word	0x08001068

0800069c <STM_EVAL_LEDOff>:
  *     @arg LED3
  *     @arg LED4 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BRR = GPIO_PIN[Led];  
 80006a6:	79fa      	ldrb	r2, [r7, #7]
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <STM_EVAL_LEDOff+0x28>)
 80006aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006ae:	79f9      	ldrb	r1, [r7, #7]
 80006b0:	4a05      	ldr	r2, [pc, #20]	; (80006c8 <STM_EVAL_LEDOff+0x2c>)
 80006b2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80006b6:	615a      	str	r2, [r3, #20]
}
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	20000004 	.word	0x20000004
 80006c8:	08001068 	.word	0x08001068

080006cc <STM_EVAL_LEDToggle>:
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 80006d6:	79fa      	ldrb	r2, [r7, #7]
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <STM_EVAL_LEDToggle+0x34>)
 80006da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006de:	79f9      	ldrb	r1, [r7, #7]
 80006e0:	4a07      	ldr	r2, [pc, #28]	; (8000700 <STM_EVAL_LEDToggle+0x34>)
 80006e2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80006e6:	68d1      	ldr	r1, [r2, #12]
 80006e8:	79f8      	ldrb	r0, [r7, #7]
 80006ea:	4a06      	ldr	r2, [pc, #24]	; (8000704 <STM_EVAL_LEDToggle+0x38>)
 80006ec:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 80006f0:	404a      	eors	r2, r1
 80006f2:	60da      	str	r2, [r3, #12]
}
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	20000004 	.word	0x20000004
 8000704:	08001068 	.word	0x08001068

08000708 <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                     generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	4602      	mov	r2, r0
 8000710:	460b      	mov	r3, r1
 8000712:	71fa      	strb	r2, [r7, #7]
 8000714:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_APB2PeriphClockCmd(BUTTON_CLK[Button] | RCC_APB2Periph_AFIO, ENABLE);
 8000716:	79fa      	ldrb	r2, [r7, #7]
 8000718:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <STM_EVAL_PBInit+0xbc>)
 800071a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	4618      	mov	r0, r3
 8000724:	2101      	movs	r1, #1
 8000726:	f000 fa17 	bl	8000b58 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input floating */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800072a:	2304      	movs	r3, #4
 800072c:	75fb      	strb	r3, [r7, #23]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 800072e:	79fa      	ldrb	r2, [r7, #7]
 8000730:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <STM_EVAL_PBInit+0xc0>)
 8000732:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000736:	82bb      	strh	r3, [r7, #20]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8000738:	79fa      	ldrb	r2, [r7, #7]
 800073a:	4b24      	ldr	r3, [pc, #144]	; (80007cc <STM_EVAL_PBInit+0xc4>)
 800073c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4610      	mov	r0, r2
 8000746:	4619      	mov	r1, r3
 8000748:	f000 fa42 	bl	8000bd0 <GPIO_Init>


  if (Button_Mode == BUTTON_MODE_EXTI)
 800074c:	79bb      	ldrb	r3, [r7, #6]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d134      	bne.n	80007bc <STM_EVAL_PBInit+0xb4>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    GPIO_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8000752:	79fa      	ldrb	r2, [r7, #7]
 8000754:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <STM_EVAL_PBInit+0xc8>)
 8000756:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800075a:	b2da      	uxtb	r2, r3
 800075c:	79f9      	ldrb	r1, [r7, #7]
 800075e:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <STM_EVAL_PBInit+0xcc>)
 8000760:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000764:	b2db      	uxtb	r3, r3
 8000766:	4610      	mov	r0, r2
 8000768:	4619      	mov	r1, r3
 800076a:	f000 fb07 	bl	8000d7c <GPIO_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 800076e:	79fa      	ldrb	r2, [r7, #7]
 8000770:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <STM_EVAL_PBInit+0xd0>)
 8000772:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000776:	60fb      	str	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000778:	2300      	movs	r3, #0
 800077a:	743b      	strb	r3, [r7, #16]

    if(Button != BUTTON_WAKEUP)
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d002      	beq.n	8000788 <STM_EVAL_PBInit+0x80>
    {
      EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;  
 8000782:	230c      	movs	r3, #12
 8000784:	747b      	strb	r3, [r7, #17]
 8000786:	e001      	b.n	800078c <STM_EVAL_PBInit+0x84>
    }
    else
    {
      EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8000788:	2308      	movs	r3, #8
 800078a:	747b      	strb	r3, [r7, #17]
    }
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800078c:	2301      	movs	r3, #1
 800078e:	74bb      	strb	r3, [r7, #18]
    EXTI_Init(&EXTI_InitStructure);
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	4618      	mov	r0, r3
 8000796:	f000 fb2f 	bl	8000df8 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 800079a:	79fa      	ldrb	r2, [r7, #7]
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <STM_EVAL_PBInit+0xd4>)
 800079e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	723b      	strb	r3, [r7, #8]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 80007a6:	230f      	movs	r3, #15
 80007a8:	727b      	strb	r3, [r7, #9]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 80007aa:	230f      	movs	r3, #15
 80007ac:	72bb      	strb	r3, [r7, #10]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80007ae:	2301      	movs	r3, #1
 80007b0:	72fb      	strb	r3, [r7, #11]

    NVIC_Init(&NVIC_InitStructure); 
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 fbd0 	bl	8000f5c <NVIC_Init>
  }
}
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	08001090 	.word	0x08001090
 80007c8:	08001080 	.word	0x08001080
 80007cc:	20000014 	.word	0x20000014
 80007d0:	080010c0 	.word	0x080010c0
 80007d4:	080010d0 	.word	0x080010d0
 80007d8:	080010b0 	.word	0x080010b0
 80007dc:	080010e0 	.word	0x080010e0

080007e0 <STM_EVAL_PBGetState>:
  *     @arg BUTTON_DOWN: Joystick Down Push Button
  *     @arg BUTTON_SEL: Joystick Sel Push Button    
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80007ea:	79fa      	ldrb	r2, [r7, #7]
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <STM_EVAL_PBGetState+0x2c>)
 80007ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007f2:	79f9      	ldrb	r1, [r7, #7]
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <STM_EVAL_PBGetState+0x30>)
 80007f6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80007fa:	4610      	mov	r0, r2
 80007fc:	4619      	mov	r1, r3
 80007fe:	f000 faa3 	bl	8000d48 <GPIO_ReadInputDataBit>
 8000802:	4603      	mov	r3, r0
}
 8000804:	4618      	mov	r0, r3
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000014 	.word	0x20000014
 8000810:	08001080 	.word	0x08001080

08000814 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	4b2e      	ldr	r3, [pc, #184]	; (80008e4 <TIM_TimeBaseInit+0xd0>)
 800082c:	429a      	cmp	r2, r3
 800082e:	d013      	beq.n	8000858 <TIM_TimeBaseInit+0x44>
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	4b2d      	ldr	r3, [pc, #180]	; (80008e8 <TIM_TimeBaseInit+0xd4>)
 8000834:	429a      	cmp	r2, r3
 8000836:	d00f      	beq.n	8000858 <TIM_TimeBaseInit+0x44>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800083e:	d00b      	beq.n	8000858 <TIM_TimeBaseInit+0x44>
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <TIM_TimeBaseInit+0xd8>)
 8000844:	429a      	cmp	r2, r3
 8000846:	d007      	beq.n	8000858 <TIM_TimeBaseInit+0x44>
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <TIM_TimeBaseInit+0xdc>)
 800084c:	429a      	cmp	r2, r3
 800084e:	d003      	beq.n	8000858 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <TIM_TimeBaseInit+0xe0>)
 8000854:	429a      	cmp	r2, r3
 8000856:	d108      	bne.n	800086a <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000858:	89fb      	ldrh	r3, [r7, #14]
 800085a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800085e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	885a      	ldrh	r2, [r3, #2]
 8000864:	89fb      	ldrh	r3, [r7, #14]
 8000866:	4313      	orrs	r3, r2
 8000868:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <TIM_TimeBaseInit+0xe4>)
 800086e:	429a      	cmp	r2, r3
 8000870:	d00c      	beq.n	800088c <TIM_TimeBaseInit+0x78>
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	4b21      	ldr	r3, [pc, #132]	; (80008fc <TIM_TimeBaseInit+0xe8>)
 8000876:	429a      	cmp	r2, r3
 8000878:	d008      	beq.n	800088c <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 800087a:	89fb      	ldrh	r3, [r7, #14]
 800087c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000880:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	88da      	ldrh	r2, [r3, #6]
 8000886:	89fb      	ldrh	r3, [r7, #14]
 8000888:	4313      	orrs	r3, r2
 800088a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	89fa      	ldrh	r2, [r7, #14]
 8000890:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	889a      	ldrh	r2, [r3, #4]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	881a      	ldrh	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <TIM_TimeBaseInit+0xd0>)
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d00f      	beq.n	80008ca <TIM_TimeBaseInit+0xb6>
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <TIM_TimeBaseInit+0xd4>)
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d00b      	beq.n	80008ca <TIM_TimeBaseInit+0xb6>
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <TIM_TimeBaseInit+0xec>)
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d007      	beq.n	80008ca <TIM_TimeBaseInit+0xb6>
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <TIM_TimeBaseInit+0xf0>)
 80008be:	429a      	cmp	r2, r3
 80008c0:	d003      	beq.n	80008ca <TIM_TimeBaseInit+0xb6>
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <TIM_TimeBaseInit+0xf4>)
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d104      	bne.n	80008d4 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	7a1b      	ldrb	r3, [r3, #8]
 80008ce:	461a      	mov	r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2201      	movs	r2, #1
 80008d8:	829a      	strh	r2, [r3, #20]
}
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	40012c00 	.word	0x40012c00
 80008e8:	40013400 	.word	0x40013400
 80008ec:	40000400 	.word	0x40000400
 80008f0:	40000800 	.word	0x40000800
 80008f4:	40000c00 	.word	0x40000c00
 80008f8:	40001000 	.word	0x40001000
 80008fc:	40001400 	.word	0x40001400
 8000900:	40014000 	.word	0x40014000
 8000904:	40014400 	.word	0x40014400
 8000908:	40014800 	.word	0x40014800

0800090c <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	817b      	strh	r3, [r7, #10]
 800091a:	2300      	movs	r3, #0
 800091c:	81fb      	strh	r3, [r7, #14]
 800091e:	2300      	movs	r3, #0
 8000920:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	8c1b      	ldrh	r3, [r3, #32]
 8000926:	b29b      	uxth	r3, r3
 8000928:	f023 0301 	bic.w	r3, r3, #1
 800092c:	b29a      	uxth	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	8c1b      	ldrh	r3, [r3, #32]
 8000936:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	889b      	ldrh	r3, [r3, #4]
 800093c:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	8b1b      	ldrh	r3, [r3, #24]
 8000942:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8000944:	897b      	ldrh	r3, [r7, #10]
 8000946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800094a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 800094c:	897b      	ldrh	r3, [r7, #10]
 800094e:	f023 0303 	bic.w	r3, r3, #3
 8000952:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	881a      	ldrh	r2, [r3, #0]
 8000958:	897b      	ldrh	r3, [r7, #10]
 800095a:	4313      	orrs	r3, r2
 800095c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800095e:	89fb      	ldrh	r3, [r7, #14]
 8000960:	f023 0302 	bic.w	r3, r3, #2
 8000964:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	891a      	ldrh	r2, [r3, #8]
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	4313      	orrs	r3, r2
 800096e:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	885a      	ldrh	r2, [r3, #2]
 8000974:	89fb      	ldrh	r3, [r7, #14]
 8000976:	4313      	orrs	r3, r2
 8000978:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <TIM_OC1Init+0x104>)
 800097e:	429a      	cmp	r2, r3
 8000980:	d00f      	beq.n	80009a2 <TIM_OC1Init+0x96>
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <TIM_OC1Init+0x108>)
 8000986:	429a      	cmp	r2, r3
 8000988:	d00b      	beq.n	80009a2 <TIM_OC1Init+0x96>
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <TIM_OC1Init+0x10c>)
 800098e:	429a      	cmp	r2, r3
 8000990:	d007      	beq.n	80009a2 <TIM_OC1Init+0x96>
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <TIM_OC1Init+0x110>)
 8000996:	429a      	cmp	r2, r3
 8000998:	d003      	beq.n	80009a2 <TIM_OC1Init+0x96>
     (TIMx == TIM16)|| (TIMx == TIM17))
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <TIM_OC1Init+0x114>)
 800099e:	429a      	cmp	r2, r3
 80009a0:	d123      	bne.n	80009ea <TIM_OC1Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 80009a2:	89fb      	ldrh	r3, [r7, #14]
 80009a4:	f023 0308 	bic.w	r3, r3, #8
 80009a8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	895a      	ldrh	r2, [r3, #10]
 80009ae:	89fb      	ldrh	r3, [r7, #14]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 80009b4:	89fb      	ldrh	r3, [r7, #14]
 80009b6:	f023 0304 	bic.w	r3, r3, #4
 80009ba:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	889a      	ldrh	r2, [r3, #4]
 80009c0:	89fb      	ldrh	r3, [r7, #14]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 80009c6:	89bb      	ldrh	r3, [r7, #12]
 80009c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009cc:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 80009ce:	89bb      	ldrh	r3, [r7, #12]
 80009d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80009d4:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	899a      	ldrh	r2, [r3, #12]
 80009da:	89bb      	ldrh	r3, [r7, #12]
 80009dc:	4313      	orrs	r3, r2
 80009de:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	89da      	ldrh	r2, [r3, #14]
 80009e4:	89bb      	ldrh	r3, [r7, #12]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	89ba      	ldrh	r2, [r7, #12]
 80009ee:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	897a      	ldrh	r2, [r7, #10]
 80009f4:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	88da      	ldrh	r2, [r3, #6]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	89fa      	ldrh	r2, [r7, #14]
 8000a02:	841a      	strh	r2, [r3, #32]
}
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40012c00 	.word	0x40012c00
 8000a14:	40013400 	.word	0x40013400
 8000a18:	40014000 	.word	0x40014000
 8000a1c:	40014400 	.word	0x40014400
 8000a20:	40014800 	.word	0x40014800

08000a24 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct : pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2200      	movs	r2, #0
 8000a36:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	80da      	strh	r2, [r3, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	811a      	strh	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	815a      	strh	r2, [r3, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	81da      	strh	r2, [r3, #14]
}
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	460b      	mov	r3, r1
 8000a72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a74:	78fb      	ldrb	r3, [r7, #3]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d008      	beq.n	8000a8c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	801a      	strh	r2, [r3, #0]
 8000a8a:	e007      	b.n	8000a9c <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	f023 0301 	bic.w	r3, r3, #1
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	801a      	strh	r2, [r3, #0]
  }
}
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	460a      	mov	r2, r1
 8000ab4:	807a      	strh	r2, [r7, #2]
 8000ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000ab8:	787b      	ldrb	r3, [r7, #1]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d008      	beq.n	8000ad0 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	899b      	ldrh	r3, [r3, #12]
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	887b      	ldrh	r3, [r7, #2]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	819a      	strh	r2, [r3, #12]
 8000ace:	e009      	b.n	8000ae4 <TIM_ITConfig+0x3c>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	899b      	ldrh	r3, [r3, #12]
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	887b      	ldrh	r3, [r7, #2]
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	4013      	ands	r3, r2
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	819a      	strh	r2, [r3, #12]
  }
}
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <TIM_PrescalerConfig>:
  *     @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *     @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediately.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	4613      	mov	r3, r2
 8000afa:	460a      	mov	r2, r1
 8000afc:	807a      	strh	r2, [r7, #2]
 8000afe:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	887a      	ldrh	r2, [r7, #2]
 8000b04:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	883a      	ldrh	r2, [r7, #0]
 8000b0a:	829a      	strh	r2, [r3, #20]
}
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <TIM_ClearFlag>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.   
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	460b      	mov	r3, r1
 8000b22:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8000b24:	887b      	ldrh	r3, [r7, #2]
 8000b26:	43db      	mvns	r3, r3
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	821a      	strh	r2, [r3, #16]
}
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000b44:	887b      	ldrh	r3, [r7, #2]
 8000b46:	43db      	mvns	r3, r3
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	821a      	strh	r2, [r3, #16]
}
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b64:	78fb      	ldrb	r3, [r7, #3]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d006      	beq.n	8000b78 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <RCC_APB2PeriphClockCmd+0x38>)
 8000b6c:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <RCC_APB2PeriphClockCmd+0x38>)
 8000b6e:	6991      	ldr	r1, [r2, #24]
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	430a      	orrs	r2, r1
 8000b74:	619a      	str	r2, [r3, #24]
 8000b76:	e006      	b.n	8000b86 <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <RCC_APB2PeriphClockCmd+0x38>)
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <RCC_APB2PeriphClockCmd+0x38>)
 8000b7c:	6991      	ldr	r1, [r2, #24]
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	43d2      	mvns	r2, r2
 8000b82:	400a      	ands	r2, r1
 8000b84:	619a      	str	r2, [r3, #24]
  }
}
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	40021000 	.word	0x40021000

08000b94 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ba0:	78fb      	ldrb	r3, [r7, #3]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d006      	beq.n	8000bb4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <RCC_APB1PeriphClockCmd+0x38>)
 8000ba8:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <RCC_APB1PeriphClockCmd+0x38>)
 8000baa:	69d1      	ldr	r1, [r2, #28]
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	61da      	str	r2, [r3, #28]
 8000bb2:	e006      	b.n	8000bc2 <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <RCC_APB1PeriphClockCmd+0x38>)
 8000bb6:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <RCC_APB1PeriphClockCmd+0x38>)
 8000bb8:	69d1      	ldr	r1, [r2, #28]
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	43d2      	mvns	r2, r2
 8000bbe:	400a      	ands	r2, r1
 8000bc0:	61da      	str	r2, [r3, #28]
  }
}
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b089      	sub	sp, #36	; 0x24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	78db      	ldrb	r3, [r3, #3]
 8000bf6:	f003 030f 	and.w	r3, r3, #15
 8000bfa:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	78db      	ldrb	r3, [r3, #3]
 8000c00:	f003 0310 	and.w	r3, r3, #16
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d004      	beq.n	8000c12 <GPIO_Init+0x42>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	789b      	ldrb	r3, [r3, #2]
 8000c0c:	69fa      	ldr	r2, [r7, #28]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d044      	beq.n	8000ca6 <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
 8000c26:	e038      	b.n	8000c9a <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d126      	bne.n	8000c94 <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	220f      	movs	r2, #15
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	69fa      	ldr	r2, [r7, #28]
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	697a      	ldr	r2, [r7, #20]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	78db      	ldrb	r3, [r3, #3]
 8000c72:	2b28      	cmp	r3, #40	; 0x28
 8000c74:	d105      	bne.n	8000c82 <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	409a      	lsls	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	615a      	str	r2, [r3, #20]
 8000c80:	e008      	b.n	8000c94 <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	78db      	ldrb	r3, [r3, #3]
 8000c86:	2b48      	cmp	r3, #72	; 0x48
 8000c88:	d104      	bne.n	8000c94 <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	409a      	lsls	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	3301      	adds	r3, #1
 8000c98:	61bb      	str	r3, [r7, #24]
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	2b07      	cmp	r3, #7
 8000c9e:	d9c3      	bls.n	8000c28 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	2bff      	cmp	r3, #255	; 0xff
 8000cac:	d946      	bls.n	8000d3c <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61bb      	str	r3, [r7, #24]
 8000cb8:	e03a      	b.n	8000d30 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	3308      	adds	r3, #8
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d127      	bne.n	8000d2a <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	220f      	movs	r2, #15
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	43db      	mvns	r3, r3
 8000cee:	697a      	ldr	r2, [r7, #20]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	69fa      	ldr	r2, [r7, #28]
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	78db      	ldrb	r3, [r3, #3]
 8000d06:	2b28      	cmp	r3, #40	; 0x28
 8000d08:	d105      	bne.n	8000d16 <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	3308      	adds	r3, #8
 8000d0e:	2201      	movs	r2, #1
 8000d10:	409a      	lsls	r2, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	78db      	ldrb	r3, [r3, #3]
 8000d1a:	2b48      	cmp	r3, #72	; 0x48
 8000d1c:	d105      	bne.n	8000d2a <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	3308      	adds	r3, #8
 8000d22:	2201      	movs	r2, #1
 8000d24:	409a      	lsls	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	61bb      	str	r3, [r7, #24]
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	2b07      	cmp	r3, #7
 8000d34:	d9c1      	bls.n	8000cba <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	605a      	str	r2, [r3, #4]
  }
}
 8000d3c:	3724      	adds	r7, #36	; 0x24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689a      	ldr	r2, [r3, #8]
 8000d5c:	887b      	ldrh	r3, [r7, #2]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d002      	beq.n	8000d6a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000d64:	2301      	movs	r3, #1
 8000d66:	73fb      	strb	r3, [r7, #15]
 8000d68:	e001      	b.n	8000d6e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8000d7c:	b490      	push	{r4, r7}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4602      	mov	r2, r0
 8000d84:	460b      	mov	r3, r1
 8000d86:	71fa      	strb	r2, [r7, #7]
 8000d88:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8000d8e:	79bb      	ldrb	r3, [r7, #6]
 8000d90:	f003 0303 	and.w	r3, r3, #3
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	220f      	movs	r2, #15
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <GPIO_EXTILineConfig+0x78>)
 8000da0:	79ba      	ldrb	r2, [r7, #6]
 8000da2:	0892      	lsrs	r2, r2, #2
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	4913      	ldr	r1, [pc, #76]	; (8000df4 <GPIO_EXTILineConfig+0x78>)
 8000da8:	79b8      	ldrb	r0, [r7, #6]
 8000daa:	0880      	lsrs	r0, r0, #2
 8000dac:	b2c0      	uxtb	r0, r0
 8000dae:	3002      	adds	r0, #2
 8000db0:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000db4:	68f9      	ldr	r1, [r7, #12]
 8000db6:	43c9      	mvns	r1, r1
 8000db8:	4001      	ands	r1, r0
 8000dba:	3202      	adds	r2, #2
 8000dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <GPIO_EXTILineConfig+0x78>)
 8000dc2:	79ba      	ldrb	r2, [r7, #6]
 8000dc4:	0892      	lsrs	r2, r2, #2
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	490a      	ldr	r1, [pc, #40]	; (8000df4 <GPIO_EXTILineConfig+0x78>)
 8000dca:	79b8      	ldrb	r0, [r7, #6]
 8000dcc:	0880      	lsrs	r0, r0, #2
 8000dce:	b2c0      	uxtb	r0, r0
 8000dd0:	3002      	adds	r0, #2
 8000dd2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000dd6:	79fc      	ldrb	r4, [r7, #7]
 8000dd8:	79b9      	ldrb	r1, [r7, #6]
 8000dda:	f001 0103 	and.w	r1, r1, #3
 8000dde:	0089      	lsls	r1, r1, #2
 8000de0:	fa04 f101 	lsl.w	r1, r4, r1
 8000de4:	4301      	orrs	r1, r0
 8000de6:	3202      	adds	r2, #2
 8000de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc90      	pop	{r4, r7}
 8000df2:	4770      	bx	lr
 8000df4:	40010000 	.word	0x40010000

08000df8 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000e04:	4b32      	ldr	r3, [pc, #200]	; (8000ed0 <EXTI_Init+0xd8>)
 8000e06:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	799b      	ldrb	r3, [r3, #6]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d04d      	beq.n	8000eac <EXTI_Init+0xb4>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000e10:	4b2f      	ldr	r3, [pc, #188]	; (8000ed0 <EXTI_Init+0xd8>)
 8000e12:	4a2f      	ldr	r2, [pc, #188]	; (8000ed0 <EXTI_Init+0xd8>)
 8000e14:	6811      	ldr	r1, [r2, #0]
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	6812      	ldr	r2, [r2, #0]
 8000e1a:	43d2      	mvns	r2, r2
 8000e1c:	400a      	ands	r2, r1
 8000e1e:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000e20:	4b2b      	ldr	r3, [pc, #172]	; (8000ed0 <EXTI_Init+0xd8>)
 8000e22:	4a2b      	ldr	r2, [pc, #172]	; (8000ed0 <EXTI_Init+0xd8>)
 8000e24:	6851      	ldr	r1, [r2, #4]
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	6812      	ldr	r2, [r2, #0]
 8000e2a:	43d2      	mvns	r2, r2
 8000e2c:	400a      	ands	r2, r1
 8000e2e:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	791b      	ldrb	r3, [r3, #4]
 8000e34:	68fa      	ldr	r2, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	6811      	ldr	r1, [r2, #0]
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	6812      	ldr	r2, [r2, #0]
 8000e44:	430a      	orrs	r2, r1
 8000e46:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000e48:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <EXTI_Init+0xd8>)
 8000e4a:	4a21      	ldr	r2, [pc, #132]	; (8000ed0 <EXTI_Init+0xd8>)
 8000e4c:	6891      	ldr	r1, [r2, #8]
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	6812      	ldr	r2, [r2, #0]
 8000e52:	43d2      	mvns	r2, r2
 8000e54:	400a      	ands	r2, r1
 8000e56:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000e58:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <EXTI_Init+0xd8>)
 8000e5a:	4a1d      	ldr	r2, [pc, #116]	; (8000ed0 <EXTI_Init+0xd8>)
 8000e5c:	68d1      	ldr	r1, [r2, #12]
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	6812      	ldr	r2, [r2, #0]
 8000e62:	43d2      	mvns	r2, r2
 8000e64:	400a      	ands	r2, r1
 8000e66:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	795b      	ldrb	r3, [r3, #5]
 8000e6c:	2b10      	cmp	r3, #16
 8000e6e:	d10e      	bne.n	8000e8e <EXTI_Init+0x96>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <EXTI_Init+0xd8>)
 8000e72:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <EXTI_Init+0xd8>)
 8000e74:	6891      	ldr	r1, [r2, #8]
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	6812      	ldr	r2, [r2, #0]
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <EXTI_Init+0xd8>)
 8000e80:	4a13      	ldr	r2, [pc, #76]	; (8000ed0 <EXTI_Init+0xd8>)
 8000e82:	68d1      	ldr	r1, [r2, #12]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	6812      	ldr	r2, [r2, #0]
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	e01b      	b.n	8000ec6 <EXTI_Init+0xce>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <EXTI_Init+0xd8>)
 8000e90:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	795b      	ldrb	r3, [r3, #5]
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	4413      	add	r3, r2
 8000e9a:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	6811      	ldr	r1, [r2, #0]
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	6812      	ldr	r2, [r2, #0]
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	e00c      	b.n	8000ec6 <EXTI_Init+0xce>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	791b      	ldrb	r3, [r3, #4]
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	6811      	ldr	r1, [r2, #0]
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	6812      	ldr	r2, [r2, #0]
 8000ec0:	43d2      	mvns	r2, r2
 8000ec2:	400a      	ands	r2, r1
 8000ec4:	601a      	str	r2, [r3, #0]
  }
}
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	40010400 	.word	0x40010400

08000ed4 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000edc:	2300      	movs	r3, #0
 8000ede:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <EXTI_GetITStatus+0x44>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4013      	ands	r3, r2
 8000eec:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <EXTI_GetITStatus+0x44>)
 8000ef0:	695a      	ldr	r2, [r3, #20]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d005      	beq.n	8000f06 <EXTI_GetITStatus+0x32>
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000f00:	2301      	movs	r3, #1
 8000f02:	73fb      	strb	r3, [r7, #15]
 8000f04:	e001      	b.n	8000f0a <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000f06:	2300      	movs	r3, #0
 8000f08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	40010400 	.word	0x40010400

08000f1c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <EXTI_ClearITPendingBit+0x18>)
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	615a      	str	r2, [r3, #20]
}
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	40010400 	.word	0x40010400

08000f38 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000f40:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <NVIC_PriorityGroupConfig+0x20>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f4c:	60d3      	str	r3, [r2, #12]
}
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b087      	sub	sp, #28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	2300      	movs	r3, #0
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	78db      	ldrb	r3, [r3, #3]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d038      	beq.n	8000fea <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000f78:	4b26      	ldr	r3, [pc, #152]	; (8001014 <NVIC_Init+0xb8>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000f82:	0a1b      	lsrs	r3, r3, #8
 8000f84:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	f1c3 0304 	rsb	r3, r3, #4
 8000f8c:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	68fa      	ldr	r2, [r7, #12]
 8000f92:	fa22 f303 	lsr.w	r3, r2, r3
 8000f96:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	785b      	ldrb	r3, [r3, #1]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	789b      	ldrb	r3, [r3, #2]
 8000faa:	461a      	mov	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	011b      	lsls	r3, r3, #4
 8000fba:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000fbc:	4916      	ldr	r1, [pc, #88]	; (8001018 <NVIC_Init+0xbc>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <NVIC_Init+0xbc>)
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	7812      	ldrb	r2, [r2, #0]
 8000fd2:	0952      	lsrs	r2, r2, #5
 8000fd4:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	7809      	ldrb	r1, [r1, #0]
 8000fda:	f001 011f 	and.w	r1, r1, #31
 8000fde:	2001      	movs	r0, #1
 8000fe0:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000fe8:	e00e      	b.n	8001008 <NVIC_Init+0xac>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <NVIC_Init+0xbc>)
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	7812      	ldrb	r2, [r2, #0]
 8000ff0:	0952      	lsrs	r2, r2, #5
 8000ff2:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	7809      	ldrb	r1, [r1, #0]
 8000ff8:	f001 011f 	and.w	r1, r1, #31
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001002:	3220      	adds	r2, #32
 8001004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001008:	371c      	adds	r7, #28
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000ed00 	.word	0xe000ed00
 8001018:	e000e100 	.word	0xe000e100

0800101c <__libc_init_array>:
 800101c:	b570      	push	{r4, r5, r6, lr}
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <__libc_init_array+0x3c>)
 8001020:	4d0e      	ldr	r5, [pc, #56]	; (800105c <__libc_init_array+0x40>)
 8001022:	2400      	movs	r4, #0
 8001024:	1aed      	subs	r5, r5, r3
 8001026:	10ad      	asrs	r5, r5, #2
 8001028:	461e      	mov	r6, r3
 800102a:	42ac      	cmp	r4, r5
 800102c:	d004      	beq.n	8001038 <__libc_init_array+0x1c>
 800102e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8001032:	4790      	blx	r2
 8001034:	3401      	adds	r4, #1
 8001036:	e7f8      	b.n	800102a <__libc_init_array+0xe>
 8001038:	f000 f85a 	bl	80010f0 <_init>
 800103c:	4d08      	ldr	r5, [pc, #32]	; (8001060 <__libc_init_array+0x44>)
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <__libc_init_array+0x48>)
 8001040:	2400      	movs	r4, #0
 8001042:	1aed      	subs	r5, r5, r3
 8001044:	10ad      	asrs	r5, r5, #2
 8001046:	461e      	mov	r6, r3
 8001048:	42ac      	cmp	r4, r5
 800104a:	d004      	beq.n	8001056 <__libc_init_array+0x3a>
 800104c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8001050:	4790      	blx	r2
 8001052:	3401      	adds	r4, #1
 8001054:	e7f8      	b.n	8001048 <__libc_init_array+0x2c>
 8001056:	bd70      	pop	{r4, r5, r6, pc}
 8001058:	08001108 	.word	0x08001108
 800105c:	08001108 	.word	0x08001108
 8001060:	0800110c 	.word	0x0800110c
 8001064:	08001108 	.word	0x08001108

08001068 <GPIO_PIN>:
 8001068:	00800040 02000100                       @.......

08001070 <GPIO_CLK>:
 8001070:	00000010 00000010 00000010 00000010     ................

08001080 <BUTTON_PIN>:
 8001080:	20000001 00010200 01000002 10004000     ... .........@..

08001090 <BUTTON_CLK>:
 8001090:	00000004 00000010 00000008 00000040     ............@...
 80010a0:	00000040 00000020 00000020 00000020     @... ... ... ...

080010b0 <BUTTON_EXTI_LINE>:
 80010b0:	20000001 00010200 01000002 10004000     ... .........@..

080010c0 <BUTTON_PORT_SOURCE>:
 80010c0:	00020000 00040001 00030004 00030003     ................

080010d0 <BUTTON_PIN_SOURCE>:
 80010d0:	000d0000 00000009 00080001 000c000e     ................

080010e0 <BUTTON_IRQn>:
 80010e0:	00280006 00060017 00170007 00280028     ..(.........(.(.

080010f0 <_init>:
 80010f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010f2:	bf00      	nop
 80010f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010f6:	bc08      	pop	{r3}
 80010f8:	469e      	mov	lr, r3
 80010fa:	4770      	bx	lr

080010fc <_fini>:
 80010fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010fe:	bf00      	nop
 8001100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001102:	bc08      	pop	{r3}
 8001104:	469e      	mov	lr, r3
 8001106:	4770      	bx	lr
