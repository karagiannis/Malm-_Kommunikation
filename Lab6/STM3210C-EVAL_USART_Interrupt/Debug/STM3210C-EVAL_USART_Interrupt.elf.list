
STM3210C-EVAL_USART_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001158  080001e4  080001e4  000081e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  0800133c  0800133c  0000933c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08001340  08001340  00009340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000094  20000000  08001344  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000000b8  20000094  080013d8  00010094  2**2
                  ALLOC
  6 ._user_heap_stack 00000200  2000014c  080013d8  0001014c  2**0
                  ALLOC
  7 .ARM.attributes 00000029  00000000  00000000  00010094  2**0
                  CONTENTS, READONLY
  8 .debug_info   000045e1  00000000  00000000  000100bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000f1f  00000000  00000000  0001469e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000670  00000000  00000000  000155c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000005b8  00000000  00000000  00015c30  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000253c  00000000  00000000  000161e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002003  00000000  00000000  00018724  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000082  00000000  00000000  0001a727  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00001340  00000000  00000000  0001a7ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000094 	.word	0x20000094
 8000200:	00000000 	.word	0x00000000
 8000204:	08001324 	.word	0x08001324

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	08001324 	.word	0x08001324
 8000220:	20000098 	.word	0x20000098

08000224 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000228:	4b19      	ldr	r3, [pc, #100]	; (8000290 <SystemInit+0x6c>)
 800022a:	4a19      	ldr	r2, [pc, #100]	; (8000290 <SystemInit+0x6c>)
 800022c:	6812      	ldr	r2, [r2, #0]
 800022e:	f042 0201 	orr.w	r2, r2, #1
 8000232:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
 8000234:	4a16      	ldr	r2, [pc, #88]	; (8000290 <SystemInit+0x6c>)
 8000236:	4b16      	ldr	r3, [pc, #88]	; (8000290 <SystemInit+0x6c>)
 8000238:	6859      	ldr	r1, [r3, #4]
 800023a:	4b16      	ldr	r3, [pc, #88]	; (8000294 <SystemInit+0x70>)
 800023c:	400b      	ands	r3, r1
 800023e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000240:	4a13      	ldr	r2, [pc, #76]	; (8000290 <SystemInit+0x6c>)
 8000242:	4b13      	ldr	r3, [pc, #76]	; (8000290 <SystemInit+0x6c>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800024a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800024e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000250:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <SystemInit+0x6c>)
 8000252:	4a0f      	ldr	r2, [pc, #60]	; (8000290 <SystemInit+0x6c>)
 8000254:	6812      	ldr	r2, [r2, #0]
 8000256:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800025a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800025c:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <SystemInit+0x6c>)
 800025e:	4a0c      	ldr	r2, [pc, #48]	; (8000290 <SystemInit+0x6c>)
 8000260:	6852      	ldr	r2, [r2, #4]
 8000262:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000266:	605a      	str	r2, [r3, #4]

#ifdef STM32F10X_CL
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEBFFFFFF;
 8000268:	4b09      	ldr	r3, [pc, #36]	; (8000290 <SystemInit+0x6c>)
 800026a:	4a09      	ldr	r2, [pc, #36]	; (8000290 <SystemInit+0x6c>)
 800026c:	6812      	ldr	r2, [r2, #0]
 800026e:	f022 52a0 	bic.w	r2, r2, #335544320	; 0x14000000
 8000272:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000;
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <SystemInit+0x6c>)
 8000276:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800027a:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
 800027c:	4b04      	ldr	r3, [pc, #16]	; (8000290 <SystemInit+0x6c>)
 800027e:	2200      	movs	r2, #0
 8000280:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000282:	f000 f80b 	bl	800029c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000286:	4b04      	ldr	r3, [pc, #16]	; (8000298 <SystemInit+0x74>)
 8000288:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800028c:	609a      	str	r2, [r3, #8]
#endif 
}
 800028e:	bd80      	pop	{r7, pc}
 8000290:	40021000 	.word	0x40021000
 8000294:	f0ff0000 	.word	0xf0ff0000
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80002a0:	f000 f802 	bl	80002a8 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop

080002a8 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80002ae:	2300      	movs	r3, #0
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	2300      	movs	r3, #0
 80002b4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80002b6:	4b47      	ldr	r3, [pc, #284]	; (80003d4 <SetSysClockTo72+0x12c>)
 80002b8:	4a46      	ldr	r2, [pc, #280]	; (80003d4 <SetSysClockTo72+0x12c>)
 80002ba:	6812      	ldr	r2, [r2, #0]
 80002bc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80002c0:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80002c2:	4b44      	ldr	r3, [pc, #272]	; (80003d4 <SetSysClockTo72+0x12c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ca:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3301      	adds	r3, #1
 80002d0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d103      	bne.n	80002e0 <SetSysClockTo72+0x38>
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80002de:	d1f0      	bne.n	80002c2 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80002e0:	4b3c      	ldr	r3, [pc, #240]	; (80003d4 <SetSysClockTo72+0x12c>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d002      	beq.n	80002f2 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80002ec:	2301      	movs	r3, #1
 80002ee:	603b      	str	r3, [r7, #0]
 80002f0:	e001      	b.n	80002f6 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80002f2:	2300      	movs	r3, #0
 80002f4:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d166      	bne.n	80003ca <SetSysClockTo72+0x122>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80002fc:	4b36      	ldr	r3, [pc, #216]	; (80003d8 <SetSysClockTo72+0x130>)
 80002fe:	4a36      	ldr	r2, [pc, #216]	; (80003d8 <SetSysClockTo72+0x130>)
 8000300:	6812      	ldr	r2, [r2, #0]
 8000302:	f042 0210 	orr.w	r2, r2, #16
 8000306:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000308:	4b33      	ldr	r3, [pc, #204]	; (80003d8 <SetSysClockTo72+0x130>)
 800030a:	4a33      	ldr	r2, [pc, #204]	; (80003d8 <SetSysClockTo72+0x130>)
 800030c:	6812      	ldr	r2, [r2, #0]
 800030e:	f022 0203 	bic.w	r2, r2, #3
 8000312:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000314:	4b30      	ldr	r3, [pc, #192]	; (80003d8 <SetSysClockTo72+0x130>)
 8000316:	4a30      	ldr	r2, [pc, #192]	; (80003d8 <SetSysClockTo72+0x130>)
 8000318:	6812      	ldr	r2, [r2, #0]
 800031a:	f042 0202 	orr.w	r2, r2, #2
 800031e:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000320:	4b2c      	ldr	r3, [pc, #176]	; (80003d4 <SetSysClockTo72+0x12c>)
 8000322:	4a2c      	ldr	r2, [pc, #176]	; (80003d4 <SetSysClockTo72+0x12c>)
 8000324:	6852      	ldr	r2, [r2, #4]
 8000326:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000328:	4b2a      	ldr	r3, [pc, #168]	; (80003d4 <SetSysClockTo72+0x12c>)
 800032a:	4a2a      	ldr	r2, [pc, #168]	; (80003d4 <SetSysClockTo72+0x12c>)
 800032c:	6852      	ldr	r2, [r2, #4]
 800032e:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000330:	4b28      	ldr	r3, [pc, #160]	; (80003d4 <SetSysClockTo72+0x12c>)
 8000332:	4a28      	ldr	r2, [pc, #160]	; (80003d4 <SetSysClockTo72+0x12c>)
 8000334:	6852      	ldr	r2, [r2, #4]
 8000336:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800033a:	605a      	str	r2, [r3, #4]
#ifdef STM32F10X_CL
    /* Configure PLLs ------------------------------------------------------*/
    /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
    /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
        
    RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 800033c:	4a25      	ldr	r2, [pc, #148]	; (80003d4 <SetSysClockTo72+0x12c>)
 800033e:	4b25      	ldr	r3, [pc, #148]	; (80003d4 <SetSysClockTo72+0x12c>)
 8000340:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000342:	4b26      	ldr	r3, [pc, #152]	; (80003dc <SetSysClockTo72+0x134>)
 8000344:	400b      	ands	r3, r1
 8000346:	62d3      	str	r3, [r2, #44]	; 0x2c
                              RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
    RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 8000348:	4a22      	ldr	r2, [pc, #136]	; (80003d4 <SetSysClockTo72+0x12c>)
 800034a:	4b22      	ldr	r3, [pc, #136]	; (80003d4 <SetSysClockTo72+0x12c>)
 800034c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800034e:	f443 3383 	orr.w	r3, r3, #67072	; 0x10600
 8000352:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8000356:	62d3      	str	r3, [r2, #44]	; 0x2c
                             RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
  
    /* Enable PLL2 */
    RCC->CR |= RCC_CR_PLL2ON;
 8000358:	4b1e      	ldr	r3, [pc, #120]	; (80003d4 <SetSysClockTo72+0x12c>)
 800035a:	4a1e      	ldr	r2, [pc, #120]	; (80003d4 <SetSysClockTo72+0x12c>)
 800035c:	6812      	ldr	r2, [r2, #0]
 800035e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000362:	601a      	str	r2, [r3, #0]
    /* Wait till PLL2 is ready */
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 8000364:	bf00      	nop
 8000366:	4b1b      	ldr	r3, [pc, #108]	; (80003d4 <SetSysClockTo72+0x12c>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d0f9      	beq.n	8000366 <SetSysClockTo72+0xbe>
    {
    }
    
   
    /* PLL configuration: PLLCLK = PREDIV1 * 9 = 72 MHz */ 
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 8000372:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <SetSysClockTo72+0x12c>)
 8000374:	4a17      	ldr	r2, [pc, #92]	; (80003d4 <SetSysClockTo72+0x12c>)
 8000376:	6852      	ldr	r2, [r2, #4]
 8000378:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800037c:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 800037e:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <SetSysClockTo72+0x12c>)
 8000380:	4a14      	ldr	r2, [pc, #80]	; (80003d4 <SetSysClockTo72+0x12c>)
 8000382:	6852      	ldr	r2, [r2, #4]
 8000384:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8000388:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800038a:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <SetSysClockTo72+0x12c>)
 800038c:	4a11      	ldr	r2, [pc, #68]	; (80003d4 <SetSysClockTo72+0x12c>)
 800038e:	6812      	ldr	r2, [r2, #0]
 8000390:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000394:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000396:	bf00      	nop
 8000398:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <SetSysClockTo72+0x12c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d0f9      	beq.n	8000398 <SetSysClockTo72+0xf0>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003a4:	4b0b      	ldr	r3, [pc, #44]	; (80003d4 <SetSysClockTo72+0x12c>)
 80003a6:	4a0b      	ldr	r2, [pc, #44]	; (80003d4 <SetSysClockTo72+0x12c>)
 80003a8:	6852      	ldr	r2, [r2, #4]
 80003aa:	f022 0203 	bic.w	r2, r2, #3
 80003ae:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80003b0:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <SetSysClockTo72+0x12c>)
 80003b2:	4a08      	ldr	r2, [pc, #32]	; (80003d4 <SetSysClockTo72+0x12c>)
 80003b4:	6852      	ldr	r2, [r2, #4]
 80003b6:	f042 0202 	orr.w	r2, r2, #2
 80003ba:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80003bc:	bf00      	nop
 80003be:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <SetSysClockTo72+0x12c>)
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	f003 030c 	and.w	r3, r3, #12
 80003c6:	2b08      	cmp	r3, #8
 80003c8:	d1f9      	bne.n	80003be <SetSysClockTo72+0x116>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40022000 	.word	0x40022000
 80003dc:	fffef000 	.word	0xfffef000

080003e0 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
}
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr

080003ec <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80003f0:	e7fe      	b.n	80003f0 <HardFault_Handler+0x4>
 80003f2:	bf00      	nop

080003f4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80003f8:	e7fe      	b.n	80003f8 <MemManage_Handler+0x4>
 80003fa:	bf00      	nop

080003fc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000400:	e7fe      	b.n	8000400 <BusFault_Handler+0x4>
 8000402:	bf00      	nop

08000404 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000408:	e7fe      	b.n	8000408 <UsageFault_Handler+0x4>
 800040a:	bf00      	nop

0800040c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
}
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
}
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <PendSV_Handler>:
  * @brief  This function handles PendSV_Handler exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
}
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr

08000430 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
}
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <USART2_IRQHandler>:
  * @brief  This function handles USARTy global interrupt request.
  * @param  None
  * @retval None
  */
void USARTy_IRQHandler(void)
{
 800043c:	b598      	push	{r3, r4, r7, lr}
 800043e:	af00      	add	r7, sp, #0
  if(USART_GetITStatus(USARTy, USART_IT_RXNE) != RESET)
 8000440:	4823      	ldr	r0, [pc, #140]	; (80004d0 <USART2_IRQHandler+0x94>)
 8000442:	f240 5125 	movw	r1, #1317	; 0x525
 8000446:	f000 fb7b 	bl	8000b40 <USART_GetITStatus>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d01b      	beq.n	8000488 <USART2_IRQHandler+0x4c>
  {
    /* Read one byte from the receive data register */
    RxBuffer1[RxCounter1++] = USART_ReceiveData(USARTy);
 8000450:	4b20      	ldr	r3, [pc, #128]	; (80004d4 <USART2_IRQHandler+0x98>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	b2db      	uxtb	r3, r3
 8000456:	1c5a      	adds	r2, r3, #1
 8000458:	b2d1      	uxtb	r1, r2
 800045a:	4a1e      	ldr	r2, [pc, #120]	; (80004d4 <USART2_IRQHandler+0x98>)
 800045c:	7011      	strb	r1, [r2, #0]
 800045e:	461c      	mov	r4, r3
 8000460:	481b      	ldr	r0, [pc, #108]	; (80004d0 <USART2_IRQHandler+0x94>)
 8000462:	f000 fb5d 	bl	8000b20 <USART_ReceiveData>
 8000466:	4603      	mov	r3, r0
 8000468:	b2da      	uxtb	r2, r3
 800046a:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <USART2_IRQHandler+0x9c>)
 800046c:	551a      	strb	r2, [r3, r4]

    if(RxCounter1 == NbrOfDataToRead1)
 800046e:	4b19      	ldr	r3, [pc, #100]	; (80004d4 <USART2_IRQHandler+0x98>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b2da      	uxtb	r2, r3
 8000474:	4b19      	ldr	r3, [pc, #100]	; (80004dc <USART2_IRQHandler+0xa0>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	429a      	cmp	r2, r3
 800047a:	d105      	bne.n	8000488 <USART2_IRQHandler+0x4c>
    {
      /* Disable the USARTy Receive interrupt */
      USART_ITConfig(USARTy, USART_IT_RXNE, DISABLE);
 800047c:	4814      	ldr	r0, [pc, #80]	; (80004d0 <USART2_IRQHandler+0x94>)
 800047e:	f240 5125 	movw	r1, #1317	; 0x525
 8000482:	2200      	movs	r2, #0
 8000484:	f000 faf2 	bl	8000a6c <USART_ITConfig>
    }
  }
  
  if(USART_GetITStatus(USARTy, USART_IT_TXE) != RESET)
 8000488:	4811      	ldr	r0, [pc, #68]	; (80004d0 <USART2_IRQHandler+0x94>)
 800048a:	f240 7127 	movw	r1, #1831	; 0x727
 800048e:	f000 fb57 	bl	8000b40 <USART_GetITStatus>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d019      	beq.n	80004cc <USART2_IRQHandler+0x90>
  {   
    /* Write one byte to the transmit data register */
    USART_SendData(USARTy, TxBuffer1[TxCounter1++]);
 8000498:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <USART2_IRQHandler+0xa4>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	b2db      	uxtb	r3, r3
 800049e:	1c5a      	adds	r2, r3, #1
 80004a0:	b2d1      	uxtb	r1, r2
 80004a2:	4a0f      	ldr	r2, [pc, #60]	; (80004e0 <USART2_IRQHandler+0xa4>)
 80004a4:	7011      	strb	r1, [r2, #0]
 80004a6:	4a0f      	ldr	r2, [pc, #60]	; (80004e4 <USART2_IRQHandler+0xa8>)
 80004a8:	5cd3      	ldrb	r3, [r2, r3]
 80004aa:	4809      	ldr	r0, [pc, #36]	; (80004d0 <USART2_IRQHandler+0x94>)
 80004ac:	4619      	mov	r1, r3
 80004ae:	f000 fb25 	bl	8000afc <USART_SendData>

    if(TxCounter1 == NbrOfDataToTransfer1)
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <USART2_IRQHandler+0xa4>)
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	b2da      	uxtb	r2, r3
 80004b8:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <USART2_IRQHandler+0xac>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	429a      	cmp	r2, r3
 80004be:	d105      	bne.n	80004cc <USART2_IRQHandler+0x90>
    {
      /* Disable the USARTy Transmit interrupt */
      USART_ITConfig(USARTy, USART_IT_TXE, DISABLE);
 80004c0:	4803      	ldr	r0, [pc, #12]	; (80004d0 <USART2_IRQHandler+0x94>)
 80004c2:	f240 7127 	movw	r1, #1831	; 0x727
 80004c6:	2200      	movs	r2, #0
 80004c8:	f000 fad0 	bl	8000a6c <USART_ITConfig>
    }    
  }
}
 80004cc:	bd98      	pop	{r3, r4, r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40004400 	.word	0x40004400
 80004d4:	200000b2 	.word	0x200000b2
 80004d8:	20000104 	.word	0x20000104
 80004dc:	2000007a 	.word	0x2000007a
 80004e0:	200000b0 	.word	0x200000b0
 80004e4:	20000000 	.word	0x20000000
 80004e8:	20000078 	.word	0x20000078

080004ec <USART3_IRQHandler>:
  * @brief  This function handles USARTz global interrupt request.
  * @param  None
  * @retval None
  */
void USARTz_IRQHandler(void)
{
 80004ec:	b598      	push	{r3, r4, r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  if(USART_GetITStatus(USARTz, USART_IT_RXNE) != RESET)
 80004f0:	4823      	ldr	r0, [pc, #140]	; (8000580 <USART3_IRQHandler+0x94>)
 80004f2:	f240 5125 	movw	r1, #1317	; 0x525
 80004f6:	f000 fb23 	bl	8000b40 <USART_GetITStatus>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d01b      	beq.n	8000538 <USART3_IRQHandler+0x4c>
  {
    /* Read one byte from the receive data register */
    RxBuffer2[RxCounter2++] = USART_ReceiveData(USARTz);
 8000500:	4b20      	ldr	r3, [pc, #128]	; (8000584 <USART3_IRQHandler+0x98>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	b2db      	uxtb	r3, r3
 8000506:	1c5a      	adds	r2, r3, #1
 8000508:	b2d1      	uxtb	r1, r2
 800050a:	4a1e      	ldr	r2, [pc, #120]	; (8000584 <USART3_IRQHandler+0x98>)
 800050c:	7011      	strb	r1, [r2, #0]
 800050e:	461c      	mov	r4, r3
 8000510:	481b      	ldr	r0, [pc, #108]	; (8000580 <USART3_IRQHandler+0x94>)
 8000512:	f000 fb05 	bl	8000b20 <USART_ReceiveData>
 8000516:	4603      	mov	r3, r0
 8000518:	b2da      	uxtb	r2, r3
 800051a:	4b1b      	ldr	r3, [pc, #108]	; (8000588 <USART3_IRQHandler+0x9c>)
 800051c:	551a      	strb	r2, [r3, r4]

    if(RxCounter2 == NbrOfDataToRead1)
 800051e:	4b19      	ldr	r3, [pc, #100]	; (8000584 <USART3_IRQHandler+0x98>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	b2da      	uxtb	r2, r3
 8000524:	4b19      	ldr	r3, [pc, #100]	; (800058c <USART3_IRQHandler+0xa0>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	429a      	cmp	r2, r3
 800052a:	d105      	bne.n	8000538 <USART3_IRQHandler+0x4c>
    {
      /* Disable the USARTz Receive interrupt */
      USART_ITConfig(USARTz, USART_IT_RXNE, DISABLE);
 800052c:	4814      	ldr	r0, [pc, #80]	; (8000580 <USART3_IRQHandler+0x94>)
 800052e:	f240 5125 	movw	r1, #1317	; 0x525
 8000532:	2200      	movs	r2, #0
 8000534:	f000 fa9a 	bl	8000a6c <USART_ITConfig>
    }
  }
  
  if(USART_GetITStatus(USARTz, USART_IT_TXE) != RESET)
 8000538:	4811      	ldr	r0, [pc, #68]	; (8000580 <USART3_IRQHandler+0x94>)
 800053a:	f240 7127 	movw	r1, #1831	; 0x727
 800053e:	f000 faff 	bl	8000b40 <USART_GetITStatus>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d019      	beq.n	800057c <USART3_IRQHandler+0x90>
  {   
    /* Write one byte to the transmit data register */
    USART_SendData(USARTz, TxBuffer2[TxCounter2++]);
 8000548:	4b11      	ldr	r3, [pc, #68]	; (8000590 <USART3_IRQHandler+0xa4>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	b2db      	uxtb	r3, r3
 800054e:	1c5a      	adds	r2, r3, #1
 8000550:	b2d1      	uxtb	r1, r2
 8000552:	4a0f      	ldr	r2, [pc, #60]	; (8000590 <USART3_IRQHandler+0xa4>)
 8000554:	7011      	strb	r1, [r2, #0]
 8000556:	4a0f      	ldr	r2, [pc, #60]	; (8000594 <USART3_IRQHandler+0xa8>)
 8000558:	5cd3      	ldrb	r3, [r2, r3]
 800055a:	4809      	ldr	r0, [pc, #36]	; (8000580 <USART3_IRQHandler+0x94>)
 800055c:	4619      	mov	r1, r3
 800055e:	f000 facd 	bl	8000afc <USART_SendData>

    if(TxCounter2 == NbrOfDataToTransfer2)
 8000562:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <USART3_IRQHandler+0xa4>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	b2da      	uxtb	r2, r3
 8000568:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <USART3_IRQHandler+0xac>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	429a      	cmp	r2, r3
 800056e:	d105      	bne.n	800057c <USART3_IRQHandler+0x90>
    {
      /* Disable the USARTz Transmit interrupt */
      USART_ITConfig(USARTz, USART_IT_TXE, DISABLE);
 8000570:	4803      	ldr	r0, [pc, #12]	; (8000580 <USART3_IRQHandler+0x94>)
 8000572:	f240 7127 	movw	r1, #1831	; 0x727
 8000576:	2200      	movs	r2, #0
 8000578:	f000 fa78 	bl	8000a6c <USART_ITConfig>
    }
  }
}
 800057c:	bd98      	pop	{r3, r4, r7, pc}
 800057e:	bf00      	nop
 8000580:	40004800 	.word	0x40004800
 8000584:	200000b3 	.word	0x200000b3
 8000588:	200000b8 	.word	0x200000b8
 800058c:	2000007a 	.word	0x2000007a
 8000590:	200000b1 	.word	0x200000b1
 8000594:	2000003c 	.word	0x2000003c
 8000598:	20000079 	.word	0x20000079

0800059c <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800059c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800059e:	f000 b804 	b.w	80005aa <LoopCopyDataInit>

080005a2 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80005a2:	4b0d      	ldr	r3, [pc, #52]	; (80005d8 <LoopFillZerobss+0x16>)
	ldr	r3, [r3, r1]
 80005a4:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80005a6:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80005a8:	3104      	adds	r1, #4

080005aa <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80005aa:	480c      	ldr	r0, [pc, #48]	; (80005dc <LoopFillZerobss+0x1a>)
	ldr	r3, =_edata
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <LoopFillZerobss+0x1e>)
	adds	r2, r0, r1
 80005ae:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80005b0:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80005b2:	f4ff aff6 	bcc.w	80005a2 <CopyDataInit>
	ldr	r2, =_sbss
 80005b6:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <LoopFillZerobss+0x22>)
	b	LoopFillZerobss
 80005b8:	f000 b803 	b.w	80005c2 <LoopFillZerobss>

080005bc <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80005bc:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005be:	f842 3b04 	str.w	r3, [r2], #4

080005c2 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <LoopFillZerobss+0x26>)
	cmp	r2, r3
 80005c4:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005c6:	f4ff aff9 	bcc.w	80005bc <FillZerobss>

/* Call the clock system intitialization function.*/
  	bl  SystemInit
 80005ca:	f7ff fe2b 	bl	8000224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ce:	f000 fe83 	bl	80012d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005d2:	f000 f80d 	bl	80005f0 <main>
	bx	lr
 80005d6:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80005d8:	08001344 	.word	0x08001344
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80005dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005e0:	20000094 	.word	0x20000094
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80005e4:	20000094 	.word	0x20000094
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80005e8:	2000014c 	.word	0x2000014c

080005ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005ec:	f7ff bffe 	b.w	80005ec <ADC1_2_IRQHandler>

080005f0 <main>:
  * @brief   Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
       To reconfigure the default setting of SystemInit() function, refer to
       system_stm32f10x.c file
     */     
       
  /* System Clocks Configuration */
  RCC_Configuration();
 80005f4:	f000 f874 	bl	80006e0 <RCC_Configuration>
       
  /* NVIC configuration */
  NVIC_Configuration();
 80005f8:	f000 f8bc 	bl	8000774 <NVIC_Configuration>

  /* Configure the GPIO ports */
  GPIO_Configuration();
 80005fc:	f000 f882 	bl	8000704 <GPIO_Configuration>
        - One Stop Bit
        - No parity
        - Hardware flow control disabled (RTS and CTS signals)
        - Receive and transmit enabled
  */
  USART_InitStructure.USART_BaudRate = 9600;
 8000600:	4b2c      	ldr	r3, [pc, #176]	; (80006b4 <main+0xc4>)
 8000602:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000606:	601a      	str	r2, [r3, #0]
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000608:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <main+0xc4>)
 800060a:	2200      	movs	r2, #0
 800060c:	809a      	strh	r2, [r3, #4]
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800060e:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <main+0xc4>)
 8000610:	2200      	movs	r2, #0
 8000612:	80da      	strh	r2, [r3, #6]
  USART_InitStructure.USART_Parity = USART_Parity_No;
 8000614:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <main+0xc4>)
 8000616:	2200      	movs	r2, #0
 8000618:	811a      	strh	r2, [r3, #8]
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800061a:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <main+0xc4>)
 800061c:	2200      	movs	r2, #0
 800061e:	819a      	strh	r2, [r3, #12]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000620:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <main+0xc4>)
 8000622:	220c      	movs	r2, #12
 8000624:	815a      	strh	r2, [r3, #10]

  /* Configure USARTy */
  USART_Init(USARTy, &USART_InitStructure);
 8000626:	4824      	ldr	r0, [pc, #144]	; (80006b8 <main+0xc8>)
 8000628:	4922      	ldr	r1, [pc, #136]	; (80006b4 <main+0xc4>)
 800062a:	f000 f945 	bl	80008b8 <USART_Init>
  /* Configure USARTz */
  USART_Init(USARTz, &USART_InitStructure);
 800062e:	4823      	ldr	r0, [pc, #140]	; (80006bc <main+0xcc>)
 8000630:	4920      	ldr	r1, [pc, #128]	; (80006b4 <main+0xc4>)
 8000632:	f000 f941 	bl	80008b8 <USART_Init>
  
  /* Enable USARTy Receive and Transmit interrupts */
  USART_ITConfig(USARTy, USART_IT_RXNE, ENABLE);
 8000636:	4820      	ldr	r0, [pc, #128]	; (80006b8 <main+0xc8>)
 8000638:	f240 5125 	movw	r1, #1317	; 0x525
 800063c:	2201      	movs	r2, #1
 800063e:	f000 fa15 	bl	8000a6c <USART_ITConfig>
  USART_ITConfig(USARTy, USART_IT_TXE, ENABLE);
 8000642:	481d      	ldr	r0, [pc, #116]	; (80006b8 <main+0xc8>)
 8000644:	f240 7127 	movw	r1, #1831	; 0x727
 8000648:	2201      	movs	r2, #1
 800064a:	f000 fa0f 	bl	8000a6c <USART_ITConfig>

  /* Enable USARTz Receive and Transmit interrupts */
  USART_ITConfig(USARTz, USART_IT_RXNE, ENABLE);
 800064e:	481b      	ldr	r0, [pc, #108]	; (80006bc <main+0xcc>)
 8000650:	f240 5125 	movw	r1, #1317	; 0x525
 8000654:	2201      	movs	r2, #1
 8000656:	f000 fa09 	bl	8000a6c <USART_ITConfig>
  USART_ITConfig(USARTz, USART_IT_TXE, ENABLE);
 800065a:	4818      	ldr	r0, [pc, #96]	; (80006bc <main+0xcc>)
 800065c:	f240 7127 	movw	r1, #1831	; 0x727
 8000660:	2201      	movs	r2, #1
 8000662:	f000 fa03 	bl	8000a6c <USART_ITConfig>

  /* Enable the USARTy */
  USART_Cmd(USARTy, ENABLE);
 8000666:	4814      	ldr	r0, [pc, #80]	; (80006b8 <main+0xc8>)
 8000668:	2101      	movs	r1, #1
 800066a:	f000 f9df 	bl	8000a2c <USART_Cmd>
  /* Enable the USARTz */
  USART_Cmd(USARTz, ENABLE);
 800066e:	4813      	ldr	r0, [pc, #76]	; (80006bc <main+0xcc>)
 8000670:	2101      	movs	r1, #1
 8000672:	f000 f9db 	bl	8000a2c <USART_Cmd>

  /* Wait until end of transmission from USARTy to USARTz */
  while(RxCounter2 < RxBufferSize2)
 8000676:	bf00      	nop
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <main+0xd0>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b38      	cmp	r3, #56	; 0x38
 8000680:	d9fa      	bls.n	8000678 <main+0x88>
  {
  }

  /* Wait until end of transmission from USARTz to USARTy */
  while(RxCounter1 < RxBufferSize1)
 8000682:	bf00      	nop
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <main+0xd4>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	2b38      	cmp	r3, #56	; 0x38
 800068c:	d9fa      	bls.n	8000684 <main+0x94>
  {
  }
  
  /* Check the received data with the send ones */
  TransferStatus1 = Buffercmp(TxBuffer2, RxBuffer1, RxBufferSize1);
 800068e:	480e      	ldr	r0, [pc, #56]	; (80006c8 <main+0xd8>)
 8000690:	490e      	ldr	r1, [pc, #56]	; (80006cc <main+0xdc>)
 8000692:	2239      	movs	r2, #57	; 0x39
 8000694:	f000 f88c 	bl	80007b0 <Buffercmp>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <main+0xe0>)
 800069e:	701a      	strb	r2, [r3, #0]
  /* TransferStatus1 = PASSED, if the data transmitted from USARTz and  
     received by USARTy are the same */
  /* TransferStatus1 = FAILED, if the data transmitted from USARTz and 
     received by USARTy are different */
  TransferStatus2 = Buffercmp(TxBuffer1, RxBuffer2, RxBufferSize2);
 80006a0:	480c      	ldr	r0, [pc, #48]	; (80006d4 <main+0xe4>)
 80006a2:	490d      	ldr	r1, [pc, #52]	; (80006d8 <main+0xe8>)
 80006a4:	2239      	movs	r2, #57	; 0x39
 80006a6:	f000 f883 	bl	80007b0 <Buffercmp>
 80006aa:	4603      	mov	r3, r0
 80006ac:	461a      	mov	r2, r3
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <main+0xec>)
 80006b0:	701a      	strb	r2, [r3, #0]
  /* TransferStatus2 = FAILED, if the data transmitted from USARTy and 
     received by USARTz are different */

  while (1)
  {
  }
 80006b2:	e7fe      	b.n	80006b2 <main+0xc2>
 80006b4:	200000f4 	.word	0x200000f4
 80006b8:	40004400 	.word	0x40004400
 80006bc:	40004800 	.word	0x40004800
 80006c0:	200000b3 	.word	0x200000b3
 80006c4:	200000b2 	.word	0x200000b2
 80006c8:	2000003c 	.word	0x2000003c
 80006cc:	20000104 	.word	0x20000104
 80006d0:	200000b4 	.word	0x200000b4
 80006d4:	20000000 	.word	0x20000000
 80006d8:	200000b8 	.word	0x200000b8
 80006dc:	200000b5 	.word	0x200000b5

080006e0 <RCC_Configuration>:
  * @brief  Configures the different system clocks.
  * @param  None
  * @retval None
  */
void RCC_Configuration(void)
{   
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* Enable GPIO clock */
  RCC_APB2PeriphClockCmd(USARTy_GPIO_CLK | USARTz_GPIO_CLK | RCC_APB2Periph_AFIO, ENABLE);
 80006e4:	2031      	movs	r0, #49	; 0x31
 80006e6:	2101      	movs	r1, #1
 80006e8:	f000 fb68 	bl	8000dbc <RCC_APB2PeriphClockCmd>
#ifndef USE_STM3210C_EVAL
  /* Enable USARTy Clock */
  RCC_APB2PeriphClockCmd(USARTy_CLK, ENABLE); 
#else
  /* Enable USARTy Clock */
  RCC_APB1PeriphClockCmd(USARTy_CLK, ENABLE); 
 80006ec:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80006f0:	2101      	movs	r1, #1
 80006f2:	f000 fb81 	bl	8000df8 <RCC_APB1PeriphClockCmd>
#endif
  /* Enable USARTz Clock */
  RCC_APB1PeriphClockCmd(USARTz_CLK, ENABLE);  
 80006f6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80006fa:	2101      	movs	r1, #1
 80006fc:	f000 fb7c 	bl	8000df8 <RCC_APB1PeriphClockCmd>
}
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop

08000704 <GPIO_Configuration>:
  * @brief  Configures the different GPIO ports.
  * @param  None
  * @retval None
  */
void GPIO_Configuration(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

#ifdef USE_STM3210C_EVAL
  /* Enable the USART3 Pins Software Remapping */
  GPIO_PinRemapConfig(GPIO_PartialRemap_USART3, ENABLE);
 800070a:	4817      	ldr	r0, [pc, #92]	; (8000768 <GPIO_Configuration+0x64>)
 800070c:	2101      	movs	r1, #1
 800070e:	f000 fca1 	bl	8001054 <GPIO_PinRemapConfig>
  
  /* Enable the USART2 Pins Software Remapping */
  GPIO_PinRemapConfig(GPIO_Remap_USART2, ENABLE);  
 8000712:	2008      	movs	r0, #8
 8000714:	2101      	movs	r1, #1
 8000716:	f000 fc9d 	bl	8001054 <GPIO_PinRemapConfig>
  /* Enable the USART2 Pins Software Remapping */
  GPIO_PinRemapConfig(GPIO_Remap_USART2, ENABLE);
#endif

  /* Configure USARTy Rx as input floating */
  GPIO_InitStructure.GPIO_Pin = USARTy_RxPin;
 800071a:	2340      	movs	r3, #64	; 0x40
 800071c:	80bb      	strh	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800071e:	2304      	movs	r3, #4
 8000720:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(USARTy_GPIO, &GPIO_InitStructure);
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	4811      	ldr	r0, [pc, #68]	; (800076c <GPIO_Configuration+0x68>)
 8000726:	4619      	mov	r1, r3
 8000728:	f000 fbd8 	bl	8000edc <GPIO_Init>
  
  /* Configure USARTz Rx as input floating */
  GPIO_InitStructure.GPIO_Pin = USARTz_RxPin;
 800072c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000730:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(USARTz_GPIO, &GPIO_InitStructure);  
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	480e      	ldr	r0, [pc, #56]	; (8000770 <GPIO_Configuration+0x6c>)
 8000736:	4619      	mov	r1, r3
 8000738:	f000 fbd0 	bl	8000edc <GPIO_Init>
  
  /* Configure USARTy Tx as alternate function push-pull */
  GPIO_InitStructure.GPIO_Pin = USARTy_TxPin;
 800073c:	2320      	movs	r3, #32
 800073e:	80bb      	strh	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000740:	2303      	movs	r3, #3
 8000742:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000744:	2318      	movs	r3, #24
 8000746:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(USARTy_GPIO, &GPIO_InitStructure);
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	4808      	ldr	r0, [pc, #32]	; (800076c <GPIO_Configuration+0x68>)
 800074c:	4619      	mov	r1, r3
 800074e:	f000 fbc5 	bl	8000edc <GPIO_Init>

  /* Configure USARTz Tx as alternate function push-pull */
  GPIO_InitStructure.GPIO_Pin = USARTz_TxPin;
 8000752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000756:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(USARTz_GPIO, &GPIO_InitStructure);  
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <GPIO_Configuration+0x6c>)
 800075c:	4619      	mov	r1, r3
 800075e:	f000 fbbd 	bl	8000edc <GPIO_Init>
}
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	00140010 	.word	0x00140010
 800076c:	40011400 	.word	0x40011400
 8000770:	40011000 	.word	0x40011000

08000774 <NVIC_Configuration>:
  * @brief  Configures the nested vectored interrupt controller.
  * @param  None
  * @retval None
  */
void NVIC_Configuration(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Configure the NVIC Preemption Priority Bits */  
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 800077a:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 800077e:	f000 fd39 	bl	80011f4 <NVIC_PriorityGroupConfig>
  
  /* Enable the USARTy Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = USARTy_IRQn;
 8000782:	2326      	movs	r3, #38	; 0x26
 8000784:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800078a:	2301      	movs	r3, #1
 800078c:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4618      	mov	r0, r3
 8000792:	f000 fd41 	bl	8001218 <NVIC_Init>

  /* Enable the USARTz Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = USARTz_IRQn;
 8000796:	2327      	movs	r3, #39	; 0x27
 8000798:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 800079a:	2301      	movs	r3, #1
 800079c:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800079e:	2301      	movs	r3, #1
 80007a0:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 fd37 	bl	8001218 <NVIC_Init>
}
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <Buffercmp>:
  * @param  BufferLength: buffer's length
  * @retval PASSED: pBuffer1 identical to pBuffer2
  *         FAILED: pBuffer1 differs from pBuffer2
  */
TestStatus Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	4613      	mov	r3, r2
 80007bc:	80fb      	strh	r3, [r7, #6]
  while(BufferLength--)
 80007be:	e00d      	b.n	80007dc <Buffercmp+0x2c>
  {
    if(*pBuffer1 != *pBuffer2)
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	781a      	ldrb	r2, [r3, #0]
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d001      	beq.n	80007d0 <Buffercmp+0x20>
    {
      return FAILED;
 80007cc:	2300      	movs	r3, #0
 80007ce:	e00b      	b.n	80007e8 <Buffercmp+0x38>
    }

    pBuffer1++;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	3301      	adds	r3, #1
 80007d4:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	3301      	adds	r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
  * @retval PASSED: pBuffer1 identical to pBuffer2
  *         FAILED: pBuffer1 differs from pBuffer2
  */
TestStatus Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
  while(BufferLength--)
 80007dc:	88fb      	ldrh	r3, [r7, #6]
 80007de:	1e5a      	subs	r2, r3, #1
 80007e0:	80fa      	strh	r2, [r7, #6]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d1ec      	bne.n	80007c0 <Buffercmp+0x10>

    pBuffer1++;
    pBuffer2++;
  }

  return PASSED;
 80007e6:	2301      	movs	r3, #1
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <sEE_TIMEOUT_UserCallback>:
/*
 * Callback used by stm3210c_eval_i2c_ee.c.
 * Refer to stm3210c_eval_i2c_ee.h for more info.
 */
__attribute__((weak)) uint32_t sEE_TIMEOUT_UserCallback(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* Block communication and all processes */
  while (1)
  {
  }
 80007f8:	e7fe      	b.n	80007f8 <sEE_TIMEOUT_UserCallback+0x4>
 80007fa:	bf00      	nop

080007fc <DMA1_Channel6_IRQHandler>:
  * @brief  This function handles the DMA Tx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_TX_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */ 
  if(DMA_GetFlagStatus(sEE_I2C_DMA_FLAG_TX_TC) != RESET)
 8000800:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000804:	f000 fcb2 	bl	800116c <DMA_GetFlagStatus>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d028      	beq.n	8000860 <DMA1_Channel6_IRQHandler+0x64>
  {  
    /* Disable the DMA Tx Channel and Clear all its Flags */  
    DMA_Cmd(sEE_I2C_DMA_CHANNEL_TX, DISABLE);
 800080e:	4815      	ldr	r0, [pc, #84]	; (8000864 <DMA1_Channel6_IRQHandler+0x68>)
 8000810:	2100      	movs	r1, #0
 8000812:	f000 fc8f 	bl	8001134 <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_FLAG_TX_GL);
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f000 fcd1 	bl	80011c0 <DMA_ClearFlag>

    /*!< Wait till all data have been physically transferred on the bus */
    sEETimeout = sEE_LONG_TIMEOUT;
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <DMA1_Channel6_IRQHandler+0x6c>)
 8000820:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8000824:	601a      	str	r2, [r3, #0]
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 8000826:	e008      	b.n	800083a <DMA1_Channel6_IRQHandler+0x3e>
    {
      if((sEETimeout--) == 0) sEE_TIMEOUT_UserCallback();
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <DMA1_Channel6_IRQHandler+0x6c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	1e59      	subs	r1, r3, #1
 800082e:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <DMA1_Channel6_IRQHandler+0x6c>)
 8000830:	6011      	str	r1, [r2, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d101      	bne.n	800083a <DMA1_Channel6_IRQHandler+0x3e>
 8000836:	f7ff ffdd 	bl	80007f4 <sEE_TIMEOUT_UserCallback>
    DMA_Cmd(sEE_I2C_DMA_CHANNEL_TX, DISABLE);
    DMA_ClearFlag(sEE_I2C_DMA_FLAG_TX_GL);

    /*!< Wait till all data have been physically transferred on the bus */
    sEETimeout = sEE_LONG_TIMEOUT;
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 800083a:	480c      	ldr	r0, [pc, #48]	; (800086c <DMA1_Channel6_IRQHandler+0x70>)
 800083c:	490c      	ldr	r1, [pc, #48]	; (8000870 <DMA1_Channel6_IRQHandler+0x74>)
 800083e:	f000 fb19 	bl	8000e74 <I2C_GetFlagStatus>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d0ef      	beq.n	8000828 <DMA1_Channel6_IRQHandler+0x2c>
    {
      if((sEETimeout--) == 0) sEE_TIMEOUT_UserCallback();
    }
    
    /*!< Send STOP condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);
 8000848:	4808      	ldr	r0, [pc, #32]	; (800086c <DMA1_Channel6_IRQHandler+0x70>)
 800084a:	2101      	movs	r1, #1
 800084c:	f000 faf2 	bl	8000e34 <I2C_GenerateSTOP>
    
    /* Perform a read on SR1 and SR2 register to clear eventualaly pending flags */
    (void)sEE_I2C->SR1;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <DMA1_Channel6_IRQHandler+0x70>)
 8000852:	8a9b      	ldrh	r3, [r3, #20]
    (void)sEE_I2C->SR2;
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <DMA1_Channel6_IRQHandler+0x70>)
 8000856:	8b1b      	ldrh	r3, [r3, #24]
    
    /* Reset the variable holding the number of data to be written */
    *sEEDataWritePointer = 0;  
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <DMA1_Channel6_IRQHandler+0x78>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]
  }
}
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	4002006c 	.word	0x4002006c
 8000868:	2000007c 	.word	0x2000007c
 800086c:	40005400 	.word	0x40005400
 8000870:	10000004 	.word	0x10000004
 8000874:	20000140 	.word	0x20000140

08000878 <DMA1_Channel7_IRQHandler>:
  * @brief  This function handles the DMA Rx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_RX_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_FLAG_RX_TC) != RESET)
 800087c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000880:	f000 fc74 	bl	800116c <DMA_GetFlagStatus>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d00f      	beq.n	80008aa <DMA1_Channel7_IRQHandler+0x32>
  {      
    /*!< Send STOP Condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);    
 800088a:	4808      	ldr	r0, [pc, #32]	; (80008ac <DMA1_Channel7_IRQHandler+0x34>)
 800088c:	2101      	movs	r1, #1
 800088e:	f000 fad1 	bl	8000e34 <I2C_GenerateSTOP>
    
    /* Disable the DMA Rx Channel and Clear all its Flags */  
    DMA_Cmd(sEE_I2C_DMA_CHANNEL_RX, DISABLE);
 8000892:	4807      	ldr	r0, [pc, #28]	; (80008b0 <DMA1_Channel7_IRQHandler+0x38>)
 8000894:	2100      	movs	r1, #0
 8000896:	f000 fc4d 	bl	8001134 <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_FLAG_RX_GL);
 800089a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800089e:	f000 fc8f 	bl	80011c0 <DMA_ClearFlag>
    
    /* Reset the variable holding the number of data to be read */
    *sEEDataReadPointer = 0;
 80008a2:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <DMA1_Channel7_IRQHandler+0x3c>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2200      	movs	r2, #0
 80008a8:	801a      	strh	r2, [r3, #0]
  }
}
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40005400 	.word	0x40005400
 80008b0:	40020080 	.word	0x40020080
 80008b4:	20000148 	.word	0x20000148

080008b8 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08c      	sub	sp, #48	; 0x30
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 80008ce:	2300      	movs	r3, #0
 80008d0:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	8a1b      	ldrh	r3, [r3, #16]
 80008de:	b29b      	uxth	r3, r3
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 80008e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008e4:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80008e8:	4013      	ands	r3, r2
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	88db      	ldrh	r3, [r3, #6]
 80008f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008f2:	4313      	orrs	r3, r2
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80008f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	899b      	ldrh	r3, [r3, #12]
 8000902:	b29b      	uxth	r3, r3
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000908:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 800090c:	4013      	ands	r3, r2
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	889a      	ldrh	r2, [r3, #4]
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	891b      	ldrh	r3, [r3, #8]
 8000918:	4313      	orrs	r3, r2
 800091a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000920:	4313      	orrs	r3, r2
 8000922:	b29b      	uxth	r3, r3
 8000924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000926:	4313      	orrs	r3, r2
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800092a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800092c:	b29a      	uxth	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	8a9b      	ldrh	r3, [r3, #20]
 8000936:	b29b      	uxth	r3, r3
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 800093a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800093c:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000940:	4013      	ands	r3, r2
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	899b      	ldrh	r3, [r3, #12]
 8000948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800094a:	4313      	orrs	r3, r2
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800094e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000950:	b29a      	uxth	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f948 	bl	8000bf0 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8000960:	69fa      	ldr	r2, [r7, #28]
 8000962:	4b30      	ldr	r3, [pc, #192]	; (8000a24 <USART_Init+0x16c>)
 8000964:	429a      	cmp	r2, r3
 8000966:	d102      	bne.n	800096e <USART_Init+0xb6>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
 800096c:	e001      	b.n	8000972 <USART_Init+0xba>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	899b      	ldrh	r3, [r3, #12]
 8000976:	b29b      	uxth	r3, r3
 8000978:	b29b      	uxth	r3, r3
 800097a:	b21b      	sxth	r3, r3
 800097c:	2b00      	cmp	r3, #0
 800097e:	da0c      	bge.n	800099a <USART_Init+0xe2>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000982:	4613      	mov	r3, r2
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	4413      	add	r3, r2
 8000988:	009a      	lsls	r2, r3, #2
 800098a:	441a      	add	r2, r3
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	fbb2 f3f3 	udiv	r3, r2, r3
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
 8000998:	e00b      	b.n	80009b2 <USART_Init+0xfa>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800099a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800099c:	4613      	mov	r3, r2
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	4413      	add	r3, r2
 80009a2:	009a      	lsls	r2, r3, #2
 80009a4:	441a      	add	r2, r3
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 80009b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009b4:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <USART_Init+0x170>)
 80009b6:	fba3 1302 	umull	r1, r3, r3, r2
 80009ba:	095b      	lsrs	r3, r3, #5
 80009bc:	011b      	lsls	r3, r3, #4
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80009c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009c2:	091b      	lsrs	r3, r3, #4
 80009c4:	2264      	movs	r2, #100	; 0x64
 80009c6:	fb02 f303 	mul.w	r3, r2, r3
 80009ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	899b      	ldrh	r3, [r3, #12]
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	b21b      	sxth	r3, r3
 80009da:	2b00      	cmp	r3, #0
 80009dc:	da0d      	bge.n	80009fa <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80009de:	6a3b      	ldr	r3, [r7, #32]
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <USART_Init+0x170>)
 80009e8:	fba3 1302 	umull	r1, r3, r3, r2
 80009ec:	095b      	lsrs	r3, r3, #5
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009f4:	4313      	orrs	r3, r2
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009f8:	e00c      	b.n	8000a14 <USART_Init+0x15c>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80009fa:	6a3b      	ldr	r3, [r7, #32]
 80009fc:	011b      	lsls	r3, r3, #4
 80009fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <USART_Init+0x170>)
 8000a04:	fba3 1302 	umull	r1, r3, r3, r2
 8000a08:	095b      	lsrs	r3, r3, #5
 8000a0a:	f003 030f 	and.w	r3, r3, #15
 8000a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a10:	4313      	orrs	r3, r2
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	811a      	strh	r2, [r3, #8]
}
 8000a1c:	3730      	adds	r7, #48	; 0x30
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40013800 	.word	0x40013800
 8000a28:	51eb851f 	.word	0x51eb851f

08000a2c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a38:	78fb      	ldrb	r3, [r7, #3]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d008      	beq.n	8000a50 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	899b      	ldrh	r3, [r3, #12]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	819a      	strh	r2, [r3, #12]
 8000a4e:	e007      	b.n	8000a60 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	899b      	ldrh	r3, [r3, #12]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	819a      	strh	r2, [r3, #12]
  }
}
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b087      	sub	sp, #28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	4613      	mov	r3, r2
 8000a76:	460a      	mov	r2, r1
 8000a78:	807a      	strh	r2, [r7, #2]
 8000a7a:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000a90:	887b      	ldrh	r3, [r7, #2]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	095b      	lsrs	r3, r3, #5
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8000a9a:	887b      	ldrh	r3, [r7, #2]
 8000a9c:	f003 031f 	and.w	r3, r3, #31
 8000aa0:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d103      	bne.n	8000aba <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	330c      	adds	r3, #12
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	e009      	b.n	8000ace <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d103      	bne.n	8000ac8 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	3310      	adds	r3, #16
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	e002      	b.n	8000ace <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	3314      	adds	r3, #20
 8000acc:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000ace:	787b      	ldrb	r3, [r7, #1]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d006      	beq.n	8000ae2 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	697a      	ldr	r2, [r7, #20]
 8000ad8:	6811      	ldr	r1, [r2, #0]
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	430a      	orrs	r2, r1
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	e006      	b.n	8000af0 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	697a      	ldr	r2, [r7, #20]
 8000ae6:	6811      	ldr	r1, [r2, #0]
 8000ae8:	68ba      	ldr	r2, [r7, #8]
 8000aea:	43d2      	mvns	r2, r2
 8000aec:	400a      	ands	r2, r1
 8000aee:	601a      	str	r2, [r3, #0]
  }
}
 8000af0:	371c      	adds	r7, #28
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	460b      	mov	r3, r1
 8000b06:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000b08:	887b      	ldrh	r3, [r7, #2]
 8000b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	809a      	strh	r2, [r3, #4]
}
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	889b      	ldrh	r3, [r3, #4]
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b32:	b29b      	uxth	r3, r3
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b087      	sub	sp, #28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	2300      	movs	r3, #0
 8000b56:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000b5c:	887b      	ldrh	r3, [r7, #2]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	095b      	lsrs	r3, r3, #5
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 8000b66:	887b      	ldrh	r3, [r7, #2]
 8000b68:	f003 031f 	and.w	r3, r3, #31
 8000b6c:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	2201      	movs	r2, #1
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d106      	bne.n	8000b8c <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	899b      	ldrh	r3, [r3, #12]
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	4013      	ands	r3, r2
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	e00f      	b.n	8000bac <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d106      	bne.n	8000ba0 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	8a1b      	ldrh	r3, [r3, #16]
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	697a      	ldr	r2, [r7, #20]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	e005      	b.n	8000bac <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	8a9b      	ldrh	r3, [r3, #20]
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	697a      	ldr	r2, [r7, #20]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000bac:	887b      	ldrh	r3, [r7, #2]
 8000bae:	0a1b      	lsrs	r3, r3, #8
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d005      	beq.n	8000bdc <USART_GetITStatus+0x9c>
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d002      	beq.n	8000bdc <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	74fb      	strb	r3, [r7, #19]
 8000bda:	e001      	b.n	8000be0 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000be0:	7cfb      	ldrb	r3, [r7, #19]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	371c      	adds	r7, #28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b08b      	sub	sp, #44	; 0x2c
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
 8000c04:	2300      	movs	r3, #0
 8000c06:	61bb      	str	r3, [r7, #24]

#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	2300      	movs	r3, #0
 8000c16:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000c18:	4b62      	ldr	r3, [pc, #392]	; (8000da4 <RCC_GetClocksFreq+0x1b4>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 030c 	and.w	r3, r3, #12
 8000c20:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000c22:	6a3b      	ldr	r3, [r7, #32]
 8000c24:	2b04      	cmp	r3, #4
 8000c26:	d007      	beq.n	8000c38 <RCC_GetClocksFreq+0x48>
 8000c28:	2b08      	cmp	r3, #8
 8000c2a:	d009      	beq.n	8000c40 <RCC_GetClocksFreq+0x50>
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d15e      	bne.n	8000cee <RCC_GetClocksFreq+0xfe>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a5d      	ldr	r2, [pc, #372]	; (8000da8 <RCC_GetClocksFreq+0x1b8>)
 8000c34:	601a      	str	r2, [r3, #0]
      break;
 8000c36:	e05e      	b.n	8000cf6 <RCC_GetClocksFreq+0x106>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a5c      	ldr	r2, [pc, #368]	; (8000dac <RCC_GetClocksFreq+0x1bc>)
 8000c3c:	601a      	str	r2, [r3, #0]
      break;
 8000c3e:	e05a      	b.n	8000cf6 <RCC_GetClocksFreq+0x106>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000c40:	4b58      	ldr	r3, [pc, #352]	; (8000da4 <RCC_GetClocksFreq+0x1b4>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000c4a:	4b56      	ldr	r3, [pc, #344]	; (8000da4 <RCC_GetClocksFreq+0x1b4>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c52:	61fb      	str	r3, [r7, #28]
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
        }
 #endif
      }
#else
      pllmull = pllmull >> 18;
 8000c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c56:	0c9b      	lsrs	r3, r3, #18
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
      
      if (pllmull != 0x0D)
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5c:	2b0d      	cmp	r3, #13
 8000c5e:	d003      	beq.n	8000c68 <RCC_GetClocksFreq+0x78>
      {
         pllmull += 2;
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	3302      	adds	r3, #2
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
 8000c66:	e001      	b.n	8000c6c <RCC_GetClocksFreq+0x7c>
      }
      else
      { /* PLL multiplication factor = PLL input clock * 6.5 */
        pllmull = 13 / 2; 
 8000c68:	2306      	movs	r3, #6
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
            
      if (pllsource == 0x00)
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d106      	bne.n	8000c80 <RCC_GetClocksFreq+0x90>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c74:	4a4e      	ldr	r2, [pc, #312]	; (8000db0 <RCC_GetClocksFreq+0x1c0>)
 8000c76:	fb02 f203 	mul.w	r2, r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	e035      	b.n	8000cec <RCC_GetClocksFreq+0xfc>
      }
      else
      {/* PREDIV1 selected as PLL clock entry */
        
        /* Get PREDIV1 clock source and division factor */
        prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
 8000c80:	4b48      	ldr	r3, [pc, #288]	; (8000da4 <RCC_GetClocksFreq+0x1b4>)
 8000c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c88:	617b      	str	r3, [r7, #20]
        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 8000c8a:	4b46      	ldr	r3, [pc, #280]	; (8000da4 <RCC_GetClocksFreq+0x1b4>)
 8000c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	3301      	adds	r3, #1
 8000c94:	613b      	str	r3, [r7, #16]
        
        if (prediv1source == 0)
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d109      	bne.n	8000cb0 <RCC_GetClocksFreq+0xc0>
        { /* HSE oscillator clock selected as PREDIV1 clock entry */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;          
 8000c9c:	4a43      	ldr	r2, [pc, #268]	; (8000dac <RCC_GetClocksFreq+0x1bc>)
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ca6:	fb02 f203 	mul.w	r2, r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	e01d      	b.n	8000cec <RCC_GetClocksFreq+0xfc>
        }
        else
        {/* PLL2 clock selected as PREDIV1 clock entry */
          
          /* Get PREDIV2 division factor and PLL2 multiplication factor */
          prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
 8000cb0:	4b3c      	ldr	r3, [pc, #240]	; (8000da4 <RCC_GetClocksFreq+0x1b4>)
 8000cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cb8:	091b      	lsrs	r3, r3, #4
 8000cba:	3301      	adds	r3, #1
 8000cbc:	60fb      	str	r3, [r7, #12]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
 8000cbe:	4b39      	ldr	r3, [pc, #228]	; (8000da4 <RCC_GetClocksFreq+0x1b4>)
 8000cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000cc6:	0a1b      	lsrs	r3, r3, #8
 8000cc8:	3302      	adds	r3, #2
 8000cca:	60bb      	str	r3, [r7, #8]
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
 8000ccc:	4a37      	ldr	r2, [pc, #220]	; (8000dac <RCC_GetClocksFreq+0x1bc>)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd4:	68ba      	ldr	r2, [r7, #8]
 8000cd6:	fb02 f203 	mul.w	r2, r2, r3
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ce2:	fb02 f203 	mul.w	r2, r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	601a      	str	r2, [r3, #0]
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000cea:	e004      	b.n	8000cf6 <RCC_GetClocksFreq+0x106>
 8000cec:	e003      	b.n	8000cf6 <RCC_GetClocksFreq+0x106>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a2d      	ldr	r2, [pc, #180]	; (8000da8 <RCC_GetClocksFreq+0x1b8>)
 8000cf2:	601a      	str	r2, [r3, #0]
      break;
 8000cf4:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000cf6:	4b2b      	ldr	r3, [pc, #172]	; (8000da4 <RCC_GetClocksFreq+0x1b4>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cfe:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000d00:	6a3b      	ldr	r3, [r7, #32]
 8000d02:	091b      	lsrs	r3, r3, #4
 8000d04:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000d06:	4a2b      	ldr	r2, [pc, #172]	; (8000db4 <RCC_GetClocksFreq+0x1c4>)
 8000d08:	6a3b      	ldr	r3, [r7, #32]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	61bb      	str	r3, [r7, #24]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	40da      	lsrs	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000d1e:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <RCC_GetClocksFreq+0x1b4>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000d26:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000d28:	6a3b      	ldr	r3, [r7, #32]
 8000d2a:	0a1b      	lsrs	r3, r3, #8
 8000d2c:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000d2e:	4a21      	ldr	r2, [pc, #132]	; (8000db4 <RCC_GetClocksFreq+0x1c4>)
 8000d30:	6a3b      	ldr	r3, [r7, #32]
 8000d32:	4413      	add	r3, r2
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	61bb      	str	r3, [r7, #24]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685a      	ldr	r2, [r3, #4]
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	40da      	lsrs	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <RCC_GetClocksFreq+0x1b4>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000d4e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000d50:	6a3b      	ldr	r3, [r7, #32]
 8000d52:	0adb      	lsrs	r3, r3, #11
 8000d54:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000d56:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <RCC_GetClocksFreq+0x1c4>)
 8000d58:	6a3b      	ldr	r3, [r7, #32]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	61bb      	str	r3, [r7, #24]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	40da      	lsrs	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <RCC_GetClocksFreq+0x1b4>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d76:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 14;
 8000d78:	6a3b      	ldr	r3, [r7, #32]
 8000d7a:	0b9b      	lsrs	r3, r3, #14
 8000d7c:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000d7e:	4a0e      	ldr	r2, [pc, #56]	; (8000db8 <RCC_GetClocksFreq+0x1c8>)
 8000d80:	6a3b      	ldr	r3, [r7, #32]
 8000d82:	4413      	add	r3, r2
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	61bb      	str	r3, [r7, #24]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68da      	ldr	r2, [r3, #12]
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	611a      	str	r2, [r3, #16]
}
 8000d98:	372c      	adds	r7, #44	; 0x2c
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	40021000 	.word	0x40021000
 8000da8:	007a1200 	.word	0x007a1200
 8000dac:	017d7840 	.word	0x017d7840
 8000db0:	003d0900 	.word	0x003d0900
 8000db4:	20000080 	.word	0x20000080
 8000db8:	20000090 	.word	0x20000090

08000dbc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000dc8:	78fb      	ldrb	r3, [r7, #3]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d006      	beq.n	8000ddc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <RCC_APB2PeriphClockCmd+0x38>)
 8000dd0:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <RCC_APB2PeriphClockCmd+0x38>)
 8000dd2:	6991      	ldr	r1, [r2, #24]
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	619a      	str	r2, [r3, #24]
 8000dda:	e006      	b.n	8000dea <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <RCC_APB2PeriphClockCmd+0x38>)
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <RCC_APB2PeriphClockCmd+0x38>)
 8000de0:	6991      	ldr	r1, [r2, #24]
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	43d2      	mvns	r2, r2
 8000de6:	400a      	ands	r2, r1
 8000de8:	619a      	str	r2, [r3, #24]
  }
}
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	40021000 	.word	0x40021000

08000df8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e04:	78fb      	ldrb	r3, [r7, #3]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d006      	beq.n	8000e18 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <RCC_APB1PeriphClockCmd+0x38>)
 8000e0c:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <RCC_APB1PeriphClockCmd+0x38>)
 8000e0e:	69d1      	ldr	r1, [r2, #28]
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	430a      	orrs	r2, r1
 8000e14:	61da      	str	r2, [r3, #28]
 8000e16:	e006      	b.n	8000e26 <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <RCC_APB1PeriphClockCmd+0x38>)
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <RCC_APB1PeriphClockCmd+0x38>)
 8000e1c:	69d1      	ldr	r1, [r2, #28]
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	43d2      	mvns	r2, r2
 8000e22:	400a      	ands	r2, r1
 8000e24:	61da      	str	r2, [r3, #28]
  }
}
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	40021000 	.word	0x40021000

08000e34 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e40:	78fb      	ldrb	r3, [r7, #3]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d008      	beq.n	8000e58 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	801a      	strh	r2, [r3, #0]
 8000e56:	e007      	b.n	8000e68 <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	801a      	strh	r2, [r3, #0]
  }
}
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDA"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b087      	sub	sp, #28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	0f1b      	lsrs	r3, r3, #28
 8000e92:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000e9a:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d003      	beq.n	8000eaa <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	3314      	adds	r3, #20
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	e005      	b.n	8000eb6 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	0c1b      	lsrs	r3, r3, #16
 8000eae:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	3318      	adds	r3, #24
 8000eb4:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d002      	beq.n	8000ec8 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	75fb      	strb	r3, [r7, #23]
 8000ec6:	e001      	b.n	8000ecc <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8000ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	371c      	adds	r7, #28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b089      	sub	sp, #36	; 0x24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	78db      	ldrb	r3, [r3, #3]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	78db      	ldrb	r3, [r3, #3]
 8000f0c:	f003 0310 	and.w	r3, r3, #16
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d004      	beq.n	8000f1e <GPIO_Init+0x42>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	789b      	ldrb	r3, [r3, #2]
 8000f18:	69fa      	ldr	r2, [r7, #28]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d044      	beq.n	8000fb2 <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
 8000f32:	e038      	b.n	8000fa6 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	2201      	movs	r2, #1
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d126      	bne.n	8000fa0 <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	69fa      	ldr	r2, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	78db      	ldrb	r3, [r3, #3]
 8000f7e:	2b28      	cmp	r3, #40	; 0x28
 8000f80:	d105      	bne.n	8000f8e <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	2201      	movs	r2, #1
 8000f86:	409a      	lsls	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	615a      	str	r2, [r3, #20]
 8000f8c:	e008      	b.n	8000fa0 <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	78db      	ldrb	r3, [r3, #3]
 8000f92:	2b48      	cmp	r3, #72	; 0x48
 8000f94:	d104      	bne.n	8000fa0 <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	409a      	lsls	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	61bb      	str	r3, [r7, #24]
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	2b07      	cmp	r3, #7
 8000faa:	d9c3      	bls.n	8000f34 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	697a      	ldr	r2, [r7, #20]
 8000fb0:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	2bff      	cmp	r3, #255	; 0xff
 8000fb8:	d946      	bls.n	8001048 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	e03a      	b.n	800103c <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	3308      	adds	r3, #8
 8000fca:	2201      	movs	r2, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d127      	bne.n	8001036 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	220f      	movs	r2, #15
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	4313      	orrs	r3, r2
 800100c:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	78db      	ldrb	r3, [r3, #3]
 8001012:	2b28      	cmp	r3, #40	; 0x28
 8001014:	d105      	bne.n	8001022 <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	3308      	adds	r3, #8
 800101a:	2201      	movs	r2, #1
 800101c:	409a      	lsls	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	78db      	ldrb	r3, [r3, #3]
 8001026:	2b48      	cmp	r3, #72	; 0x48
 8001028:	d105      	bne.n	8001036 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	3308      	adds	r3, #8
 800102e:	2201      	movs	r2, #1
 8001030:	409a      	lsls	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	3301      	adds	r3, #1
 800103a:	61bb      	str	r3, [r7, #24]
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	2b07      	cmp	r3, #7
 8001040:	d9c1      	bls.n	8000fc6 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	605a      	str	r2, [r3, #4]
  }
}
 8001048:	3724      	adds	r7, #36	; 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8001054:	b480      	push	{r7}
 8001056:	b087      	sub	sp, #28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	2300      	movs	r3, #0
 800106e:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	da03      	bge.n	800107e <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 8001076:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <GPIO_PinRemapConfig+0xdc>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	e002      	b.n	8001084 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 800107e:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <GPIO_PinRemapConfig+0xdc>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800108a:	0c1b      	lsrs	r3, r3, #16
 800108c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	b29b      	uxth	r3, r3
 8001092:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800109a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800109e:	d10a      	bne.n	80010b6 <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80010a6:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80010a8:	4b21      	ldr	r3, [pc, #132]	; (8001130 <GPIO_PinRemapConfig+0xdc>)
 80010aa:	4a21      	ldr	r2, [pc, #132]	; (8001130 <GPIO_PinRemapConfig+0xdc>)
 80010ac:	6852      	ldr	r2, [r2, #4]
 80010ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	e021      	b.n	80010fa <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00e      	beq.n	80010de <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	2203      	movs	r2, #3
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	4013      	ands	r3, r2
 80010d2:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	e00d      	b.n	80010fa <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	0d5b      	lsrs	r3, r3, #21
 80010e2:	011b      	lsls	r3, r3, #4
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	4013      	ands	r3, r2
 80010f0:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80010f8:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 80010fa:	78fb      	ldrb	r3, [r7, #3]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d008      	beq.n	8001112 <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	0d5b      	lsrs	r3, r3, #21
 8001104:	011b      	lsls	r3, r3, #4
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	4313      	orrs	r3, r2
 8001110:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	da03      	bge.n	8001120 <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <GPIO_PinRemapConfig+0xdc>)
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	61da      	str	r2, [r3, #28]
 800111e:	e002      	b.n	8001126 <GPIO_PinRemapConfig+0xd2>
  }
  else
  {
    AFIO->MAPR = tmpreg;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <GPIO_PinRemapConfig+0xdc>)
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	605a      	str	r2, [r3, #4]
  }  
}
 8001126:	371c      	adds	r7, #28
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	40010000 	.word	0x40010000

08001134 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001140:	78fb      	ldrb	r3, [r7, #3]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d006      	beq.n	8001154 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f043 0201 	orr.w	r2, r3, #1
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	e006      	b.n	8001162 <DMA_Cmd+0x2e>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800115c:	4013      	ands	r3, r2
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	6013      	str	r3, [r2, #0]
  }
}
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001174:	2300      	movs	r3, #0
 8001176:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <DMA_GetFlagStatus+0x4c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	e002      	b.n	8001194 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <DMA_GetFlagStatus+0x50>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8001194:	68ba      	ldr	r2, [r7, #8]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4013      	ands	r3, r2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d002      	beq.n	80011a4 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 800119e:	2301      	movs	r3, #1
 80011a0:	73fb      	strb	r3, [r7, #15]
 80011a2:	e001      	b.n	80011a8 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 80011a4:	2300      	movs	r3, #0
 80011a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40020400 	.word	0x40020400
 80011bc:	40020000 	.word	0x40020000

080011c0 <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <DMA_ClearFlag+0x2c>)
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	e002      	b.n	80011e0 <DMA_ClearFlag+0x20>
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <DMA_ClearFlag+0x30>)
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	605a      	str	r2, [r3, #4]
  }
}
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40020400 	.word	0x40020400
 80011f0:	40020000 	.word	0x40020000

080011f4 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80011fc:	4a05      	ldr	r2, [pc, #20]	; (8001214 <NVIC_PriorityGroupConfig+0x20>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	60d3      	str	r3, [r2, #12]
}
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001218:	b480      	push	{r7}
 800121a:	b087      	sub	sp, #28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	230f      	movs	r3, #15
 800122a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	78db      	ldrb	r3, [r3, #3]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d038      	beq.n	80012a6 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001234:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <NVIC_Init+0xb8>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	43db      	mvns	r3, r3
 800123a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800123e:	0a1b      	lsrs	r3, r3, #8
 8001240:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f1c3 0304 	rsb	r3, r3, #4
 8001248:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	fa22 f303 	lsr.w	r3, r2, r3
 8001252:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	785b      	ldrb	r3, [r3, #1]
 8001258:	461a      	mov	r2, r3
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	789b      	ldrb	r3, [r3, #2]
 8001266:	461a      	mov	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4013      	ands	r3, r2
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	4313      	orrs	r3, r2
 8001270:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	011b      	lsls	r3, r3, #4
 8001276:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001278:	4916      	ldr	r1, [pc, #88]	; (80012d4 <NVIC_Init+0xbc>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	440b      	add	r3, r1
 8001284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <NVIC_Init+0xbc>)
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	7812      	ldrb	r2, [r2, #0]
 800128e:	0952      	lsrs	r2, r2, #5
 8001290:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	7809      	ldrb	r1, [r1, #0]
 8001296:	f001 011f 	and.w	r1, r1, #31
 800129a:	2001      	movs	r0, #1
 800129c:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80012a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80012a4:	e00e      	b.n	80012c4 <NVIC_Init+0xac>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <NVIC_Init+0xbc>)
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	7812      	ldrb	r2, [r2, #0]
 80012ac:	0952      	lsrs	r2, r2, #5
 80012ae:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80012b0:	6879      	ldr	r1, [r7, #4]
 80012b2:	7809      	ldrb	r1, [r1, #0]
 80012b4:	f001 011f 	and.w	r1, r1, #31
 80012b8:	2001      	movs	r0, #1
 80012ba:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80012be:	3220      	adds	r2, #32
 80012c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80012c4:	371c      	adds	r7, #28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000ed00 	.word	0xe000ed00
 80012d4:	e000e100 	.word	0xe000e100

080012d8 <__libc_init_array>:
 80012d8:	b570      	push	{r4, r5, r6, lr}
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <__libc_init_array+0x3c>)
 80012dc:	4d0e      	ldr	r5, [pc, #56]	; (8001318 <__libc_init_array+0x40>)
 80012de:	2400      	movs	r4, #0
 80012e0:	1aed      	subs	r5, r5, r3
 80012e2:	10ad      	asrs	r5, r5, #2
 80012e4:	461e      	mov	r6, r3
 80012e6:	42ac      	cmp	r4, r5
 80012e8:	d004      	beq.n	80012f4 <__libc_init_array+0x1c>
 80012ea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80012ee:	4790      	blx	r2
 80012f0:	3401      	adds	r4, #1
 80012f2:	e7f8      	b.n	80012e6 <__libc_init_array+0xe>
 80012f4:	f000 f816 	bl	8001324 <_init>
 80012f8:	4d08      	ldr	r5, [pc, #32]	; (800131c <__libc_init_array+0x44>)
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <__libc_init_array+0x48>)
 80012fc:	2400      	movs	r4, #0
 80012fe:	1aed      	subs	r5, r5, r3
 8001300:	10ad      	asrs	r5, r5, #2
 8001302:	461e      	mov	r6, r3
 8001304:	42ac      	cmp	r4, r5
 8001306:	d004      	beq.n	8001312 <__libc_init_array+0x3a>
 8001308:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800130c:	4790      	blx	r2
 800130e:	3401      	adds	r4, #1
 8001310:	e7f8      	b.n	8001304 <__libc_init_array+0x2c>
 8001312:	bd70      	pop	{r4, r5, r6, pc}
 8001314:	0800133c 	.word	0x0800133c
 8001318:	0800133c 	.word	0x0800133c
 800131c:	08001340 	.word	0x08001340
 8001320:	0800133c 	.word	0x0800133c

08001324 <_init>:
 8001324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001326:	bf00      	nop
 8001328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800132a:	bc08      	pop	{r3}
 800132c:	469e      	mov	lr, r3
 800132e:	4770      	bx	lr

08001330 <_fini>:
 8001330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001332:	bf00      	nop
 8001334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001336:	bc08      	pop	{r3}
 8001338:	469e      	mov	lr, r3
 800133a:	4770      	bx	lr
