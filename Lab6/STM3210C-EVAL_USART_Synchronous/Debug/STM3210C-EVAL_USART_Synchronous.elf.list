
STM3210C-EVAL_USART_Synchronous.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001084  080001e4  080001e4  000081e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08001268  08001268  00009268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  0800126c  0800126c  0000926c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000a4  20000000  08001270  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000000d0  200000a4  08001314  000100a4  2**2
                  ALLOC
  6 ._user_heap_stack 00000200  20000174  08001314  00010174  2**0
                  ALLOC
  7 .ARM.attributes 00000029  00000000  00000000  000100a4  2**0
                  CONTENTS, READONLY
  8 .debug_info   00004833  00000000  00000000  000100cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000ec4  00000000  00000000  00014900  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000006f0  00000000  00000000  000157c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000638  00000000  00000000  00015eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000026f0  00000000  00000000  000164f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001db8  00000000  00000000  00018be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000082  00000000  00000000  0001a998  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00001504  00000000  00000000  0001aa1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000a4 	.word	0x200000a4
 8000200:	00000000 	.word	0x00000000
 8000204:	08001250 	.word	0x08001250

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	08001250 	.word	0x08001250
 8000220:	200000a8 	.word	0x200000a8

08000224 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000228:	4b19      	ldr	r3, [pc, #100]	; (8000290 <SystemInit+0x6c>)
 800022a:	4a19      	ldr	r2, [pc, #100]	; (8000290 <SystemInit+0x6c>)
 800022c:	6812      	ldr	r2, [r2, #0]
 800022e:	f042 0201 	orr.w	r2, r2, #1
 8000232:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
 8000234:	4a16      	ldr	r2, [pc, #88]	; (8000290 <SystemInit+0x6c>)
 8000236:	4b16      	ldr	r3, [pc, #88]	; (8000290 <SystemInit+0x6c>)
 8000238:	6859      	ldr	r1, [r3, #4]
 800023a:	4b16      	ldr	r3, [pc, #88]	; (8000294 <SystemInit+0x70>)
 800023c:	400b      	ands	r3, r1
 800023e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000240:	4a13      	ldr	r2, [pc, #76]	; (8000290 <SystemInit+0x6c>)
 8000242:	4b13      	ldr	r3, [pc, #76]	; (8000290 <SystemInit+0x6c>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800024a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800024e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000250:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <SystemInit+0x6c>)
 8000252:	4a0f      	ldr	r2, [pc, #60]	; (8000290 <SystemInit+0x6c>)
 8000254:	6812      	ldr	r2, [r2, #0]
 8000256:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800025a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800025c:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <SystemInit+0x6c>)
 800025e:	4a0c      	ldr	r2, [pc, #48]	; (8000290 <SystemInit+0x6c>)
 8000260:	6852      	ldr	r2, [r2, #4]
 8000262:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000266:	605a      	str	r2, [r3, #4]

#ifdef STM32F10X_CL
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEBFFFFFF;
 8000268:	4b09      	ldr	r3, [pc, #36]	; (8000290 <SystemInit+0x6c>)
 800026a:	4a09      	ldr	r2, [pc, #36]	; (8000290 <SystemInit+0x6c>)
 800026c:	6812      	ldr	r2, [r2, #0]
 800026e:	f022 52a0 	bic.w	r2, r2, #335544320	; 0x14000000
 8000272:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000;
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <SystemInit+0x6c>)
 8000276:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800027a:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
 800027c:	4b04      	ldr	r3, [pc, #16]	; (8000290 <SystemInit+0x6c>)
 800027e:	2200      	movs	r2, #0
 8000280:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000282:	f000 f80b 	bl	800029c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000286:	4b04      	ldr	r3, [pc, #16]	; (8000298 <SystemInit+0x74>)
 8000288:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800028c:	609a      	str	r2, [r3, #8]
#endif 
}
 800028e:	bd80      	pop	{r7, pc}
 8000290:	40021000 	.word	0x40021000
 8000294:	f0ff0000 	.word	0xf0ff0000
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80002a0:	f000 f802 	bl	80002a8 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop

080002a8 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80002ae:	2300      	movs	r3, #0
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	2300      	movs	r3, #0
 80002b4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80002b6:	4b47      	ldr	r3, [pc, #284]	; (80003d4 <SetSysClockTo72+0x12c>)
 80002b8:	4a46      	ldr	r2, [pc, #280]	; (80003d4 <SetSysClockTo72+0x12c>)
 80002ba:	6812      	ldr	r2, [r2, #0]
 80002bc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80002c0:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80002c2:	4b44      	ldr	r3, [pc, #272]	; (80003d4 <SetSysClockTo72+0x12c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ca:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3301      	adds	r3, #1
 80002d0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d103      	bne.n	80002e0 <SetSysClockTo72+0x38>
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80002de:	d1f0      	bne.n	80002c2 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80002e0:	4b3c      	ldr	r3, [pc, #240]	; (80003d4 <SetSysClockTo72+0x12c>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d002      	beq.n	80002f2 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80002ec:	2301      	movs	r3, #1
 80002ee:	603b      	str	r3, [r7, #0]
 80002f0:	e001      	b.n	80002f6 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80002f2:	2300      	movs	r3, #0
 80002f4:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d166      	bne.n	80003ca <SetSysClockTo72+0x122>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80002fc:	4b36      	ldr	r3, [pc, #216]	; (80003d8 <SetSysClockTo72+0x130>)
 80002fe:	4a36      	ldr	r2, [pc, #216]	; (80003d8 <SetSysClockTo72+0x130>)
 8000300:	6812      	ldr	r2, [r2, #0]
 8000302:	f042 0210 	orr.w	r2, r2, #16
 8000306:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000308:	4b33      	ldr	r3, [pc, #204]	; (80003d8 <SetSysClockTo72+0x130>)
 800030a:	4a33      	ldr	r2, [pc, #204]	; (80003d8 <SetSysClockTo72+0x130>)
 800030c:	6812      	ldr	r2, [r2, #0]
 800030e:	f022 0203 	bic.w	r2, r2, #3
 8000312:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000314:	4b30      	ldr	r3, [pc, #192]	; (80003d8 <SetSysClockTo72+0x130>)
 8000316:	4a30      	ldr	r2, [pc, #192]	; (80003d8 <SetSysClockTo72+0x130>)
 8000318:	6812      	ldr	r2, [r2, #0]
 800031a:	f042 0202 	orr.w	r2, r2, #2
 800031e:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000320:	4b2c      	ldr	r3, [pc, #176]	; (80003d4 <SetSysClockTo72+0x12c>)
 8000322:	4a2c      	ldr	r2, [pc, #176]	; (80003d4 <SetSysClockTo72+0x12c>)
 8000324:	6852      	ldr	r2, [r2, #4]
 8000326:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000328:	4b2a      	ldr	r3, [pc, #168]	; (80003d4 <SetSysClockTo72+0x12c>)
 800032a:	4a2a      	ldr	r2, [pc, #168]	; (80003d4 <SetSysClockTo72+0x12c>)
 800032c:	6852      	ldr	r2, [r2, #4]
 800032e:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000330:	4b28      	ldr	r3, [pc, #160]	; (80003d4 <SetSysClockTo72+0x12c>)
 8000332:	4a28      	ldr	r2, [pc, #160]	; (80003d4 <SetSysClockTo72+0x12c>)
 8000334:	6852      	ldr	r2, [r2, #4]
 8000336:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800033a:	605a      	str	r2, [r3, #4]
#ifdef STM32F10X_CL
    /* Configure PLLs ------------------------------------------------------*/
    /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
    /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
        
    RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 800033c:	4a25      	ldr	r2, [pc, #148]	; (80003d4 <SetSysClockTo72+0x12c>)
 800033e:	4b25      	ldr	r3, [pc, #148]	; (80003d4 <SetSysClockTo72+0x12c>)
 8000340:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000342:	4b26      	ldr	r3, [pc, #152]	; (80003dc <SetSysClockTo72+0x134>)
 8000344:	400b      	ands	r3, r1
 8000346:	62d3      	str	r3, [r2, #44]	; 0x2c
                              RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
    RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 8000348:	4a22      	ldr	r2, [pc, #136]	; (80003d4 <SetSysClockTo72+0x12c>)
 800034a:	4b22      	ldr	r3, [pc, #136]	; (80003d4 <SetSysClockTo72+0x12c>)
 800034c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800034e:	f443 3383 	orr.w	r3, r3, #67072	; 0x10600
 8000352:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8000356:	62d3      	str	r3, [r2, #44]	; 0x2c
                             RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
  
    /* Enable PLL2 */
    RCC->CR |= RCC_CR_PLL2ON;
 8000358:	4b1e      	ldr	r3, [pc, #120]	; (80003d4 <SetSysClockTo72+0x12c>)
 800035a:	4a1e      	ldr	r2, [pc, #120]	; (80003d4 <SetSysClockTo72+0x12c>)
 800035c:	6812      	ldr	r2, [r2, #0]
 800035e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000362:	601a      	str	r2, [r3, #0]
    /* Wait till PLL2 is ready */
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 8000364:	bf00      	nop
 8000366:	4b1b      	ldr	r3, [pc, #108]	; (80003d4 <SetSysClockTo72+0x12c>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d0f9      	beq.n	8000366 <SetSysClockTo72+0xbe>
    {
    }
    
   
    /* PLL configuration: PLLCLK = PREDIV1 * 9 = 72 MHz */ 
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 8000372:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <SetSysClockTo72+0x12c>)
 8000374:	4a17      	ldr	r2, [pc, #92]	; (80003d4 <SetSysClockTo72+0x12c>)
 8000376:	6852      	ldr	r2, [r2, #4]
 8000378:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800037c:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 800037e:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <SetSysClockTo72+0x12c>)
 8000380:	4a14      	ldr	r2, [pc, #80]	; (80003d4 <SetSysClockTo72+0x12c>)
 8000382:	6852      	ldr	r2, [r2, #4]
 8000384:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8000388:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800038a:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <SetSysClockTo72+0x12c>)
 800038c:	4a11      	ldr	r2, [pc, #68]	; (80003d4 <SetSysClockTo72+0x12c>)
 800038e:	6812      	ldr	r2, [r2, #0]
 8000390:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000394:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000396:	bf00      	nop
 8000398:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <SetSysClockTo72+0x12c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d0f9      	beq.n	8000398 <SetSysClockTo72+0xf0>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003a4:	4b0b      	ldr	r3, [pc, #44]	; (80003d4 <SetSysClockTo72+0x12c>)
 80003a6:	4a0b      	ldr	r2, [pc, #44]	; (80003d4 <SetSysClockTo72+0x12c>)
 80003a8:	6852      	ldr	r2, [r2, #4]
 80003aa:	f022 0203 	bic.w	r2, r2, #3
 80003ae:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80003b0:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <SetSysClockTo72+0x12c>)
 80003b2:	4a08      	ldr	r2, [pc, #32]	; (80003d4 <SetSysClockTo72+0x12c>)
 80003b4:	6852      	ldr	r2, [r2, #4]
 80003b6:	f042 0202 	orr.w	r2, r2, #2
 80003ba:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80003bc:	bf00      	nop
 80003be:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <SetSysClockTo72+0x12c>)
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	f003 030c 	and.w	r3, r3, #12
 80003c6:	2b08      	cmp	r3, #8
 80003c8:	d1f9      	bne.n	80003be <SetSysClockTo72+0x116>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40022000 	.word	0x40022000
 80003dc:	fffef000 	.word	0xfffef000

080003e0 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
}
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr

080003ec <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80003f0:	e7fe      	b.n	80003f0 <HardFault_Handler+0x4>
 80003f2:	bf00      	nop

080003f4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80003f8:	e7fe      	b.n	80003f8 <MemManage_Handler+0x4>
 80003fa:	bf00      	nop

080003fc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000400:	e7fe      	b.n	8000400 <BusFault_Handler+0x4>
 8000402:	bf00      	nop

08000404 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000408:	e7fe      	b.n	8000408 <UsageFault_Handler+0x4>
 800040a:	bf00      	nop

0800040c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
}
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
}
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <PendSV_Handler>:
  * @brief  This function handles PendSV_Handler exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
}
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr

08000430 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
}
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800043c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800043e:	f000 b804 	b.w	800044a <LoopCopyDataInit>

08000442 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000442:	4b0d      	ldr	r3, [pc, #52]	; (8000478 <LoopFillZerobss+0x16>)
	ldr	r3, [r3, r1]
 8000444:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000446:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000448:	3104      	adds	r1, #4

0800044a <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800044a:	480c      	ldr	r0, [pc, #48]	; (800047c <LoopFillZerobss+0x1a>)
	ldr	r3, =_edata
 800044c:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <LoopFillZerobss+0x1e>)
	adds	r2, r0, r1
 800044e:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000450:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000452:	f4ff aff6 	bcc.w	8000442 <CopyDataInit>
	ldr	r2, =_sbss
 8000456:	4a0b      	ldr	r2, [pc, #44]	; (8000484 <LoopFillZerobss+0x22>)
	b	LoopFillZerobss
 8000458:	f000 b803 	b.w	8000462 <LoopFillZerobss>

0800045c <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800045c:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800045e:	f842 3b04 	str.w	r3, [r2], #4

08000462 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <LoopFillZerobss+0x26>)
	cmp	r2, r3
 8000464:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000466:	f4ff aff9 	bcc.w	800045c <FillZerobss>

/* Call the clock system intitialization function.*/
  	bl  SystemInit
 800046a:	f7ff fedb 	bl	8000224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800046e:	f000 fec9 	bl	8001204 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000472:	f000 f80d 	bl	8000490 <main>
	bx	lr
 8000476:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000478:	08001270 	.word	0x08001270
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 800047c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000480:	200000a4 	.word	0x200000a4
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000484:	200000a4 	.word	0x200000a4
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000488:	20000174 	.word	0x20000174

0800048c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800048c:	f7ff bffe 	b.w	800048c <ADC1_2_IRQHandler>

08000490 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000490:	b598      	push	{r3, r4, r7, lr}
 8000492:	af00      	add	r7, sp, #0
       To reconfigure the default setting of SystemInit() function, refer to
       system_stm32f10x.c file
     */     
       
  /* System Clocks Configuration */
  RCC_Configuration();
 8000494:	f000 f8e6 	bl	8000664 <RCC_Configuration>

  /* Configure the GPIO ports */
  GPIO_Configuration();
 8000498:	f000 f8f6 	bl	8000688 <GPIO_Configuration>

  /* Configure the SPI */
  SPI_Configuration();
 800049c:	f000 f91a 	bl	80006d4 <SPI_Configuration>
        - USART CPOL: Clock is active High
        - USART CPHA: Data is captured on the second edge 
        - USART LastBit: The clock pulse of the last data bit is output to 
                         the SCLK pin
  */
  USART_ClockInitStructure.USART_Clock = USART_Clock_Enable;
 80004a0:	4b60      	ldr	r3, [pc, #384]	; (8000624 <main+0x194>)
 80004a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80004a6:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStructure.USART_CPOL = USART_CPOL_High;
 80004a8:	4b5e      	ldr	r3, [pc, #376]	; (8000624 <main+0x194>)
 80004aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004ae:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStructure.USART_CPHA = USART_CPHA_2Edge;
 80004b0:	4b5c      	ldr	r3, [pc, #368]	; (8000624 <main+0x194>)
 80004b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004b6:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStructure.USART_LastBit = USART_LastBit_Enable;
 80004b8:	4b5a      	ldr	r3, [pc, #360]	; (8000624 <main+0x194>)
 80004ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004be:	80da      	strh	r2, [r3, #6]
  USART_ClockInit(USARTy, &USART_ClockInitStructure);
 80004c0:	4859      	ldr	r0, [pc, #356]	; (8000628 <main+0x198>)
 80004c2:	4958      	ldr	r1, [pc, #352]	; (8000624 <main+0x194>)
 80004c4:	f000 fa6c 	bl	80009a0 <USART_ClockInit>

  USART_InitStructure.USART_BaudRate = 115200;
 80004c8:	4b58      	ldr	r3, [pc, #352]	; (800062c <main+0x19c>)
 80004ca:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004ce:	601a      	str	r2, [r3, #0]
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80004d0:	4b56      	ldr	r3, [pc, #344]	; (800062c <main+0x19c>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	809a      	strh	r2, [r3, #4]
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80004d6:	4b55      	ldr	r3, [pc, #340]	; (800062c <main+0x19c>)
 80004d8:	2200      	movs	r2, #0
 80004da:	80da      	strh	r2, [r3, #6]
  USART_InitStructure.USART_Parity = USART_Parity_No ;
 80004dc:	4b53      	ldr	r3, [pc, #332]	; (800062c <main+0x19c>)
 80004de:	2200      	movs	r2, #0
 80004e0:	811a      	strh	r2, [r3, #8]
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80004e2:	4b52      	ldr	r3, [pc, #328]	; (800062c <main+0x19c>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	819a      	strh	r2, [r3, #12]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80004e8:	4b50      	ldr	r3, [pc, #320]	; (800062c <main+0x19c>)
 80004ea:	220c      	movs	r2, #12
 80004ec:	815a      	strh	r2, [r3, #10]
  USART_Init(USARTy, &USART_InitStructure);
 80004ee:	484e      	ldr	r0, [pc, #312]	; (8000628 <main+0x198>)
 80004f0:	494e      	ldr	r1, [pc, #312]	; (800062c <main+0x19c>)
 80004f2:	f000 f99b 	bl	800082c <USART_Init>
  
  /* Configure the USARTy */
  USART_Init(USARTy, &USART_InitStructure);
 80004f6:	484c      	ldr	r0, [pc, #304]	; (8000628 <main+0x198>)
 80004f8:	494c      	ldr	r1, [pc, #304]	; (800062c <main+0x19c>)
 80004fa:	f000 f997 	bl	800082c <USART_Init>

  /* Enable the USARTy */
  USART_Cmd(USARTy, ENABLE);
 80004fe:	484a      	ldr	r0, [pc, #296]	; (8000628 <main+0x198>)
 8000500:	2101      	movs	r1, #1
 8000502:	f000 fa77 	bl	80009f4 <USART_Cmd>

  while(NbrOfDataToRead2--)
 8000506:	e02b      	b.n	8000560 <main+0xd0>
  {
    /* Write one byte in the USARTy Transmit Data Register */
    USART_SendData(USARTy, TxBuffer1[TxCounter1++]);
 8000508:	4b49      	ldr	r3, [pc, #292]	; (8000630 <main+0x1a0>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	b2db      	uxtb	r3, r3
 800050e:	1c5a      	adds	r2, r3, #1
 8000510:	b2d1      	uxtb	r1, r2
 8000512:	4a47      	ldr	r2, [pc, #284]	; (8000630 <main+0x1a0>)
 8000514:	7011      	strb	r1, [r2, #0]
 8000516:	4a47      	ldr	r2, [pc, #284]	; (8000634 <main+0x1a4>)
 8000518:	5cd3      	ldrb	r3, [r2, r3]
 800051a:	4843      	ldr	r0, [pc, #268]	; (8000628 <main+0x198>)
 800051c:	4619      	mov	r1, r3
 800051e:	f000 fa89 	bl	8000a34 <USART_SendData>
    /* Wait until end of transmit */
    while(USART_GetFlagStatus(USARTy, USART_FLAG_TC) == RESET)
 8000522:	bf00      	nop
 8000524:	4840      	ldr	r0, [pc, #256]	; (8000628 <main+0x198>)
 8000526:	2140      	movs	r1, #64	; 0x40
 8000528:	f000 faa6 	bl	8000a78 <USART_GetFlagStatus>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d0f8      	beq.n	8000524 <main+0x94>
    {
    }
    /* Wait the byte is entirely received by SPIy */  
    while(SPI_I2S_GetFlagStatus(SPIy, SPI_I2S_FLAG_RXNE) == RESET)
 8000532:	bf00      	nop
 8000534:	4840      	ldr	r0, [pc, #256]	; (8000638 <main+0x1a8>)
 8000536:	2101      	movs	r1, #1
 8000538:	f000 fb98 	bl	8000c6c <SPI_I2S_GetFlagStatus>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d0f8      	beq.n	8000534 <main+0xa4>
    {
    }
    /* Store the received byte in the RxBuffer2 */
    RxBuffer2[RxCounter2++] = SPI_I2S_ReceiveData(SPIy);
 8000542:	4b3e      	ldr	r3, [pc, #248]	; (800063c <main+0x1ac>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	b2db      	uxtb	r3, r3
 8000548:	1c5a      	adds	r2, r3, #1
 800054a:	b2d1      	uxtb	r1, r2
 800054c:	4a3b      	ldr	r2, [pc, #236]	; (800063c <main+0x1ac>)
 800054e:	7011      	strb	r1, [r2, #0]
 8000550:	461c      	mov	r4, r3
 8000552:	4839      	ldr	r0, [pc, #228]	; (8000638 <main+0x1a8>)
 8000554:	f000 fb7c 	bl	8000c50 <SPI_I2S_ReceiveData>
 8000558:	4603      	mov	r3, r0
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b38      	ldr	r3, [pc, #224]	; (8000640 <main+0x1b0>)
 800055e:	551a      	strb	r2, [r3, r4]
  USART_Init(USARTy, &USART_InitStructure);

  /* Enable the USARTy */
  USART_Cmd(USARTy, ENABLE);

  while(NbrOfDataToRead2--)
 8000560:	4b38      	ldr	r3, [pc, #224]	; (8000644 <main+0x1b4>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	1e5a      	subs	r2, r3, #1
 8000568:	b2d1      	uxtb	r1, r2
 800056a:	4a36      	ldr	r2, [pc, #216]	; (8000644 <main+0x1b4>)
 800056c:	7011      	strb	r1, [r2, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d1ca      	bne.n	8000508 <main+0x78>
    /* Store the received byte in the RxBuffer2 */
    RxBuffer2[RxCounter2++] = SPI_I2S_ReceiveData(SPIy);
  }

  /* Clear the USARTy Data Register */
  USART_ReceiveData(USARTy);
 8000572:	482d      	ldr	r0, [pc, #180]	; (8000628 <main+0x198>)
 8000574:	f000 fa70 	bl	8000a58 <USART_ReceiveData>

  while(NbrOfDataToRead1--)
 8000578:	e037      	b.n	80005ea <main+0x15a>
  {
    /* Wait until end of transmit */
    while(SPI_I2S_GetFlagStatus(SPIy, SPI_I2S_FLAG_TXE)== RESET)
 800057a:	bf00      	nop
 800057c:	482e      	ldr	r0, [pc, #184]	; (8000638 <main+0x1a8>)
 800057e:	2102      	movs	r1, #2
 8000580:	f000 fb74 	bl	8000c6c <SPI_I2S_GetFlagStatus>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d0f8      	beq.n	800057c <main+0xec>
    {
    }
    /* Write one byte in the SPIy Transmit Data Register */
    SPI_I2S_SendData(SPIy, TxBuffer2[TxCounter2++]);
 800058a:	4b2f      	ldr	r3, [pc, #188]	; (8000648 <main+0x1b8>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	b2db      	uxtb	r3, r3
 8000590:	1c5a      	adds	r2, r3, #1
 8000592:	b2d1      	uxtb	r1, r2
 8000594:	4a2c      	ldr	r2, [pc, #176]	; (8000648 <main+0x1b8>)
 8000596:	7011      	strb	r1, [r2, #0]
 8000598:	4a2c      	ldr	r2, [pc, #176]	; (800064c <main+0x1bc>)
 800059a:	5cd3      	ldrb	r3, [r2, r3]
 800059c:	4826      	ldr	r0, [pc, #152]	; (8000638 <main+0x1a8>)
 800059e:	4619      	mov	r1, r3
 80005a0:	f000 fb48 	bl	8000c34 <SPI_I2S_SendData>

    /* Send a Dummy byte to generate clock to slave */ 
    USART_SendData(USARTy, DYMMY_BYTE);
 80005a4:	4820      	ldr	r0, [pc, #128]	; (8000628 <main+0x198>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	f000 fa44 	bl	8000a34 <USART_SendData>
    /* Wait until end of transmit */
    while(USART_GetFlagStatus(USARTy, USART_FLAG_TC) == RESET)
 80005ac:	bf00      	nop
 80005ae:	481e      	ldr	r0, [pc, #120]	; (8000628 <main+0x198>)
 80005b0:	2140      	movs	r1, #64	; 0x40
 80005b2:	f000 fa61 	bl	8000a78 <USART_GetFlagStatus>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0f8      	beq.n	80005ae <main+0x11e>
    {
    }
    /* Wait the byte is entirely received by USARTy */
    while(USART_GetFlagStatus(USARTy, USART_FLAG_RXNE) == RESET)
 80005bc:	bf00      	nop
 80005be:	481a      	ldr	r0, [pc, #104]	; (8000628 <main+0x198>)
 80005c0:	2120      	movs	r1, #32
 80005c2:	f000 fa59 	bl	8000a78 <USART_GetFlagStatus>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d0f8      	beq.n	80005be <main+0x12e>
    {
    }
    /* Store the received byte in the RxBuffer1 */
    RxBuffer1[RxCounter1++] = USART_ReceiveData(USARTy);
 80005cc:	4b20      	ldr	r3, [pc, #128]	; (8000650 <main+0x1c0>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	1c5a      	adds	r2, r3, #1
 80005d4:	b2d1      	uxtb	r1, r2
 80005d6:	4a1e      	ldr	r2, [pc, #120]	; (8000650 <main+0x1c0>)
 80005d8:	7011      	strb	r1, [r2, #0]
 80005da:	461c      	mov	r4, r3
 80005dc:	4812      	ldr	r0, [pc, #72]	; (8000628 <main+0x198>)
 80005de:	f000 fa3b 	bl	8000a58 <USART_ReceiveData>
 80005e2:	4603      	mov	r3, r0
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <main+0x1c4>)
 80005e8:	551a      	strb	r2, [r3, r4]
  }

  /* Clear the USARTy Data Register */
  USART_ReceiveData(USARTy);

  while(NbrOfDataToRead1--)
 80005ea:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <main+0x1c8>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	1e5a      	subs	r2, r3, #1
 80005f2:	b2d1      	uxtb	r1, r2
 80005f4:	4a18      	ldr	r2, [pc, #96]	; (8000658 <main+0x1c8>)
 80005f6:	7011      	strb	r1, [r2, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d1be      	bne.n	800057a <main+0xea>
    /* Store the received byte in the RxBuffer1 */
    RxBuffer1[RxCounter1++] = USART_ReceiveData(USARTy);
  }
  
  /* Check the received data with the send ones */
  TransferStatus1 = Buffercmp(TxBuffer1, RxBuffer2, TxBufferSize1);
 80005fc:	480d      	ldr	r0, [pc, #52]	; (8000634 <main+0x1a4>)
 80005fe:	4910      	ldr	r1, [pc, #64]	; (8000640 <main+0x1b0>)
 8000600:	2242      	movs	r2, #66	; 0x42
 8000602:	f000 f88f 	bl	8000724 <Buffercmp>
 8000606:	4603      	mov	r3, r0
 8000608:	461a      	mov	r2, r3
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <main+0x1cc>)
 800060c:	701a      	strb	r2, [r3, #0]
  /* TransferStatus = PASSED, if the data transmitted from USARTy and  
     received by SPIy are the same */
  /* TransferStatus = FAILED, if the data transmitted from USARTy and 
     received by SPIy are different */
  TransferStatus2 = Buffercmp(TxBuffer2, RxBuffer1, TxBufferSize2);
 800060e:	480f      	ldr	r0, [pc, #60]	; (800064c <main+0x1bc>)
 8000610:	4910      	ldr	r1, [pc, #64]	; (8000654 <main+0x1c4>)
 8000612:	2242      	movs	r2, #66	; 0x42
 8000614:	f000 f886 	bl	8000724 <Buffercmp>
 8000618:	4603      	mov	r3, r0
 800061a:	461a      	mov	r2, r3
 800061c:	4b10      	ldr	r3, [pc, #64]	; (8000660 <main+0x1d0>)
 800061e:	701a      	strb	r2, [r3, #0]
  /* TransferStatus = FAILED, if the data transmitted from SPIy and 
     received by USARTy are different */

  while (1)
  {
  }
 8000620:	e7fe      	b.n	8000620 <main+0x190>
 8000622:	bf00      	nop
 8000624:	200000c8 	.word	0x200000c8
 8000628:	40013800 	.word	0x40013800
 800062c:	20000114 	.word	0x20000114
 8000630:	200000c0 	.word	0x200000c0
 8000634:	20000000 	.word	0x20000000
 8000638:	40013000 	.word	0x40013000
 800063c:	200000c3 	.word	0x200000c3
 8000640:	200000d0 	.word	0x200000d0
 8000644:	20000089 	.word	0x20000089
 8000648:	200000c2 	.word	0x200000c2
 800064c:	20000044 	.word	0x20000044
 8000650:	200000c1 	.word	0x200000c1
 8000654:	20000124 	.word	0x20000124
 8000658:	20000088 	.word	0x20000088
 800065c:	200000c4 	.word	0x200000c4
 8000660:	200000c5 	.word	0x200000c5

08000664 <RCC_Configuration>:
  * @brief  Configures the different system clocks.
  * @param  None
  * @retval None
  */
void RCC_Configuration(void)
{   
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* Enable GPIO clock */
  RCC_APB2PeriphClockCmd(USARTy_GPIO_CLK | SPIy_GPIO_CLK | RCC_APB2Periph_AFIO, ENABLE);
 8000668:	2005      	movs	r0, #5
 800066a:	2101      	movs	r1, #1
 800066c:	f000 fc00 	bl	8000e70 <RCC_APB2PeriphClockCmd>

  /* Enable USARTy Clock */
  RCC_APB2PeriphClockCmd(USARTy_CLK, ENABLE); 
 8000670:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000674:	2101      	movs	r1, #1
 8000676:	f000 fbfb 	bl	8000e70 <RCC_APB2PeriphClockCmd>
  /* Enable SPIy Clock */
  RCC_APB2PeriphClockCmd(SPIy_CLK, ENABLE);    
 800067a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800067e:	2101      	movs	r1, #1
 8000680:	f000 fbf6 	bl	8000e70 <RCC_APB2PeriphClockCmd>
}
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop

08000688 <GPIO_Configuration>:
  * @brief  Configures the different GPIO ports.
  * @param  None
  * @retval None
  */
void GPIO_Configuration(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Configure USARTy TX and USARTy CK pins as alternate function push-pull */
  GPIO_InitStructure.GPIO_Pin = USARTy_TxPin | USARTy_ClkPin;
 800068e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000692:	80bb      	strh	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000694:	2303      	movs	r3, #3
 8000696:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000698:	2318      	movs	r3, #24
 800069a:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(USARTy_GPIO, &GPIO_InitStructure);
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	480c      	ldr	r0, [pc, #48]	; (80006d0 <GPIO_Configuration+0x48>)
 80006a0:	4619      	mov	r1, r3
 80006a2:	f000 fc93 	bl	8000fcc <GPIO_Init>

  /* Configure SPI1 pins: SCK, MISO and MOSI */
  GPIO_InitStructure.GPIO_Pin = SPIy_SCKPin | SPIy_MISOPin | SPIy_MOSIPin;
 80006a6:	23e0      	movs	r3, #224	; 0xe0
 80006a8:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(SPIy_GPIO, &GPIO_InitStructure);
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4808      	ldr	r0, [pc, #32]	; (80006d0 <GPIO_Configuration+0x48>)
 80006ae:	4619      	mov	r1, r3
 80006b0:	f000 fc8c 	bl	8000fcc <GPIO_Init>

  /* Configure USARTy RX as input floating */
  GPIO_InitStructure.GPIO_Pin = USARTy_RxPin;
 80006b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006b8:	80bb      	strh	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80006ba:	2304      	movs	r3, #4
 80006bc:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(USARTy_GPIO, &GPIO_InitStructure);
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <GPIO_Configuration+0x48>)
 80006c2:	4619      	mov	r1, r3
 80006c4:	f000 fc82 	bl	8000fcc <GPIO_Init>
}
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40010800 	.word	0x40010800

080006d4 <SPI_Configuration>:
  * @brief  Configures the SPI.
  * @param  None
  * @retval None
  */
void SPI_Configuration(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0
  SPI_InitTypeDef SPI_InitStructure;

  SPI_StructInit(&SPI_InitStructure);
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fa65 	bl	8000bac <SPI_StructInit>

  SPI_I2S_DeInit(SPIy);
 80006e2:	480f      	ldr	r0, [pc, #60]	; (8000720 <SPI_Configuration+0x4c>)
 80006e4:	f000 f9e4 	bl	8000ab0 <SPI_I2S_DeInit>

  /* SPIy Config */
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80006e8:	2300      	movs	r3, #0
 80006ea:	80bb      	strh	r3, [r7, #4]
  SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
 80006ec:	2300      	movs	r3, #0
 80006ee:	80fb      	strh	r3, [r7, #6]
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 80006f0:	2300      	movs	r3, #0
 80006f2:	813b      	strh	r3, [r7, #8]
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
 80006f4:	2302      	movs	r3, #2
 80006f6:	817b      	strh	r3, [r7, #10]
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 80006f8:	2301      	movs	r3, #1
 80006fa:	81bb      	strh	r3, [r7, #12]
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 80006fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000700:	81fb      	strh	r3, [r7, #14]
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_LSB;
 8000702:	2380      	movs	r3, #128	; 0x80
 8000704:	827b      	strh	r3, [r7, #18]
  
  /* Configure SPIy */
  SPI_Init(SPIy, &SPI_InitStructure);
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	4805      	ldr	r0, [pc, #20]	; (8000720 <SPI_Configuration+0x4c>)
 800070a:	4619      	mov	r1, r3
 800070c:	f000 fa0a 	bl	8000b24 <SPI_Init>

  /* SPIy enable */
  SPI_Cmd(SPIy, ENABLE);
 8000710:	4803      	ldr	r0, [pc, #12]	; (8000720 <SPI_Configuration+0x4c>)
 8000712:	2101      	movs	r1, #1
 8000714:	f000 fa6e 	bl	8000bf4 <SPI_Cmd>
}
 8000718:	3718      	adds	r7, #24
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40013000 	.word	0x40013000

08000724 <Buffercmp>:
  * @param  BufferLength: buffer's length
  * @retval PASSED: pBuffer1 identical to pBuffer2
  *         FAILED: pBuffer1 differs from pBuffer2
  */
TestStatus Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	4613      	mov	r3, r2
 8000730:	80fb      	strh	r3, [r7, #6]
  while(BufferLength--)
 8000732:	e00d      	b.n	8000750 <Buffercmp+0x2c>
  {
    if(*pBuffer1 != *pBuffer2)
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	781a      	ldrb	r2, [r3, #0]
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	429a      	cmp	r2, r3
 800073e:	d001      	beq.n	8000744 <Buffercmp+0x20>
    {
      return FAILED;
 8000740:	2300      	movs	r3, #0
 8000742:	e00b      	b.n	800075c <Buffercmp+0x38>
    }

    pBuffer1++;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	3301      	adds	r3, #1
 8000748:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	3301      	adds	r3, #1
 800074e:	60bb      	str	r3, [r7, #8]
  * @retval PASSED: pBuffer1 identical to pBuffer2
  *         FAILED: pBuffer1 differs from pBuffer2
  */
TestStatus Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
  while(BufferLength--)
 8000750:	88fb      	ldrh	r3, [r7, #6]
 8000752:	1e5a      	subs	r2, r3, #1
 8000754:	80fa      	strh	r2, [r7, #6]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d1ec      	bne.n	8000734 <Buffercmp+0x10>

    pBuffer1++;
    pBuffer2++;
  }

  return PASSED;
 800075a:	2301      	movs	r3, #1
}
 800075c:	4618      	mov	r0, r3
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <sEE_TIMEOUT_UserCallback>:
/*
 * Callback used by stm3210c_eval_i2c_ee.c.
 * Refer to stm3210c_eval_i2c_ee.h for more info.
 */
__attribute__((weak)) uint32_t sEE_TIMEOUT_UserCallback(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* Block communication and all processes */
  while (1)
  {
  }
 800076c:	e7fe      	b.n	800076c <sEE_TIMEOUT_UserCallback+0x4>
 800076e:	bf00      	nop

08000770 <DMA1_Channel6_IRQHandler>:
  * @brief  This function handles the DMA Tx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_TX_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */ 
  if(DMA_GetFlagStatus(sEE_I2C_DMA_FLAG_TX_TC) != RESET)
 8000774:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000778:	f000 fd00 	bl	800117c <DMA_GetFlagStatus>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d028      	beq.n	80007d4 <DMA1_Channel6_IRQHandler+0x64>
  {  
    /* Disable the DMA Tx Channel and Clear all its Flags */  
    DMA_Cmd(sEE_I2C_DMA_CHANNEL_TX, DISABLE);
 8000782:	4815      	ldr	r0, [pc, #84]	; (80007d8 <DMA1_Channel6_IRQHandler+0x68>)
 8000784:	2100      	movs	r1, #0
 8000786:	f000 fcdd 	bl	8001144 <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_FLAG_TX_GL);
 800078a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800078e:	f000 fd1f 	bl	80011d0 <DMA_ClearFlag>

    /*!< Wait till all data have been physically transferred on the bus */
    sEETimeout = sEE_LONG_TIMEOUT;
 8000792:	4b12      	ldr	r3, [pc, #72]	; (80007dc <DMA1_Channel6_IRQHandler+0x6c>)
 8000794:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8000798:	601a      	str	r2, [r3, #0]
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 800079a:	e008      	b.n	80007ae <DMA1_Channel6_IRQHandler+0x3e>
    {
      if((sEETimeout--) == 0) sEE_TIMEOUT_UserCallback();
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <DMA1_Channel6_IRQHandler+0x6c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	1e59      	subs	r1, r3, #1
 80007a2:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <DMA1_Channel6_IRQHandler+0x6c>)
 80007a4:	6011      	str	r1, [r2, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d101      	bne.n	80007ae <DMA1_Channel6_IRQHandler+0x3e>
 80007aa:	f7ff ffdd 	bl	8000768 <sEE_TIMEOUT_UserCallback>
    DMA_Cmd(sEE_I2C_DMA_CHANNEL_TX, DISABLE);
    DMA_ClearFlag(sEE_I2C_DMA_FLAG_TX_GL);

    /*!< Wait till all data have been physically transferred on the bus */
    sEETimeout = sEE_LONG_TIMEOUT;
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 80007ae:	480c      	ldr	r0, [pc, #48]	; (80007e0 <DMA1_Channel6_IRQHandler+0x70>)
 80007b0:	490c      	ldr	r1, [pc, #48]	; (80007e4 <DMA1_Channel6_IRQHandler+0x74>)
 80007b2:	f000 fbd7 	bl	8000f64 <I2C_GetFlagStatus>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d0ef      	beq.n	800079c <DMA1_Channel6_IRQHandler+0x2c>
    {
      if((sEETimeout--) == 0) sEE_TIMEOUT_UserCallback();
    }
    
    /*!< Send STOP condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);
 80007bc:	4808      	ldr	r0, [pc, #32]	; (80007e0 <DMA1_Channel6_IRQHandler+0x70>)
 80007be:	2101      	movs	r1, #1
 80007c0:	f000 fbb0 	bl	8000f24 <I2C_GenerateSTOP>
    
    /* Perform a read on SR1 and SR2 register to clear eventualaly pending flags */
    (void)sEE_I2C->SR1;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <DMA1_Channel6_IRQHandler+0x70>)
 80007c6:	8a9b      	ldrh	r3, [r3, #20]
    (void)sEE_I2C->SR2;
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <DMA1_Channel6_IRQHandler+0x70>)
 80007ca:	8b1b      	ldrh	r3, [r3, #24]
    
    /* Reset the variable holding the number of data to be written */
    *sEEDataWritePointer = 0;  
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <DMA1_Channel6_IRQHandler+0x78>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
  }
}
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	4002006c 	.word	0x4002006c
 80007dc:	2000008c 	.word	0x2000008c
 80007e0:	40005400 	.word	0x40005400
 80007e4:	10000004 	.word	0x10000004
 80007e8:	20000168 	.word	0x20000168

080007ec <DMA1_Channel7_IRQHandler>:
  * @brief  This function handles the DMA Rx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_RX_IRQHandler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_FLAG_RX_TC) != RESET)
 80007f0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80007f4:	f000 fcc2 	bl	800117c <DMA_GetFlagStatus>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d00f      	beq.n	800081e <DMA1_Channel7_IRQHandler+0x32>
  {      
    /*!< Send STOP Condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);    
 80007fe:	4808      	ldr	r0, [pc, #32]	; (8000820 <DMA1_Channel7_IRQHandler+0x34>)
 8000800:	2101      	movs	r1, #1
 8000802:	f000 fb8f 	bl	8000f24 <I2C_GenerateSTOP>
    
    /* Disable the DMA Rx Channel and Clear all its Flags */  
    DMA_Cmd(sEE_I2C_DMA_CHANNEL_RX, DISABLE);
 8000806:	4807      	ldr	r0, [pc, #28]	; (8000824 <DMA1_Channel7_IRQHandler+0x38>)
 8000808:	2100      	movs	r1, #0
 800080a:	f000 fc9b 	bl	8001144 <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_FLAG_RX_GL);
 800080e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000812:	f000 fcdd 	bl	80011d0 <DMA_ClearFlag>
    
    /* Reset the variable holding the number of data to be read */
    *sEEDataReadPointer = 0;
 8000816:	4b04      	ldr	r3, [pc, #16]	; (8000828 <DMA1_Channel7_IRQHandler+0x3c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2200      	movs	r2, #0
 800081c:	801a      	strh	r2, [r3, #0]
  }
}
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40005400 	.word	0x40005400
 8000824:	40020080 	.word	0x40020080
 8000828:	20000170 	.word	0x20000170

0800082c <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000836:	2300      	movs	r3, #0
 8000838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8000842:	2300      	movs	r3, #0
 8000844:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	8a1b      	ldrh	r3, [r3, #16]
 8000852:	b29b      	uxth	r3, r3
 8000854:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8000856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000858:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800085c:	4013      	ands	r3, r2
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	88db      	ldrh	r3, [r3, #6]
 8000864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000866:	4313      	orrs	r3, r2
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800086a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800086c:	b29a      	uxth	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	899b      	ldrh	r3, [r3, #12]
 8000876:	b29b      	uxth	r3, r3
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 800087a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800087c:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8000880:	4013      	ands	r3, r2
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	889a      	ldrh	r2, [r3, #4]
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	891b      	ldrh	r3, [r3, #8]
 800088c:	4313      	orrs	r3, r2
 800088e:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000894:	4313      	orrs	r3, r2
 8000896:	b29b      	uxth	r3, r3
 8000898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800089a:	4313      	orrs	r3, r2
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800089e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	8a9b      	ldrh	r3, [r3, #20]
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 80008ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008b0:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 80008b4:	4013      	ands	r3, r2
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	899b      	ldrh	r3, [r3, #12]
 80008bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008be:	4313      	orrs	r3, r2
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80008c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f9e8 	bl	8000ca4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 80008d4:	69fa      	ldr	r2, [r7, #28]
 80008d6:	4b30      	ldr	r3, [pc, #192]	; (8000998 <USART_Init+0x16c>)
 80008d8:	429a      	cmp	r2, r3
 80008da:	d102      	bne.n	80008e2 <USART_Init+0xb6>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
 80008e0:	e001      	b.n	80008e6 <USART_Init+0xba>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	899b      	ldrh	r3, [r3, #12]
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	b21b      	sxth	r3, r3
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	da0c      	bge.n	800090e <USART_Init+0xe2>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80008f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008f6:	4613      	mov	r3, r2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	4413      	add	r3, r2
 80008fc:	009a      	lsls	r2, r3, #2
 80008fe:	441a      	add	r2, r3
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	fbb2 f3f3 	udiv	r3, r2, r3
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
 800090c:	e00b      	b.n	8000926 <USART_Init+0xfa>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800090e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000910:	4613      	mov	r3, r2
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	4413      	add	r3, r2
 8000916:	009a      	lsls	r2, r3, #2
 8000918:	441a      	add	r2, r3
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	fbb2 f3f3 	udiv	r3, r2, r3
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8000926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000928:	4b1c      	ldr	r3, [pc, #112]	; (800099c <USART_Init+0x170>)
 800092a:	fba3 1302 	umull	r1, r3, r3, r2
 800092e:	095b      	lsrs	r3, r3, #5
 8000930:	011b      	lsls	r3, r3, #4
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000936:	091b      	lsrs	r3, r3, #4
 8000938:	2264      	movs	r2, #100	; 0x64
 800093a:	fb02 f303 	mul.w	r3, r2, r3
 800093e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	899b      	ldrh	r3, [r3, #12]
 8000948:	b29b      	uxth	r3, r3
 800094a:	b29b      	uxth	r3, r3
 800094c:	b21b      	sxth	r3, r3
 800094e:	2b00      	cmp	r3, #0
 8000950:	da0d      	bge.n	800096e <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000952:	6a3b      	ldr	r3, [r7, #32]
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <USART_Init+0x170>)
 800095c:	fba3 1302 	umull	r1, r3, r3, r2
 8000960:	095b      	lsrs	r3, r3, #5
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000968:	4313      	orrs	r3, r2
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800096c:	e00c      	b.n	8000988 <USART_Init+0x15c>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800096e:	6a3b      	ldr	r3, [r7, #32]
 8000970:	011b      	lsls	r3, r3, #4
 8000972:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <USART_Init+0x170>)
 8000978:	fba3 1302 	umull	r1, r3, r3, r2
 800097c:	095b      	lsrs	r3, r3, #5
 800097e:	f003 030f 	and.w	r3, r3, #15
 8000982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000984:	4313      	orrs	r3, r2
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800098a:	b29a      	uxth	r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	811a      	strh	r2, [r3, #8]
}
 8000990:	3730      	adds	r7, #48	; 0x30
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40013800 	.word	0x40013800
 800099c:	51eb851f 	.word	0x51eb851f

080009a0 <USART_ClockInit>:
  *         USART peripheral.  
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	8a1b      	ldrh	r3, [r3, #16]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
 80009bc:	4013      	ands	r3, r2
 80009be:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	881a      	ldrh	r2, [r3, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80009c8:	4313      	orrs	r3, r2
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	889b      	ldrh	r3, [r3, #4]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	88db      	ldrh	r3, [r3, #6]
 80009d8:	4313      	orrs	r3, r2
 80009da:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80009dc:	68fa      	ldr	r2, [r7, #12]
 80009de:	4313      	orrs	r3, r2
 80009e0:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	821a      	strh	r2, [r3, #16]
}
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	460b      	mov	r3, r1
 80009fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a00:	78fb      	ldrb	r3, [r7, #3]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d008      	beq.n	8000a18 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	899b      	ldrh	r3, [r3, #12]
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	819a      	strh	r2, [r3, #12]
 8000a16:	e007      	b.n	8000a28 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	899b      	ldrh	r3, [r3, #12]
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	819a      	strh	r2, [r3, #12]
  }
}
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop

08000a34 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000a40:	887b      	ldrh	r3, [r7, #2]
 8000a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	809a      	strh	r2, [r3, #4]
}
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	889b      	ldrh	r3, [r3, #4]
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a6a:	b29b      	uxth	r3, r3
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	460b      	mov	r3, r1
 8000a82:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000a84:	2300      	movs	r3, #0
 8000a86:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	887b      	ldrh	r3, [r7, #2]
 8000a90:	4013      	ands	r3, r2
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d002      	beq.n	8000a9e <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	73fb      	strb	r3, [r7, #15]
 8000a9c:	e001      	b.n	8000aa2 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <SPI_I2S_DeInit>:
  *         reset values (Affects also the I2Ss).
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <SPI_I2S_DeInit+0x68>)
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d10a      	bne.n	8000ad6 <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8000ac0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	f000 f9f1 	bl	8000eac <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8000aca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ace:	2100      	movs	r1, #0
 8000ad0:	f000 f9ec 	bl	8000eac <RCC_APB2PeriphResetCmd>
 8000ad4:	e01c      	b.n	8000b10 <SPI_I2S_DeInit+0x60>
  }
  else if (SPIx == SPI2)
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <SPI_I2S_DeInit+0x6c>)
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d10a      	bne.n	8000af4 <SPI_I2S_DeInit+0x44>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8000ade:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	f000 fa00 	bl	8000ee8 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8000ae8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000aec:	2100      	movs	r1, #0
 8000aee:	f000 f9fb 	bl	8000ee8 <RCC_APB1PeriphResetCmd>
 8000af2:	e00d      	b.n	8000b10 <SPI_I2S_DeInit+0x60>
  }
  else
  {
    if (SPIx == SPI3)
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <SPI_I2S_DeInit+0x70>)
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d109      	bne.n	8000b10 <SPI_I2S_DeInit+0x60>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8000afc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000b00:	2101      	movs	r1, #1
 8000b02:	f000 f9f1 	bl	8000ee8 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8000b06:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	f000 f9ec 	bl	8000ee8 <RCC_APB1PeriphResetCmd>
    }
  }
}
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40013000 	.word	0x40013000
 8000b1c:	40003800 	.word	0x40003800
 8000b20:	40003c00 	.word	0x40003c00

08000b24 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000b38:	89fb      	ldrh	r3, [r7, #14]
 8000b3a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000b3e:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	881a      	ldrh	r2, [r3, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	885b      	ldrh	r3, [r3, #2]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000b50:	4313      	orrs	r3, r2
 8000b52:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000b60:	4313      	orrs	r3, r2
 8000b62:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000b70:	4313      	orrs	r3, r2
 8000b72:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	89fb      	ldrh	r3, [r7, #14]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	89fa      	ldrh	r2, [r7, #14]
 8000b86:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	8b9b      	ldrh	r3, [r3, #28]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	8a1a      	ldrh	r2, [r3, #16]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	821a      	strh	r2, [r3, #16]
}
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct : pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2200      	movs	r2, #0
 8000be2:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2207      	movs	r2, #7
 8000be8:	821a      	strh	r2, [r3, #16]
}
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c00:	78fb      	ldrb	r3, [r7, #3]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d008      	beq.n	8000c18 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	801a      	strh	r2, [r3, #0]
 8000c16:	e007      	b.n	8000c28 <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	801a      	strh	r2, [r3, #0]
  }
}
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	887a      	ldrh	r2, [r7, #2]
 8000c44:	819a      	strh	r2, [r3, #12]
}
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	899b      	ldrh	r3, [r3, #12]
 8000c5c:	b29b      	uxth	r3, r3
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	891b      	ldrh	r3, [r3, #8]
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	887b      	ldrh	r3, [r7, #2]
 8000c84:	4013      	ands	r3, r2
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d002      	beq.n	8000c92 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	73fb      	strb	r3, [r7, #15]
 8000c90:	e001      	b.n	8000c96 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000c92:	2300      	movs	r3, #0
 8000c94:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b08b      	sub	sp, #44	; 0x2c
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61bb      	str	r3, [r7, #24]

#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000ccc:	4b62      	ldr	r3, [pc, #392]	; (8000e58 <RCC_GetClocksFreq+0x1b4>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 030c 	and.w	r3, r3, #12
 8000cd4:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000cd6:	6a3b      	ldr	r3, [r7, #32]
 8000cd8:	2b04      	cmp	r3, #4
 8000cda:	d007      	beq.n	8000cec <RCC_GetClocksFreq+0x48>
 8000cdc:	2b08      	cmp	r3, #8
 8000cde:	d009      	beq.n	8000cf4 <RCC_GetClocksFreq+0x50>
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d15e      	bne.n	8000da2 <RCC_GetClocksFreq+0xfe>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a5d      	ldr	r2, [pc, #372]	; (8000e5c <RCC_GetClocksFreq+0x1b8>)
 8000ce8:	601a      	str	r2, [r3, #0]
      break;
 8000cea:	e05e      	b.n	8000daa <RCC_GetClocksFreq+0x106>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a5c      	ldr	r2, [pc, #368]	; (8000e60 <RCC_GetClocksFreq+0x1bc>)
 8000cf0:	601a      	str	r2, [r3, #0]
      break;
 8000cf2:	e05a      	b.n	8000daa <RCC_GetClocksFreq+0x106>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000cf4:	4b58      	ldr	r3, [pc, #352]	; (8000e58 <RCC_GetClocksFreq+0x1b4>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000cfe:	4b56      	ldr	r3, [pc, #344]	; (8000e58 <RCC_GetClocksFreq+0x1b4>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d06:	61fb      	str	r3, [r7, #28]
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
        }
 #endif
      }
#else
      pllmull = pllmull >> 18;
 8000d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0a:	0c9b      	lsrs	r3, r3, #18
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
      
      if (pllmull != 0x0D)
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d10:	2b0d      	cmp	r3, #13
 8000d12:	d003      	beq.n	8000d1c <RCC_GetClocksFreq+0x78>
      {
         pllmull += 2;
 8000d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d16:	3302      	adds	r3, #2
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
 8000d1a:	e001      	b.n	8000d20 <RCC_GetClocksFreq+0x7c>
      }
      else
      { /* PLL multiplication factor = PLL input clock * 6.5 */
        pllmull = 13 / 2; 
 8000d1c:	2306      	movs	r3, #6
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
            
      if (pllsource == 0x00)
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d106      	bne.n	8000d34 <RCC_GetClocksFreq+0x90>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d28:	4a4e      	ldr	r2, [pc, #312]	; (8000e64 <RCC_GetClocksFreq+0x1c0>)
 8000d2a:	fb02 f203 	mul.w	r2, r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	e035      	b.n	8000da0 <RCC_GetClocksFreq+0xfc>
      }
      else
      {/* PREDIV1 selected as PLL clock entry */
        
        /* Get PREDIV1 clock source and division factor */
        prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
 8000d34:	4b48      	ldr	r3, [pc, #288]	; (8000e58 <RCC_GetClocksFreq+0x1b4>)
 8000d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d3c:	617b      	str	r3, [r7, #20]
        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 8000d3e:	4b46      	ldr	r3, [pc, #280]	; (8000e58 <RCC_GetClocksFreq+0x1b4>)
 8000d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3301      	adds	r3, #1
 8000d48:	613b      	str	r3, [r7, #16]
        
        if (prediv1source == 0)
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d109      	bne.n	8000d64 <RCC_GetClocksFreq+0xc0>
        { /* HSE oscillator clock selected as PREDIV1 clock entry */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;          
 8000d50:	4a43      	ldr	r2, [pc, #268]	; (8000e60 <RCC_GetClocksFreq+0x1bc>)
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d5a:	fb02 f203 	mul.w	r2, r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	e01d      	b.n	8000da0 <RCC_GetClocksFreq+0xfc>
        }
        else
        {/* PLL2 clock selected as PREDIV1 clock entry */
          
          /* Get PREDIV2 division factor and PLL2 multiplication factor */
          prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
 8000d64:	4b3c      	ldr	r3, [pc, #240]	; (8000e58 <RCC_GetClocksFreq+0x1b4>)
 8000d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d6c:	091b      	lsrs	r3, r3, #4
 8000d6e:	3301      	adds	r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
 8000d72:	4b39      	ldr	r3, [pc, #228]	; (8000e58 <RCC_GetClocksFreq+0x1b4>)
 8000d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d76:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000d7a:	0a1b      	lsrs	r3, r3, #8
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	60bb      	str	r3, [r7, #8]
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
 8000d80:	4a37      	ldr	r2, [pc, #220]	; (8000e60 <RCC_GetClocksFreq+0x1bc>)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d88:	68ba      	ldr	r2, [r7, #8]
 8000d8a:	fb02 f203 	mul.w	r2, r2, r3
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d96:	fb02 f203 	mul.w	r2, r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	601a      	str	r2, [r3, #0]
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000d9e:	e004      	b.n	8000daa <RCC_GetClocksFreq+0x106>
 8000da0:	e003      	b.n	8000daa <RCC_GetClocksFreq+0x106>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a2d      	ldr	r2, [pc, #180]	; (8000e5c <RCC_GetClocksFreq+0x1b8>)
 8000da6:	601a      	str	r2, [r3, #0]
      break;
 8000da8:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000daa:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <RCC_GetClocksFreq+0x1b4>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000db2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000db4:	6a3b      	ldr	r3, [r7, #32]
 8000db6:	091b      	lsrs	r3, r3, #4
 8000db8:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000dba:	4a2b      	ldr	r2, [pc, #172]	; (8000e68 <RCC_GetClocksFreq+0x1c4>)
 8000dbc:	6a3b      	ldr	r3, [r7, #32]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	61bb      	str	r3, [r7, #24]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	40da      	lsrs	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <RCC_GetClocksFreq+0x1b4>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000dda:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000ddc:	6a3b      	ldr	r3, [r7, #32]
 8000dde:	0a1b      	lsrs	r3, r3, #8
 8000de0:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000de2:	4a21      	ldr	r2, [pc, #132]	; (8000e68 <RCC_GetClocksFreq+0x1c4>)
 8000de4:	6a3b      	ldr	r3, [r7, #32]
 8000de6:	4413      	add	r3, r2
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	61bb      	str	r3, [r7, #24]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	40da      	lsrs	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <RCC_GetClocksFreq+0x1b4>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000e02:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000e04:	6a3b      	ldr	r3, [r7, #32]
 8000e06:	0adb      	lsrs	r3, r3, #11
 8000e08:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000e0a:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <RCC_GetClocksFreq+0x1c4>)
 8000e0c:	6a3b      	ldr	r3, [r7, #32]
 8000e0e:	4413      	add	r3, r2
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	61bb      	str	r3, [r7, #24]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	40da      	lsrs	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000e22:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <RCC_GetClocksFreq+0x1b4>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e2a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 14;
 8000e2c:	6a3b      	ldr	r3, [r7, #32]
 8000e2e:	0b9b      	lsrs	r3, r3, #14
 8000e30:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000e32:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <RCC_GetClocksFreq+0x1c8>)
 8000e34:	6a3b      	ldr	r3, [r7, #32]
 8000e36:	4413      	add	r3, r2
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	61bb      	str	r3, [r7, #24]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	68da      	ldr	r2, [r3, #12]
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	611a      	str	r2, [r3, #16]
}
 8000e4c:	372c      	adds	r7, #44	; 0x2c
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	007a1200 	.word	0x007a1200
 8000e60:	017d7840 	.word	0x017d7840
 8000e64:	003d0900 	.word	0x003d0900
 8000e68:	20000090 	.word	0x20000090
 8000e6c:	200000a0 	.word	0x200000a0

08000e70 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e7c:	78fb      	ldrb	r3, [r7, #3]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d006      	beq.n	8000e90 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <RCC_APB2PeriphClockCmd+0x38>)
 8000e84:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <RCC_APB2PeriphClockCmd+0x38>)
 8000e86:	6991      	ldr	r1, [r2, #24]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	619a      	str	r2, [r3, #24]
 8000e8e:	e006      	b.n	8000e9e <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <RCC_APB2PeriphClockCmd+0x38>)
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <RCC_APB2PeriphClockCmd+0x38>)
 8000e94:	6991      	ldr	r1, [r2, #24]
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	43d2      	mvns	r2, r2
 8000e9a:	400a      	ands	r2, r1
 8000e9c:	619a      	str	r2, [r3, #24]
  }
}
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	40021000 	.word	0x40021000

08000eac <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000eb8:	78fb      	ldrb	r3, [r7, #3]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d006      	beq.n	8000ecc <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <RCC_APB2PeriphResetCmd+0x38>)
 8000ec0:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <RCC_APB2PeriphResetCmd+0x38>)
 8000ec2:	68d1      	ldr	r1, [r2, #12]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	e006      	b.n	8000eda <RCC_APB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <RCC_APB2PeriphResetCmd+0x38>)
 8000ece:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <RCC_APB2PeriphResetCmd+0x38>)
 8000ed0:	68d1      	ldr	r1, [r2, #12]
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	43d2      	mvns	r2, r2
 8000ed6:	400a      	ands	r2, r1
 8000ed8:	60da      	str	r2, [r3, #12]
  }
}
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ef4:	78fb      	ldrb	r3, [r7, #3]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d006      	beq.n	8000f08 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <RCC_APB1PeriphResetCmd+0x38>)
 8000efc:	4a08      	ldr	r2, [pc, #32]	; (8000f20 <RCC_APB1PeriphResetCmd+0x38>)
 8000efe:	6911      	ldr	r1, [r2, #16]
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	430a      	orrs	r2, r1
 8000f04:	611a      	str	r2, [r3, #16]
 8000f06:	e006      	b.n	8000f16 <RCC_APB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <RCC_APB1PeriphResetCmd+0x38>)
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <RCC_APB1PeriphResetCmd+0x38>)
 8000f0c:	6911      	ldr	r1, [r2, #16]
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	43d2      	mvns	r2, r2
 8000f12:	400a      	ands	r2, r1
 8000f14:	611a      	str	r2, [r3, #16]
  }
}
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	40021000 	.word	0x40021000

08000f24 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d008      	beq.n	8000f48 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	801a      	strh	r2, [r3, #0]
 8000f46:	e007      	b.n	8000f58 <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	801a      	strh	r2, [r3, #0]
  }
}
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDA"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b087      	sub	sp, #28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	0f1b      	lsrs	r3, r3, #28
 8000f82:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000f8a:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	3314      	adds	r3, #20
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	e005      	b.n	8000fa6 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	0c1b      	lsrs	r3, r3, #16
 8000f9e:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	3318      	adds	r3, #24
 8000fa4:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	4013      	ands	r3, r2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d002      	beq.n	8000fb8 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	75fb      	strb	r3, [r7, #23]
 8000fb6:	e001      	b.n	8000fbc <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8000fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	371c      	adds	r7, #28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	78db      	ldrb	r3, [r3, #3]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	78db      	ldrb	r3, [r3, #3]
 8000ffc:	f003 0310 	and.w	r3, r3, #16
 8001000:	2b00      	cmp	r3, #0
 8001002:	d004      	beq.n	800100e <GPIO_Init+0x42>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	789b      	ldrb	r3, [r3, #2]
 8001008:	69fa      	ldr	r2, [r7, #28]
 800100a:	4313      	orrs	r3, r2
 800100c:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	d044      	beq.n	80010a2 <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
 8001022:	e038      	b.n	8001096 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	2201      	movs	r2, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	429a      	cmp	r2, r3
 8001040:	d126      	bne.n	8001090 <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	220f      	movs	r2, #15
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	43db      	mvns	r3, r3
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	4013      	ands	r3, r2
 800105a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	69fa      	ldr	r2, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	4313      	orrs	r3, r2
 8001068:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	78db      	ldrb	r3, [r3, #3]
 800106e:	2b28      	cmp	r3, #40	; 0x28
 8001070:	d105      	bne.n	800107e <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	2201      	movs	r2, #1
 8001076:	409a      	lsls	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	615a      	str	r2, [r3, #20]
 800107c:	e008      	b.n	8001090 <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	78db      	ldrb	r3, [r3, #3]
 8001082:	2b48      	cmp	r3, #72	; 0x48
 8001084:	d104      	bne.n	8001090 <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	2201      	movs	r2, #1
 800108a:	409a      	lsls	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	3301      	adds	r3, #1
 8001094:	61bb      	str	r3, [r7, #24]
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	2b07      	cmp	r3, #7
 800109a:	d9c3      	bls.n	8001024 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	2bff      	cmp	r3, #255	; 0xff
 80010a8:	d946      	bls.n	8001138 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80010b0:	2300      	movs	r3, #0
 80010b2:	61bb      	str	r3, [r7, #24]
 80010b4:	e03a      	b.n	800112c <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	3308      	adds	r3, #8
 80010ba:	2201      	movs	r2, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d127      	bne.n	8001126 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	220f      	movs	r2, #15
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	4013      	ands	r3, r2
 80010ee:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	69fa      	ldr	r2, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	78db      	ldrb	r3, [r3, #3]
 8001102:	2b28      	cmp	r3, #40	; 0x28
 8001104:	d105      	bne.n	8001112 <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	3308      	adds	r3, #8
 800110a:	2201      	movs	r2, #1
 800110c:	409a      	lsls	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	78db      	ldrb	r3, [r3, #3]
 8001116:	2b48      	cmp	r3, #72	; 0x48
 8001118:	d105      	bne.n	8001126 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	3308      	adds	r3, #8
 800111e:	2201      	movs	r2, #1
 8001120:	409a      	lsls	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	3301      	adds	r3, #1
 800112a:	61bb      	str	r3, [r7, #24]
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	2b07      	cmp	r3, #7
 8001130:	d9c1      	bls.n	80010b6 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	605a      	str	r2, [r3, #4]
  }
}
 8001138:	3724      	adds	r7, #36	; 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop

08001144 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001150:	78fb      	ldrb	r3, [r7, #3]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d006      	beq.n	8001164 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f043 0201 	orr.w	r2, r3, #1
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	e006      	b.n	8001172 <DMA_Cmd+0x2e>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800116c:	4013      	ands	r3, r2
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
  }
}
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001184:	2300      	movs	r3, #0
 8001186:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <DMA_GetFlagStatus+0x4c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	e002      	b.n	80011a4 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <DMA_GetFlagStatus+0x50>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 80011a4:	68ba      	ldr	r2, [r7, #8]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4013      	ands	r3, r2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d002      	beq.n	80011b4 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 80011ae:	2301      	movs	r3, #1
 80011b0:	73fb      	strb	r3, [r7, #15]
 80011b2:	e001      	b.n	80011b8 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 80011b4:	2300      	movs	r3, #0
 80011b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40020400 	.word	0x40020400
 80011cc:	40020000 	.word	0x40020000

080011d0 <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <DMA_ClearFlag+0x2c>)
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	e002      	b.n	80011f0 <DMA_ClearFlag+0x20>
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <DMA_ClearFlag+0x30>)
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	605a      	str	r2, [r3, #4]
  }
}
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40020400 	.word	0x40020400
 8001200:	40020000 	.word	0x40020000

08001204 <__libc_init_array>:
 8001204:	b570      	push	{r4, r5, r6, lr}
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <__libc_init_array+0x3c>)
 8001208:	4d0e      	ldr	r5, [pc, #56]	; (8001244 <__libc_init_array+0x40>)
 800120a:	2400      	movs	r4, #0
 800120c:	1aed      	subs	r5, r5, r3
 800120e:	10ad      	asrs	r5, r5, #2
 8001210:	461e      	mov	r6, r3
 8001212:	42ac      	cmp	r4, r5
 8001214:	d004      	beq.n	8001220 <__libc_init_array+0x1c>
 8001216:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800121a:	4790      	blx	r2
 800121c:	3401      	adds	r4, #1
 800121e:	e7f8      	b.n	8001212 <__libc_init_array+0xe>
 8001220:	f000 f816 	bl	8001250 <_init>
 8001224:	4d08      	ldr	r5, [pc, #32]	; (8001248 <__libc_init_array+0x44>)
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <__libc_init_array+0x48>)
 8001228:	2400      	movs	r4, #0
 800122a:	1aed      	subs	r5, r5, r3
 800122c:	10ad      	asrs	r5, r5, #2
 800122e:	461e      	mov	r6, r3
 8001230:	42ac      	cmp	r4, r5
 8001232:	d004      	beq.n	800123e <__libc_init_array+0x3a>
 8001234:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8001238:	4790      	blx	r2
 800123a:	3401      	adds	r4, #1
 800123c:	e7f8      	b.n	8001230 <__libc_init_array+0x2c>
 800123e:	bd70      	pop	{r4, r5, r6, pc}
 8001240:	08001268 	.word	0x08001268
 8001244:	08001268 	.word	0x08001268
 8001248:	0800126c 	.word	0x0800126c
 800124c:	08001268 	.word	0x08001268

08001250 <_init>:
 8001250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001252:	bf00      	nop
 8001254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001256:	bc08      	pop	{r3}
 8001258:	469e      	mov	lr, r3
 800125a:	4770      	bx	lr

0800125c <_fini>:
 800125c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800125e:	bf00      	nop
 8001260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001262:	bc08      	pop	{r3}
 8001264:	469e      	mov	lr, r3
 8001266:	4770      	bx	lr
