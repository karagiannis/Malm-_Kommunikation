
STM32100E-EVAL_USART_Printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fac  080001e4  080001e4  000081e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08001190  08001190  00009190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08001194  08001194  00009194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000030  20000000  08001198  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000038  20000030  080011c8  00010030  2**2
                  ALLOC
  6 ._user_heap_stack 00000100  20000068  080011c8  00010068  2**0
                  ALLOC
  7 .ARM.attributes 00000029  00000000  00000000  00010030  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000578e  00000000  00000000  00010059  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000121d  00000000  00000000  000157e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000758  00000000  00000000  00016a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000680  00000000  00000000  00017160  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002a6c  00000000  00000000  000177e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002696  00000000  00000000  0001a24c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000082  00000000  00000000  0001c8e2  2**0
                  CONTENTS, READONLY
 15 .debug_frame  0000164c  00000000  00000000  0001c964  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000030 	.word	0x20000030
 8000200:	00000000 	.word	0x00000000
 8000204:	08001178 	.word	0x08001178

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	08001178 	.word	0x08001178
 8000220:	20000034 	.word	0x20000034

08000224 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8000224:	b480      	push	{r7}
 8000226:	b087      	sub	sp, #28
 8000228:	af00      	add	r7, sp, #0
 800022a:	60f8      	str	r0, [r7, #12]
 800022c:	60b9      	str	r1, [r7, #8]
 800022e:	607a      	str	r2, [r7, #4]
	int div = 1;
 8000230:	2301      	movs	r3, #1
 8000232:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8000234:	e004      	b.n	8000240 <ts_itoa+0x1c>
		div *= base;
 8000236:	697b      	ldr	r3, [r7, #20]
 8000238:	687a      	ldr	r2, [r7, #4]
 800023a:	fb02 f303 	mul.w	r3, r2, r3
 800023e:	617b      	str	r3, [r7, #20]
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 8000240:	697b      	ldr	r3, [r7, #20]
 8000242:	68ba      	ldr	r2, [r7, #8]
 8000244:	fbb2 f2f3 	udiv	r2, r2, r3
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	429a      	cmp	r2, r3
 800024c:	d2f3      	bcs.n	8000236 <ts_itoa+0x12>
		div *= base;

	while (div != 0)
 800024e:	e029      	b.n	80002a4 <ts_itoa+0x80>
	{
		int num = d/div;
 8000250:	697b      	ldr	r3, [r7, #20]
 8000252:	68ba      	ldr	r2, [r7, #8]
 8000254:	fbb2 f3f3 	udiv	r3, r2, r3
 8000258:	613b      	str	r3, [r7, #16]
		d = d%div;
 800025a:	697a      	ldr	r2, [r7, #20]
 800025c:	68bb      	ldr	r3, [r7, #8]
 800025e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000262:	fb02 f201 	mul.w	r2, r2, r1
 8000266:	1a9b      	subs	r3, r3, r2
 8000268:	60bb      	str	r3, [r7, #8]
		div /= base;
 800026a:	697a      	ldr	r2, [r7, #20]
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000272:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8000274:	693b      	ldr	r3, [r7, #16]
 8000276:	2b09      	cmp	r3, #9
 8000278:	dd0a      	ble.n	8000290 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	1c59      	adds	r1, r3, #1
 8000280:	68fa      	ldr	r2, [r7, #12]
 8000282:	6011      	str	r1, [r2, #0]
 8000284:	693a      	ldr	r2, [r7, #16]
 8000286:	b2d2      	uxtb	r2, r2
 8000288:	3237      	adds	r2, #55	; 0x37
 800028a:	b2d2      	uxtb	r2, r2
 800028c:	701a      	strb	r2, [r3, #0]
 800028e:	e009      	b.n	80002a4 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	1c59      	adds	r1, r3, #1
 8000296:	68fa      	ldr	r2, [r7, #12]
 8000298:	6011      	str	r1, [r2, #0]
 800029a:	693a      	ldr	r2, [r7, #16]
 800029c:	b2d2      	uxtb	r2, r2
 800029e:	3230      	adds	r2, #48	; 0x30
 80002a0:	b2d2      	uxtb	r2, r2
 80002a2:	701a      	strb	r2, [r3, #0]
{
	int div = 1;
	while (d/div >= base)
		div *= base;

	while (div != 0)
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d1d2      	bne.n	8000250 <ts_itoa+0x2c>
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
	}
}
 80002aa:	371c      	adds	r7, #28
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr

080002b4 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b088      	sub	sp, #32
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	60f8      	str	r0, [r7, #12]
 80002bc:	60b9      	str	r1, [r7, #8]
 80002be:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80002c4:	e07f      	b.n	80003c6 <ts_formatstring+0x112>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b25      	cmp	r3, #37	; 0x25
 80002cc:	d173      	bne.n	80003b6 <ts_formatstring+0x102>
		{
			switch (*(++fmt))
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	3301      	adds	r3, #1
 80002d2:	60bb      	str	r3, [r7, #8]
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	2b64      	cmp	r3, #100	; 0x64
 80002da:	d01e      	beq.n	800031a <ts_formatstring+0x66>
 80002dc:	2b64      	cmp	r3, #100	; 0x64
 80002de:	dc06      	bgt.n	80002ee <ts_formatstring+0x3a>
 80002e0:	2b58      	cmp	r3, #88	; 0x58
 80002e2:	d052      	beq.n	800038a <ts_formatstring+0xd6>
 80002e4:	2b63      	cmp	r3, #99	; 0x63
 80002e6:	d00e      	beq.n	8000306 <ts_formatstring+0x52>
 80002e8:	2b25      	cmp	r3, #37	; 0x25
 80002ea:	d05a      	beq.n	80003a2 <ts_formatstring+0xee>
 80002ec:	e05f      	b.n	80003ae <ts_formatstring+0xfa>
 80002ee:	2b73      	cmp	r3, #115	; 0x73
 80002f0:	d02c      	beq.n	800034c <ts_formatstring+0x98>
 80002f2:	2b73      	cmp	r3, #115	; 0x73
 80002f4:	dc02      	bgt.n	80002fc <ts_formatstring+0x48>
 80002f6:	2b69      	cmp	r3, #105	; 0x69
 80002f8:	d00f      	beq.n	800031a <ts_formatstring+0x66>
 80002fa:	e058      	b.n	80003ae <ts_formatstring+0xfa>
 80002fc:	2b75      	cmp	r3, #117	; 0x75
 80002fe:	d038      	beq.n	8000372 <ts_formatstring+0xbe>
 8000300:	2b78      	cmp	r3, #120	; 0x78
 8000302:	d042      	beq.n	800038a <ts_formatstring+0xd6>
 8000304:	e053      	b.n	80003ae <ts_formatstring+0xfa>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	1c5a      	adds	r2, r3, #1
 800030a:	60fa      	str	r2, [r7, #12]
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	1d11      	adds	r1, r2, #4
 8000310:	6079      	str	r1, [r7, #4]
 8000312:	6812      	ldr	r2, [r2, #0]
 8000314:	b2d2      	uxtb	r2, r2
 8000316:	701a      	strb	r2, [r3, #0]
				break;
 8000318:	e049      	b.n	80003ae <ts_formatstring+0xfa>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	1d1a      	adds	r2, r3, #4
 800031e:	607a      	str	r2, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8000324:	69fb      	ldr	r3, [r7, #28]
 8000326:	2b00      	cmp	r3, #0
 8000328:	da07      	bge.n	800033a <ts_formatstring+0x86>
					{
						val *= -1;
 800032a:	69fb      	ldr	r3, [r7, #28]
 800032c:	425b      	negs	r3, r3
 800032e:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	1c5a      	adds	r2, r3, #1
 8000334:	60fa      	str	r2, [r7, #12]
 8000336:	222d      	movs	r2, #45	; 0x2d
 8000338:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 800033a:	69fb      	ldr	r3, [r7, #28]
 800033c:	f107 020c 	add.w	r2, r7, #12
 8000340:	4610      	mov	r0, r2
 8000342:	4619      	mov	r1, r3
 8000344:	220a      	movs	r2, #10
 8000346:	f7ff ff6d 	bl	8000224 <ts_itoa>
				}
				break;
 800034a:	e030      	b.n	80003ae <ts_formatstring+0xfa>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	1d1a      	adds	r2, r3, #4
 8000350:	607a      	str	r2, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8000356:	e007      	b.n	8000368 <ts_formatstring+0xb4>
					{
						*buf++ = *arg++;
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	1c5a      	adds	r2, r3, #1
 800035c:	60fa      	str	r2, [r7, #12]
 800035e:	69ba      	ldr	r2, [r7, #24]
 8000360:	1c51      	adds	r1, r2, #1
 8000362:	61b9      	str	r1, [r7, #24]
 8000364:	7812      	ldrb	r2, [r2, #0]
 8000366:	701a      	strb	r2, [r3, #0]
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
					while (*arg)
 8000368:	69bb      	ldr	r3, [r7, #24]
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d1f3      	bne.n	8000358 <ts_formatstring+0xa4>
					{
						*buf++ = *arg++;
					}
				}
				break;
 8000370:	e01d      	b.n	80003ae <ts_formatstring+0xfa>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	1d1a      	adds	r2, r3, #4
 8000376:	607a      	str	r2, [r7, #4]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f107 020c 	add.w	r2, r7, #12
 800037e:	4610      	mov	r0, r2
 8000380:	4619      	mov	r1, r3
 8000382:	220a      	movs	r2, #10
 8000384:	f7ff ff4e 	bl	8000224 <ts_itoa>
				break;
 8000388:	e011      	b.n	80003ae <ts_formatstring+0xfa>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	1d1a      	adds	r2, r3, #4
 800038e:	607a      	str	r2, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f107 020c 	add.w	r2, r7, #12
 8000396:	4610      	mov	r0, r2
 8000398:	4619      	mov	r1, r3
 800039a:	2210      	movs	r2, #16
 800039c:	f7ff ff42 	bl	8000224 <ts_itoa>
				break;
 80003a0:	e005      	b.n	80003ae <ts_formatstring+0xfa>
			  case '%':
				  *buf++ = '%';
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	1c5a      	adds	r2, r3, #1
 80003a6:	60fa      	str	r2, [r7, #12]
 80003a8:	2225      	movs	r2, #37	; 0x25
 80003aa:	701a      	strb	r2, [r3, #0]
				  break;
 80003ac:	bf00      	nop
			}
			fmt++;
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	3301      	adds	r3, #1
 80003b2:	60bb      	str	r3, [r7, #8]
 80003b4:	e007      	b.n	80003c6 <ts_formatstring+0x112>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	1c5a      	adds	r2, r3, #1
 80003ba:	60fa      	str	r2, [r7, #12]
 80003bc:	68ba      	ldr	r2, [r7, #8]
 80003be:	1c51      	adds	r1, r2, #1
 80003c0:	60b9      	str	r1, [r7, #8]
 80003c2:	7812      	ldrb	r2, [r2, #0]
 80003c4:	701a      	strb	r2, [r3, #0]
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
	char *start_buf = buf;
	while(*fmt)
 80003c6:	68bb      	ldr	r3, [r7, #8]
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f47f af7b 	bne.w	80002c6 <ts_formatstring+0x12>
		else
		{
			*buf++ = *fmt++;
		}
	}
	*buf = 0;
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	2200      	movs	r2, #0
 80003d4:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	461a      	mov	r2, r3
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	1ad3      	subs	r3, r2, r3
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3720      	adds	r7, #32
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop

080003e8 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
	int length = 0;
 80003f2:	2300      	movs	r3, #0
 80003f4:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 80003f6:	e081      	b.n	80004fc <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b25      	cmp	r3, #37	; 0x25
 80003fe:	d177      	bne.n	80004f0 <ts_formatlength+0x108>
		{
			++fmt;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	3301      	adds	r3, #1
 8000404:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	3b58      	subs	r3, #88	; 0x58
 800040c:	2b20      	cmp	r3, #32
 800040e:	d86a      	bhi.n	80004e6 <ts_formatlength+0xfe>
 8000410:	a201      	add	r2, pc, #4	; (adr r2, 8000418 <ts_formatlength+0x30>)
 8000412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000416:	bf00      	nop
 8000418:	080004d9 	.word	0x080004d9
 800041c:	080004e7 	.word	0x080004e7
 8000420:	080004e7 	.word	0x080004e7
 8000424:	080004e7 	.word	0x080004e7
 8000428:	080004e7 	.word	0x080004e7
 800042c:	080004e7 	.word	0x080004e7
 8000430:	080004e7 	.word	0x080004e7
 8000434:	080004e7 	.word	0x080004e7
 8000438:	080004e7 	.word	0x080004e7
 800043c:	080004e7 	.word	0x080004e7
 8000440:	080004e7 	.word	0x080004e7
 8000444:	0800049d 	.word	0x0800049d
 8000448:	080004ab 	.word	0x080004ab
 800044c:	080004e7 	.word	0x080004e7
 8000450:	080004e7 	.word	0x080004e7
 8000454:	080004e7 	.word	0x080004e7
 8000458:	080004e7 	.word	0x080004e7
 800045c:	080004ab 	.word	0x080004ab
 8000460:	080004e7 	.word	0x080004e7
 8000464:	080004e7 	.word	0x080004e7
 8000468:	080004e7 	.word	0x080004e7
 800046c:	080004e7 	.word	0x080004e7
 8000470:	080004e7 	.word	0x080004e7
 8000474:	080004e7 	.word	0x080004e7
 8000478:	080004e7 	.word	0x080004e7
 800047c:	080004e7 	.word	0x080004e7
 8000480:	080004e7 	.word	0x080004e7
 8000484:	080004b9 	.word	0x080004b9
 8000488:	080004e7 	.word	0x080004e7
 800048c:	080004ab 	.word	0x080004ab
 8000490:	080004e7 	.word	0x080004e7
 8000494:	080004e7 	.word	0x080004e7
 8000498:	080004d9 	.word	0x080004d9
			{
			  case 'c':
		  		  va_arg(va, int);
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	3304      	adds	r3, #4
 80004a0:	603b      	str	r3, [r7, #0]
				  ++length;
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	3301      	adds	r3, #1
 80004a6:	60fb      	str	r3, [r7, #12]
				  break;
 80004a8:	e021      	b.n	80004ee <ts_formatlength+0x106>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	330b      	adds	r3, #11
 80004ae:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	3304      	adds	r3, #4
 80004b4:	603b      	str	r3, [r7, #0]
				  break;
 80004b6:	e01a      	b.n	80004ee <ts_formatlength+0x106>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	1d1a      	adds	r2, r3, #4
 80004bc:	603a      	str	r2, [r7, #0]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 80004c2:	e002      	b.n	80004ca <ts_formatlength+0xe2>
			  			  ++length;
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	3301      	adds	r3, #1
 80004c8:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
				  break;
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
			  		  while (*str++)
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	1c5a      	adds	r2, r3, #1
 80004ce:	60ba      	str	r2, [r7, #8]
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d1f6      	bne.n	80004c4 <ts_formatlength+0xdc>
			  			  ++length;
			  	  }
				  break;
 80004d6:	e00a      	b.n	80004ee <ts_formatlength+0x106>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	3308      	adds	r3, #8
 80004dc:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	3304      	adds	r3, #4
 80004e2:	603b      	str	r3, [r7, #0]
				  break;
 80004e4:	e003      	b.n	80004ee <ts_formatlength+0x106>
			  default:
				  ++length;
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	3301      	adds	r3, #1
 80004ea:	60fb      	str	r3, [r7, #12]
				  break;
 80004ec:	bf00      	nop
 80004ee:	e002      	b.n	80004f6 <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	3301      	adds	r3, #1
 80004f4:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	3301      	adds	r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
	int length = 0;
	while (*fmt)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	f47f af79 	bne.w	80003f8 <ts_formatlength+0x10>
		{
			++length;
		}
		++fmt;
	}
	return length;
 8000506:	68fb      	ldr	r3, [r7, #12]
}
 8000508:	4618      	mov	r0, r3
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <printf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int printf(const char *fmt, ...)
{
 8000514:	b40f      	push	{r0, r1, r2, r3}
 8000516:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
	int length = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8000522:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000526:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8000528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800052a:	6839      	ldr	r1, [r7, #0]
 800052c:	f7ff ff5c 	bl	80003e8 <ts_formatlength>
 8000530:	60f8      	str	r0, [r7, #12]
 8000532:	466b      	mov	r3, sp
 8000534:	461e      	mov	r6, r3
	va_end(va);
	{
		char buf[length];
 8000536:	68f9      	ldr	r1, [r7, #12]
 8000538:	1e4b      	subs	r3, r1, #1
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	460b      	mov	r3, r1
 800053e:	461a      	mov	r2, r3
 8000540:	f04f 0300 	mov.w	r3, #0
 8000544:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8000548:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 800054c:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8000550:	460b      	mov	r3, r1
 8000552:	461a      	mov	r2, r3
 8000554:	f04f 0300 	mov.w	r3, #0
 8000558:	00dd      	lsls	r5, r3, #3
 800055a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800055e:	00d4      	lsls	r4, r2, #3
 8000560:	460b      	mov	r3, r1
 8000562:	3307      	adds	r3, #7
 8000564:	08db      	lsrs	r3, r3, #3
 8000566:	00db      	lsls	r3, r3, #3
 8000568:	ebad 0d03 	sub.w	sp, sp, r3
 800056c:	466b      	mov	r3, sp
 800056e:	3300      	adds	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8000572:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000576:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4618      	mov	r0, r3
 800057c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800057e:	683a      	ldr	r2, [r7, #0]
 8000580:	f7ff fe98 	bl	80002b4 <ts_formatstring>
 8000584:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2001      	movs	r0, #1
 800058a:	4619      	mov	r1, r3
 800058c:	68fa      	ldr	r2, [r7, #12]
 800058e:	f000 f8b1 	bl	80006f4 <_write>
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8000596:	68fb      	ldr	r3, [r7, #12]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005a2:	b004      	add	sp, #16
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80005ac:	4b16      	ldr	r3, [pc, #88]	; (8000608 <SystemInit+0x60>)
 80005ae:	4a16      	ldr	r2, [pc, #88]	; (8000608 <SystemInit+0x60>)
 80005b0:	6812      	ldr	r2, [r2, #0]
 80005b2:	f042 0201 	orr.w	r2, r2, #1
 80005b6:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80005b8:	4a13      	ldr	r2, [pc, #76]	; (8000608 <SystemInit+0x60>)
 80005ba:	4b13      	ldr	r3, [pc, #76]	; (8000608 <SystemInit+0x60>)
 80005bc:	6859      	ldr	r1, [r3, #4]
 80005be:	4b13      	ldr	r3, [pc, #76]	; (800060c <SystemInit+0x64>)
 80005c0:	400b      	ands	r3, r1
 80005c2:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80005c4:	4a10      	ldr	r2, [pc, #64]	; (8000608 <SystemInit+0x60>)
 80005c6:	4b10      	ldr	r3, [pc, #64]	; (8000608 <SystemInit+0x60>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005d2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <SystemInit+0x60>)
 80005d6:	4a0c      	ldr	r2, [pc, #48]	; (8000608 <SystemInit+0x60>)
 80005d8:	6812      	ldr	r2, [r2, #0]
 80005da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005de:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <SystemInit+0x60>)
 80005e2:	4a09      	ldr	r2, [pc, #36]	; (8000608 <SystemInit+0x60>)
 80005e4:	6852      	ldr	r2, [r2, #4]
 80005e6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80005ea:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <SystemInit+0x60>)
 80005ee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80005f2:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <SystemInit+0x60>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80005fa:	f000 f80b 	bl	8000614 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005fe:	4b04      	ldr	r3, [pc, #16]	; (8000610 <SystemInit+0x68>)
 8000600:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000604:	609a      	str	r2, [r3, #8]
#endif 
}
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40021000 	.word	0x40021000
 800060c:	f8ff0000 	.word	0xf8ff0000
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
  SetSysClockToHSE();
#elif defined SYSCLK_FREQ_24MHz
  SetSysClockTo24();
 8000618:	f000 f802 	bl	8000620 <SetSysClockTo24>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop

08000620 <SetSysClockTo24>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo24(void)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	2300      	movs	r3, #0
 800062c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800062e:	4b30      	ldr	r3, [pc, #192]	; (80006f0 <SetSysClockTo24+0xd0>)
 8000630:	4a2f      	ldr	r2, [pc, #188]	; (80006f0 <SetSysClockTo24+0xd0>)
 8000632:	6812      	ldr	r2, [r2, #0]
 8000634:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000638:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800063a:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <SetSysClockTo24+0xd0>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000642:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3301      	adds	r3, #1
 8000648:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d103      	bne.n	8000658 <SetSysClockTo24+0x38>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000656:	d1f0      	bne.n	800063a <SetSysClockTo24+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000658:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <SetSysClockTo24+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <SetSysClockTo24+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000664:	2301      	movs	r3, #1
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	e001      	b.n	800066e <SetSysClockTo24+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800066a:	2300      	movs	r3, #0
 800066c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d137      	bne.n	80006e4 <SetSysClockTo24+0xc4>
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
#endif
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <SetSysClockTo24+0xd0>)
 8000676:	4a1e      	ldr	r2, [pc, #120]	; (80006f0 <SetSysClockTo24+0xd0>)
 8000678:	6852      	ldr	r2, [r2, #4]
 800067a:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800067c:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <SetSysClockTo24+0xd0>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SetSysClockTo24+0xd0>)
 8000680:	6852      	ldr	r2, [r2, #4]
 8000682:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8000684:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <SetSysClockTo24+0xd0>)
 8000686:	4a1a      	ldr	r2, [pc, #104]	; (80006f0 <SetSysClockTo24+0xd0>)
 8000688:	6852      	ldr	r2, [r2, #4]
 800068a:	605a      	str	r2, [r3, #4]
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
    {
    }   
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
    /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <SetSysClockTo24+0xd0>)
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <SetSysClockTo24+0xd0>)
 8000690:	6852      	ldr	r2, [r2, #4]
 8000692:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000696:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLLMULL6);
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SetSysClockTo24+0xd0>)
 800069a:	4a15      	ldr	r2, [pc, #84]	; (80006f0 <SetSysClockTo24+0xd0>)
 800069c:	6852      	ldr	r2, [r2, #4]
 800069e:	f442 1298 	orr.w	r2, r2, #1245184	; 0x130000
 80006a2:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <SetSysClockTo24+0xd0>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <SetSysClockTo24+0xd0>)
 80006a8:	6812      	ldr	r2, [r2, #0]
 80006aa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80006ae:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80006b0:	bf00      	nop
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <SetSysClockTo24+0xd0>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d0f9      	beq.n	80006b2 <SetSysClockTo24+0x92>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <SetSysClockTo24+0xd0>)
 80006c0:	4a0b      	ldr	r2, [pc, #44]	; (80006f0 <SetSysClockTo24+0xd0>)
 80006c2:	6852      	ldr	r2, [r2, #4]
 80006c4:	f022 0203 	bic.w	r2, r2, #3
 80006c8:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <SetSysClockTo24+0xd0>)
 80006cc:	4a08      	ldr	r2, [pc, #32]	; (80006f0 <SetSysClockTo24+0xd0>)
 80006ce:	6852      	ldr	r2, [r2, #4]
 80006d0:	f042 0202 	orr.w	r2, r2, #2
 80006d4:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80006d6:	bf00      	nop
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <SetSysClockTo24+0xd0>)
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	f003 030c 	and.w	r3, r3, #12
 80006e0:	2b08      	cmp	r3, #8
 80006e2:	d1f9      	bne.n	80006d8 <SetSysClockTo24+0xb8>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000

080006f4 <_write>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _write(int file, char *ptr, int len)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
	int i;
	for (i=0; i<len; i++)
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	e009      	b.n	800071a <_write+0x26>
	{
		__io_putchar(*(ptr++));
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	1c5a      	adds	r2, r3, #1
 800070a:	60ba      	str	r2, [r7, #8]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	4618      	mov	r0, r3
 8000710:	f000 f886 	bl	8000820 <__io_putchar>
}

int _write(int file, char *ptr, int len)
{
	int i;
	for (i=0; i<len; i++)
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	3301      	adds	r3, #1
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	697a      	ldr	r2, [r7, #20]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	429a      	cmp	r2, r3
 8000720:	dbf1      	blt.n	8000706 <_write+0x12>
	{
		__io_putchar(*(ptr++));
	}
	return len;
 8000722:	687b      	ldr	r3, [r7, #4]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
}
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 800073c:	e7fe      	b.n	800073c <HardFault_Handler+0x4>
 800073e:	bf00      	nop

08000740 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000744:	e7fe      	b.n	8000744 <MemManage_Handler+0x4>
 8000746:	bf00      	nop

08000748 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 800074c:	e7fe      	b.n	800074c <BusFault_Handler+0x4>
 800074e:	bf00      	nop

08000750 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000754:	e7fe      	b.n	8000754 <UsageFault_Handler+0x4>
 8000756:	bf00      	nop

08000758 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
}
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
}
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <PendSV_Handler>:
  * @brief  This function handles PendSV_Handler exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
}
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
}
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000788:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800078a:	f000 b804 	b.w	8000796 <LoopCopyDataInit>

0800078e <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800078e:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <LoopFillZerobss+0x16>)
	ldr	r3, [r3, r1]
 8000790:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000792:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000794:	3104      	adds	r1, #4

08000796 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000796:	480c      	ldr	r0, [pc, #48]	; (80007c8 <LoopFillZerobss+0x1a>)
	ldr	r3, =_edata
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <LoopFillZerobss+0x1e>)
	adds	r2, r0, r1
 800079a:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800079c:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800079e:	f4ff aff6 	bcc.w	800078e <CopyDataInit>
	ldr	r2, =_sbss
 80007a2:	4a0b      	ldr	r2, [pc, #44]	; (80007d0 <LoopFillZerobss+0x22>)
	b	LoopFillZerobss
 80007a4:	f000 b803 	b.w	80007ae <LoopFillZerobss>

080007a8 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007a8:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80007aa:	f842 3b04 	str.w	r3, [r2], #4

080007ae <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <LoopFillZerobss+0x26>)
	cmp	r2, r3
 80007b0:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80007b2:	f4ff aff9 	bcc.w	80007a8 <FillZerobss>
	
/* Call the clock system intitialization function.*/
  bl  SystemInit 
 80007b6:	f7ff fef7 	bl	80005a8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array  
 80007ba:	f000 fc7f 	bl	80010bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007be:	f000 f80d 	bl	80007dc <main>
	bx	lr
 80007c2:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80007c4:	08001198 	.word	0x08001198
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007c8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80007cc:	20000030 	.word	0x20000030
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80007d0:	20000030 	.word	0x20000030
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80007d4:	20000068 	.word	0x20000068

080007d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007d8:	f7ff bffe 	b.w	80007d8 <ADC1_IRQHandler>

080007dc <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
        - One Stop Bit
        - No parity
        - Hardware flow control disabled (RTS and CTS signals)
        - Receive and transmit enabled
  */
  USART_InitStructure.USART_BaudRate = 115200;
 80007e0:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <main+0x3c>)
 80007e2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e6:	601a      	str	r2, [r3, #0]
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80007e8:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <main+0x3c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	809a      	strh	r2, [r3, #4]
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <main+0x3c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	80da      	strh	r2, [r3, #6]
  USART_InitStructure.USART_Parity = USART_Parity_No;
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <main+0x3c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	811a      	strh	r2, [r3, #8]
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80007fa:	4b07      	ldr	r3, [pc, #28]	; (8000818 <main+0x3c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	819a      	strh	r2, [r3, #12]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <main+0x3c>)
 8000802:	220c      	movs	r2, #12
 8000804:	815a      	strh	r2, [r3, #10]

  STM_EVAL_COMInit(COM1, &USART_InitStructure);
 8000806:	2000      	movs	r0, #0
 8000808:	4903      	ldr	r1, [pc, #12]	; (8000818 <main+0x3c>)
 800080a:	f000 f885 	bl	8000918 <STM_EVAL_COMInit>

  /* Output a message on Hyperterminal using printf function */
  printf("\n\rUSART Printf Example: retarget the C library printf function to the USART\n\r");
 800080e:	4803      	ldr	r0, [pc, #12]	; (800081c <main+0x40>)
 8000810:	f7ff fe80 	bl	8000514 <printf>

  while (1)
  {
  }
 8000814:	e7fe      	b.n	8000814 <main+0x38>
 8000816:	bf00      	nop
 8000818:	2000004c 	.word	0x2000004c
 800081c:	08001108 	.word	0x08001108

08000820 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART */
  USART_SendData(EVAL_COM1, (uint8_t) ch);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	b2db      	uxtb	r3, r3
 800082c:	4808      	ldr	r0, [pc, #32]	; (8000850 <__io_putchar+0x30>)
 800082e:	4619      	mov	r1, r3
 8000830:	f000 f9bc 	bl	8000bac <USART_SendData>

  /* Loop until the end of transmission */
  while (USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TC) == RESET)
 8000834:	bf00      	nop
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <__io_putchar+0x30>)
 8000838:	2140      	movs	r1, #64	; 0x40
 800083a:	f000 f9c9 	bl	8000bd0 <USART_GetFlagStatus>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d0f8      	beq.n	8000836 <__io_putchar+0x16>
  {}

  return ch;
 8000844:	687b      	ldr	r3, [r7, #4]
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40013800 	.word	0x40013800

08000854 <sEE_TIMEOUT_UserCallback>:
/*
 * Callback used by stm32100e_eval_i2c_ee.c.
 * Refer to stm32100e_eval_i2c_ee.h for more info.
 */
__attribute__((weak)) uint32_t sEE_TIMEOUT_UserCallback(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* Block communication and all processes */
  while (1)
  {
  }
 8000858:	e7fe      	b.n	8000858 <sEE_TIMEOUT_UserCallback+0x4>
 800085a:	bf00      	nop

0800085c <DMA1_Channel4_IRQHandler>:
  * @brief  This function handles the DMA Tx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_TX_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */ 
  if(DMA_GetFlagStatus(sEE_I2C_DMA_FLAG_TX_TC) != RESET)
 8000860:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000864:	f000 fbe6 	bl	8001034 <DMA_GetFlagStatus>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d028      	beq.n	80008c0 <DMA1_Channel4_IRQHandler+0x64>
  {  
    /* Disable the DMA Tx Channel and Clear all its Flags */  
    DMA_Cmd(sEE_I2C_DMA_CHANNEL_TX, DISABLE);
 800086e:	4815      	ldr	r0, [pc, #84]	; (80008c4 <DMA1_Channel4_IRQHandler+0x68>)
 8000870:	2100      	movs	r1, #0
 8000872:	f000 fbc3 	bl	8000ffc <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_FLAG_TX_GL);
 8000876:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800087a:	f000 fc05 	bl	8001088 <DMA_ClearFlag>

    /*!< Wait till all data have been physically transferred on the bus */
    sEETimeout = sEE_LONG_TIMEOUT;
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <DMA1_Channel4_IRQHandler+0x6c>)
 8000880:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8000884:	601a      	str	r2, [r3, #0]
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 8000886:	e008      	b.n	800089a <DMA1_Channel4_IRQHandler+0x3e>
    {
      if((sEETimeout--) == 0) sEE_TIMEOUT_UserCallback();
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <DMA1_Channel4_IRQHandler+0x6c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	1e59      	subs	r1, r3, #1
 800088e:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <DMA1_Channel4_IRQHandler+0x6c>)
 8000890:	6011      	str	r1, [r2, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d101      	bne.n	800089a <DMA1_Channel4_IRQHandler+0x3e>
 8000896:	f7ff ffdd 	bl	8000854 <sEE_TIMEOUT_UserCallback>
    DMA_Cmd(sEE_I2C_DMA_CHANNEL_TX, DISABLE);
    DMA_ClearFlag(sEE_I2C_DMA_FLAG_TX_GL);

    /*!< Wait till all data have been physically transferred on the bus */
    sEETimeout = sEE_LONG_TIMEOUT;
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 800089a:	480c      	ldr	r0, [pc, #48]	; (80008cc <DMA1_Channel4_IRQHandler+0x70>)
 800089c:	490c      	ldr	r1, [pc, #48]	; (80008d0 <DMA1_Channel4_IRQHandler+0x74>)
 800089e:	f000 fabd 	bl	8000e1c <I2C_GetFlagStatus>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d0ef      	beq.n	8000888 <DMA1_Channel4_IRQHandler+0x2c>
    {
      if((sEETimeout--) == 0) sEE_TIMEOUT_UserCallback();
    }
    
    /*!< Send STOP condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);
 80008a8:	4808      	ldr	r0, [pc, #32]	; (80008cc <DMA1_Channel4_IRQHandler+0x70>)
 80008aa:	2101      	movs	r1, #1
 80008ac:	f000 fa96 	bl	8000ddc <I2C_GenerateSTOP>
    
    /* Perform a read on SR1 and SR2 register to clear eventualaly pending flags */
    (void)sEE_I2C->SR1;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <DMA1_Channel4_IRQHandler+0x70>)
 80008b2:	8a9b      	ldrh	r3, [r3, #20]
    (void)sEE_I2C->SR2;
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <DMA1_Channel4_IRQHandler+0x70>)
 80008b6:	8b1b      	ldrh	r3, [r3, #24]
    
    /* Reset the variable holding the number of data to be written */
    *sEEDataWritePointer = 0;  
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <DMA1_Channel4_IRQHandler+0x78>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
  }
}
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40020044 	.word	0x40020044
 80008c8:	20000000 	.word	0x20000000
 80008cc:	40005800 	.word	0x40005800
 80008d0:	10000004 	.word	0x10000004
 80008d4:	2000005c 	.word	0x2000005c

080008d8 <DMA1_Channel5_IRQHandler>:
  * @brief  This function handles the DMA Rx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_RX_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_FLAG_RX_TC) != RESET)
 80008dc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80008e0:	f000 fba8 	bl	8001034 <DMA_GetFlagStatus>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d00f      	beq.n	800090a <DMA1_Channel5_IRQHandler+0x32>
  {      
    /*!< Send STOP Condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);    
 80008ea:	4808      	ldr	r0, [pc, #32]	; (800090c <DMA1_Channel5_IRQHandler+0x34>)
 80008ec:	2101      	movs	r1, #1
 80008ee:	f000 fa75 	bl	8000ddc <I2C_GenerateSTOP>
    
    /* Disable the DMA Rx Channel and Clear all its Flags */  
    DMA_Cmd(sEE_I2C_DMA_CHANNEL_RX, DISABLE);
 80008f2:	4807      	ldr	r0, [pc, #28]	; (8000910 <DMA1_Channel5_IRQHandler+0x38>)
 80008f4:	2100      	movs	r1, #0
 80008f6:	f000 fb81 	bl	8000ffc <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_FLAG_RX_GL);
 80008fa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80008fe:	f000 fbc3 	bl	8001088 <DMA_ClearFlag>
    
    /* Reset the variable holding the number of data to be read */
    *sEEDataReadPointer = 0;
 8000902:	4b04      	ldr	r3, [pc, #16]	; (8000914 <DMA1_Channel5_IRQHandler+0x3c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2200      	movs	r2, #0
 8000908:	801a      	strh	r2, [r3, #0]
  }
}
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40005800 	.word	0x40005800
 8000910:	40020058 	.word	0x40020058
 8000914:	20000064 	.word	0x20000064

08000918 <STM_EVAL_COMInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that
  *   contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void STM_EVAL_COMInit(COM_TypeDef COM, USART_InitTypeDef* USART_InitStruct)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	6039      	str	r1, [r7, #0]
 8000922:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIO clock */
  RCC_APB2PeriphClockCmd(COM_TX_PORT_CLK[COM] | COM_RX_PORT_CLK[COM] | RCC_APB2Periph_AFIO, ENABLE);
 8000924:	79fa      	ldrb	r2, [r7, #7]
 8000926:	4b2c      	ldr	r3, [pc, #176]	; (80009d8 <STM_EVAL_COMInit+0xc0>)
 8000928:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800092c:	79f9      	ldrb	r1, [r7, #7]
 800092e:	4b2b      	ldr	r3, [pc, #172]	; (80009dc <STM_EVAL_COMInit+0xc4>)
 8000930:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000934:	4313      	orrs	r3, r2
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	4618      	mov	r0, r3
 800093c:	2101      	movs	r1, #1
 800093e:	f000 fa11 	bl	8000d64 <RCC_APB2PeriphClockCmd>

  /* Enable UART clock */
  if (COM == COM1)
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d108      	bne.n	800095a <STM_EVAL_COMInit+0x42>
  {
    RCC_APB2PeriphClockCmd(COM_USART_CLK[COM], ENABLE); 
 8000948:	79fa      	ldrb	r2, [r7, #7]
 800094a:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <STM_EVAL_COMInit+0xc8>)
 800094c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000950:	4618      	mov	r0, r3
 8000952:	2101      	movs	r1, #1
 8000954:	f000 fa06 	bl	8000d64 <RCC_APB2PeriphClockCmd>
 8000958:	e007      	b.n	800096a <STM_EVAL_COMInit+0x52>
  }
  else
  {
    RCC_APB1PeriphClockCmd(COM_USART_CLK[COM], ENABLE);
 800095a:	79fa      	ldrb	r2, [r7, #7]
 800095c:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <STM_EVAL_COMInit+0xc8>)
 800095e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000962:	4618      	mov	r0, r3
 8000964:	2101      	movs	r1, #1
 8000966:	f000 fa1b 	bl	8000da0 <RCC_APB1PeriphClockCmd>
  }

  /* Configure USART Tx as alternate function push-pull */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800096a:	2318      	movs	r3, #24
 800096c:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
 800096e:	79fa      	ldrb	r2, [r7, #7]
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <STM_EVAL_COMInit+0xcc>)
 8000972:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000976:	81bb      	strh	r3, [r7, #12]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000978:	2303      	movs	r3, #3
 800097a:	73bb      	strb	r3, [r7, #14]
  GPIO_Init(COM_TX_PORT[COM], &GPIO_InitStructure);
 800097c:	79fa      	ldrb	r2, [r7, #7]
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <STM_EVAL_COMInit+0xd0>)
 8000980:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	4610      	mov	r0, r2
 800098a:	4619      	mov	r1, r3
 800098c:	f000 fa7a 	bl	8000e84 <GPIO_Init>

  /* Configure USART Rx as input floating */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000990:	2304      	movs	r3, #4
 8000992:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Pin = COM_RX_PIN[COM];
 8000994:	79fa      	ldrb	r2, [r7, #7]
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <STM_EVAL_COMInit+0xd4>)
 8000998:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800099c:	81bb      	strh	r3, [r7, #12]
  GPIO_Init(COM_RX_PORT[COM], &GPIO_InitStructure);
 800099e:	79fa      	ldrb	r2, [r7, #7]
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <STM_EVAL_COMInit+0xd8>)
 80009a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	f000 fa69 	bl	8000e84 <GPIO_Init>

  /* USART configuration */
  USART_Init(COM_USART[COM], USART_InitStruct);
 80009b2:	79fa      	ldrb	r2, [r7, #7]
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <STM_EVAL_COMInit+0xdc>)
 80009b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009ba:	4618      	mov	r0, r3
 80009bc:	6839      	ldr	r1, [r7, #0]
 80009be:	f000 f81b 	bl	80009f8 <USART_Init>
    
  /* Enable USART */
  USART_Cmd(COM_USART[COM], ENABLE);
 80009c2:	79fa      	ldrb	r2, [r7, #7]
 80009c4:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <STM_EVAL_COMInit+0xdc>)
 80009c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009ca:	4618      	mov	r0, r3
 80009cc:	2101      	movs	r1, #1
 80009ce:	f000 f8cd 	bl	8000b6c <USART_Cmd>
}
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	08001160 	.word	0x08001160
 80009dc:	08001168 	.word	0x08001168
 80009e0:	08001158 	.word	0x08001158
 80009e4:	08001170 	.word	0x08001170
 80009e8:	2000000c 	.word	0x2000000c
 80009ec:	08001174 	.word	0x08001174
 80009f0:	20000014 	.word	0x20000014
 80009f4:	20000004 	.word	0x20000004

080009f8 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	; 0x30
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	8a1b      	ldrh	r3, [r3, #16]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8000a22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a24:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8000a28:	4013      	ands	r3, r2
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	88db      	ldrh	r3, [r3, #6]
 8000a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a32:	4313      	orrs	r3, r2
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	899b      	ldrh	r3, [r3, #12]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a48:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	889a      	ldrh	r2, [r3, #4]
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	891b      	ldrh	r3, [r3, #8]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000a60:	4313      	orrs	r3, r2
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a66:	4313      	orrs	r3, r2
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	8a9b      	ldrh	r3, [r3, #20]
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8000a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a7c:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000a80:	4013      	ands	r3, r2
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	899b      	ldrh	r3, [r3, #12]
 8000a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000a96:	f107 0308 	add.w	r3, r7, #8
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f8b4 	bl	8000c08 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8000aa0:	69fa      	ldr	r2, [r7, #28]
 8000aa2:	4b30      	ldr	r3, [pc, #192]	; (8000b64 <USART_Init+0x16c>)
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d102      	bne.n	8000aae <USART_Init+0xb6>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8000aac:	e001      	b.n	8000ab2 <USART_Init+0xba>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	899b      	ldrh	r3, [r3, #12]
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	b21b      	sxth	r3, r3
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	da0c      	bge.n	8000ada <USART_Init+0xe2>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	4413      	add	r3, r2
 8000ac8:	009a      	lsls	r2, r3, #2
 8000aca:	441a      	add	r2, r3
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ad8:	e00b      	b.n	8000af2 <USART_Init+0xfa>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000adc:	4613      	mov	r3, r2
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	4413      	add	r3, r2
 8000ae2:	009a      	lsls	r2, r3, #2
 8000ae4:	441a      	add	r2, r3
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8000af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000af4:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <USART_Init+0x170>)
 8000af6:	fba3 1302 	umull	r1, r3, r3, r2
 8000afa:	095b      	lsrs	r3, r3, #5
 8000afc:	011b      	lsls	r3, r3, #4
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b02:	091b      	lsrs	r3, r3, #4
 8000b04:	2264      	movs	r2, #100	; 0x64
 8000b06:	fb02 f303 	mul.w	r3, r2, r3
 8000b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	899b      	ldrh	r3, [r3, #12]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	b21b      	sxth	r3, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	da0d      	bge.n	8000b3a <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000b1e:	6a3b      	ldr	r3, [r7, #32]
 8000b20:	00db      	lsls	r3, r3, #3
 8000b22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <USART_Init+0x170>)
 8000b28:	fba3 1302 	umull	r1, r3, r3, r2
 8000b2c:	095b      	lsrs	r3, r3, #5
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b34:	4313      	orrs	r3, r2
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b38:	e00c      	b.n	8000b54 <USART_Init+0x15c>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000b3a:	6a3b      	ldr	r3, [r7, #32]
 8000b3c:	011b      	lsls	r3, r3, #4
 8000b3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <USART_Init+0x170>)
 8000b44:	fba3 1302 	umull	r1, r3, r3, r2
 8000b48:	095b      	lsrs	r3, r3, #5
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b50:	4313      	orrs	r3, r2
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	811a      	strh	r2, [r3, #8]
}
 8000b5c:	3730      	adds	r7, #48	; 0x30
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40013800 	.word	0x40013800
 8000b68:	51eb851f 	.word	0x51eb851f

08000b6c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000b78:	78fb      	ldrb	r3, [r7, #3]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d008      	beq.n	8000b90 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	899b      	ldrh	r3, [r3, #12]
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	819a      	strh	r2, [r3, #12]
 8000b8e:	e007      	b.n	8000ba0 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	899b      	ldrh	r3, [r3, #12]
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	819a      	strh	r2, [r3, #12]
  }
}
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000bb8:	887b      	ldrh	r3, [r7, #2]
 8000bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	809a      	strh	r2, [r3, #4]
}
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	881b      	ldrh	r3, [r3, #0]
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	887b      	ldrh	r3, [r7, #2]
 8000be8:	4013      	ands	r3, r2
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d002      	beq.n	8000bf6 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
 8000bf4:	e001      	b.n	8000bfa <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
 8000c14:	2300      	movs	r3, #0
 8000c16:	61bb      	str	r3, [r7, #24]
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	613b      	str	r3, [r7, #16]
#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
#endif /* STM32F10X_CL */

#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000c24:	4b4a      	ldr	r3, [pc, #296]	; (8000d50 <RCC_GetClocksFreq+0x148>)
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f003 030c 	and.w	r3, r3, #12
 8000c2c:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	2b04      	cmp	r3, #4
 8000c32:	d007      	beq.n	8000c44 <RCC_GetClocksFreq+0x3c>
 8000c34:	2b08      	cmp	r3, #8
 8000c36:	d009      	beq.n	8000c4c <RCC_GetClocksFreq+0x44>
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d12f      	bne.n	8000c9c <RCC_GetClocksFreq+0x94>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a45      	ldr	r2, [pc, #276]	; (8000d54 <RCC_GetClocksFreq+0x14c>)
 8000c40:	601a      	str	r2, [r3, #0]
      break;
 8000c42:	e02f      	b.n	8000ca4 <RCC_GetClocksFreq+0x9c>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a43      	ldr	r2, [pc, #268]	; (8000d54 <RCC_GetClocksFreq+0x14c>)
 8000c48:	601a      	str	r2, [r3, #0]
      break;
 8000c4a:	e02b      	b.n	8000ca4 <RCC_GetClocksFreq+0x9c>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000c4c:	4b40      	ldr	r3, [pc, #256]	; (8000d50 <RCC_GetClocksFreq+0x148>)
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000c54:	61bb      	str	r3, [r7, #24]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000c56:	4b3e      	ldr	r3, [pc, #248]	; (8000d50 <RCC_GetClocksFreq+0x148>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c5e:	617b      	str	r3, [r7, #20]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	0c9b      	lsrs	r3, r3, #18
 8000c64:	3302      	adds	r3, #2
 8000c66:	61bb      	str	r3, [r7, #24]
      
      if (pllsource == 0x00)
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d106      	bne.n	8000c7c <RCC_GetClocksFreq+0x74>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	4a39      	ldr	r2, [pc, #228]	; (8000d58 <RCC_GetClocksFreq+0x150>)
 8000c72:	fb02 f203 	mul.w	r2, r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000c7a:	e013      	b.n	8000ca4 <RCC_GetClocksFreq+0x9c>
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
 #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 8000c7c:	4b34      	ldr	r3, [pc, #208]	; (8000d50 <RCC_GetClocksFreq+0x148>)
 8000c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c80:	f003 030f 	and.w	r3, r3, #15
 8000c84:	3301      	adds	r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 8000c88:	4a32      	ldr	r2, [pc, #200]	; (8000d54 <RCC_GetClocksFreq+0x14c>)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	fb02 f203 	mul.w	r2, r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000c9a:	e003      	b.n	8000ca4 <RCC_GetClocksFreq+0x9c>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a2d      	ldr	r2, [pc, #180]	; (8000d54 <RCC_GetClocksFreq+0x14c>)
 8000ca0:	601a      	str	r2, [r3, #0]
      break;
 8000ca2:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000ca4:	4b2a      	ldr	r3, [pc, #168]	; (8000d50 <RCC_GetClocksFreq+0x148>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cac:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	091b      	lsrs	r3, r3, #4
 8000cb2:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8000cb4:	4a29      	ldr	r2, [pc, #164]	; (8000d5c <RCC_GetClocksFreq+0x154>)
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	4413      	add	r3, r2
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	613b      	str	r3, [r7, #16]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	40da      	lsrs	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000ccc:	4b20      	ldr	r3, [pc, #128]	; (8000d50 <RCC_GetClocksFreq+0x148>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000cd4:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8000cdc:	4a1f      	ldr	r2, [pc, #124]	; (8000d5c <RCC_GetClocksFreq+0x154>)
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	40da      	lsrs	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000cf4:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <RCC_GetClocksFreq+0x148>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000cfc:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	0adb      	lsrs	r3, r3, #11
 8000d02:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8000d04:	4a15      	ldr	r2, [pc, #84]	; (8000d5c <RCC_GetClocksFreq+0x154>)
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	4413      	add	r3, r2
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	613b      	str	r3, [r7, #16]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	40da      	lsrs	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <RCC_GetClocksFreq+0x148>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d24:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 14;
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	0b9b      	lsrs	r3, r3, #14
 8000d2a:	61fb      	str	r3, [r7, #28]
  presc = ADCPrescTable[tmp];
 8000d2c:	4a0c      	ldr	r2, [pc, #48]	; (8000d60 <RCC_GetClocksFreq+0x158>)
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	4413      	add	r3, r2
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	613b      	str	r3, [r7, #16]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	68da      	ldr	r2, [r3, #12]
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	611a      	str	r2, [r3, #16]
}
 8000d46:	3724      	adds	r7, #36	; 0x24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	40021000 	.word	0x40021000
 8000d54:	007a1200 	.word	0x007a1200
 8000d58:	003d0900 	.word	0x003d0900
 8000d5c:	2000001c 	.word	0x2000001c
 8000d60:	2000002c 	.word	0x2000002c

08000d64 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d70:	78fb      	ldrb	r3, [r7, #3]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d006      	beq.n	8000d84 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <RCC_APB2PeriphClockCmd+0x38>)
 8000d78:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <RCC_APB2PeriphClockCmd+0x38>)
 8000d7a:	6991      	ldr	r1, [r2, #24]
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	619a      	str	r2, [r3, #24]
 8000d82:	e006      	b.n	8000d92 <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <RCC_APB2PeriphClockCmd+0x38>)
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <RCC_APB2PeriphClockCmd+0x38>)
 8000d88:	6991      	ldr	r1, [r2, #24]
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	43d2      	mvns	r2, r2
 8000d8e:	400a      	ands	r2, r1
 8000d90:	619a      	str	r2, [r3, #24]
  }
}
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	40021000 	.word	0x40021000

08000da0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000dac:	78fb      	ldrb	r3, [r7, #3]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d006      	beq.n	8000dc0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <RCC_APB1PeriphClockCmd+0x38>)
 8000db4:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <RCC_APB1PeriphClockCmd+0x38>)
 8000db6:	69d1      	ldr	r1, [r2, #28]
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	61da      	str	r2, [r3, #28]
 8000dbe:	e006      	b.n	8000dce <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <RCC_APB1PeriphClockCmd+0x38>)
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <RCC_APB1PeriphClockCmd+0x38>)
 8000dc4:	69d1      	ldr	r1, [r2, #28]
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	43d2      	mvns	r2, r2
 8000dca:	400a      	ands	r2, r1
 8000dcc:	61da      	str	r2, [r3, #28]
  }
}
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	40021000 	.word	0x40021000

08000ddc <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000de8:	78fb      	ldrb	r3, [r7, #3]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d008      	beq.n	8000e00 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	801a      	strh	r2, [r3, #0]
 8000dfe:	e007      	b.n	8000e10 <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	801a      	strh	r2, [r3, #0]
  }
}
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDA"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b087      	sub	sp, #28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000e26:	2300      	movs	r3, #0
 8000e28:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	0f1b      	lsrs	r3, r3, #28
 8000e3a:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000e42:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	3314      	adds	r3, #20
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	e005      	b.n	8000e5e <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	0c1b      	lsrs	r3, r3, #16
 8000e56:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	3318      	adds	r3, #24
 8000e5c:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	4013      	ands	r3, r2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d002      	beq.n	8000e70 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	75fb      	strb	r3, [r7, #23]
 8000e6e:	e001      	b.n	8000e74 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8000e70:	2300      	movs	r3, #0
 8000e72:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8000e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	371c      	adds	r7, #28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b089      	sub	sp, #36	; 0x24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	78db      	ldrb	r3, [r3, #3]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	78db      	ldrb	r3, [r3, #3]
 8000eb4:	f003 0310 	and.w	r3, r3, #16
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d004      	beq.n	8000ec6 <GPIO_Init+0x42>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	789b      	ldrb	r3, [r3, #2]
 8000ec0:	69fa      	ldr	r2, [r7, #28]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d044      	beq.n	8000f5a <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
 8000eda:	e038      	b.n	8000f4e <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d126      	bne.n	8000f48 <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	220f      	movs	r2, #15
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	4013      	ands	r3, r2
 8000f12:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	69fa      	ldr	r2, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	78db      	ldrb	r3, [r3, #3]
 8000f26:	2b28      	cmp	r3, #40	; 0x28
 8000f28:	d105      	bne.n	8000f36 <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	409a      	lsls	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	615a      	str	r2, [r3, #20]
 8000f34:	e008      	b.n	8000f48 <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	78db      	ldrb	r3, [r3, #3]
 8000f3a:	2b48      	cmp	r3, #72	; 0x48
 8000f3c:	d104      	bne.n	8000f48 <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	2201      	movs	r2, #1
 8000f42:	409a      	lsls	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	61bb      	str	r3, [r7, #24]
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	2b07      	cmp	r3, #7
 8000f52:	d9c3      	bls.n	8000edc <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	2bff      	cmp	r3, #255	; 0xff
 8000f60:	d946      	bls.n	8000ff0 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
 8000f6c:	e03a      	b.n	8000fe4 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	3308      	adds	r3, #8
 8000f72:	2201      	movs	r2, #1
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d127      	bne.n	8000fde <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	220f      	movs	r2, #15
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	69fa      	ldr	r2, [r7, #28]
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	78db      	ldrb	r3, [r3, #3]
 8000fba:	2b28      	cmp	r3, #40	; 0x28
 8000fbc:	d105      	bne.n	8000fca <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	3308      	adds	r3, #8
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	409a      	lsls	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	78db      	ldrb	r3, [r3, #3]
 8000fce:	2b48      	cmp	r3, #72	; 0x48
 8000fd0:	d105      	bne.n	8000fde <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	3308      	adds	r3, #8
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	409a      	lsls	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	61bb      	str	r3, [r7, #24]
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	2b07      	cmp	r3, #7
 8000fe8:	d9c1      	bls.n	8000f6e <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	605a      	str	r2, [r3, #4]
  }
}
 8000ff0:	3724      	adds	r7, #36	; 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d006      	beq.n	800101c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f043 0201 	orr.w	r2, r3, #1
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	e006      	b.n	800102a <DMA_Cmd+0x2e>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001024:	4013      	ands	r3, r2
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
  }
}
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800103c:	2300      	movs	r3, #0
 800103e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <DMA_GetFlagStatus+0x4c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	e002      	b.n	800105c <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <DMA_GetFlagStatus+0x50>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4013      	ands	r3, r2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d002      	beq.n	800106c <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 8001066:	2301      	movs	r3, #1
 8001068:	73fb      	strb	r3, [r7, #15]
 800106a:	e001      	b.n	8001070 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 800106c:	2300      	movs	r3, #0
 800106e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 8001070:	7bfb      	ldrb	r3, [r7, #15]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40020400 	.word	0x40020400
 8001084:	40020000 	.word	0x40020000

08001088 <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <DMA_ClearFlag+0x2c>)
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	e002      	b.n	80010a8 <DMA_ClearFlag+0x20>
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
 80010a2:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <DMA_ClearFlag+0x30>)
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	605a      	str	r2, [r3, #4]
  }
}
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40020400 	.word	0x40020400
 80010b8:	40020000 	.word	0x40020000

080010bc <__libc_init_array>:
 80010bc:	b570      	push	{r4, r5, r6, lr}
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <__libc_init_array+0x3c>)
 80010c0:	4d0e      	ldr	r5, [pc, #56]	; (80010fc <__libc_init_array+0x40>)
 80010c2:	2400      	movs	r4, #0
 80010c4:	1aed      	subs	r5, r5, r3
 80010c6:	10ad      	asrs	r5, r5, #2
 80010c8:	461e      	mov	r6, r3
 80010ca:	42ac      	cmp	r4, r5
 80010cc:	d004      	beq.n	80010d8 <__libc_init_array+0x1c>
 80010ce:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80010d2:	4790      	blx	r2
 80010d4:	3401      	adds	r4, #1
 80010d6:	e7f8      	b.n	80010ca <__libc_init_array+0xe>
 80010d8:	f000 f84e 	bl	8001178 <_init>
 80010dc:	4d08      	ldr	r5, [pc, #32]	; (8001100 <__libc_init_array+0x44>)
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <__libc_init_array+0x48>)
 80010e0:	2400      	movs	r4, #0
 80010e2:	1aed      	subs	r5, r5, r3
 80010e4:	10ad      	asrs	r5, r5, #2
 80010e6:	461e      	mov	r6, r3
 80010e8:	42ac      	cmp	r4, r5
 80010ea:	d004      	beq.n	80010f6 <__libc_init_array+0x3a>
 80010ec:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80010f0:	4790      	blx	r2
 80010f2:	3401      	adds	r4, #1
 80010f4:	e7f8      	b.n	80010e8 <__libc_init_array+0x2c>
 80010f6:	bd70      	pop	{r4, r5, r6, pc}
 80010f8:	08001190 	.word	0x08001190
 80010fc:	08001190 	.word	0x08001190
 8001100:	08001194 	.word	0x08001194
 8001104:	08001190 	.word	0x08001190
 8001108:	53550d0a 	.word	0x53550d0a
 800110c:	20545241 	.word	0x20545241
 8001110:	6e697250 	.word	0x6e697250
 8001114:	45206674 	.word	0x45206674
 8001118:	706d6178 	.word	0x706d6178
 800111c:	203a656c 	.word	0x203a656c
 8001120:	61746572 	.word	0x61746572
 8001124:	74656772 	.word	0x74656772
 8001128:	65687420 	.word	0x65687420
 800112c:	6c204320 	.word	0x6c204320
 8001130:	61726269 	.word	0x61726269
 8001134:	70207972 	.word	0x70207972
 8001138:	746e6972 	.word	0x746e6972
 800113c:	75662066 	.word	0x75662066
 8001140:	6974636e 	.word	0x6974636e
 8001144:	74206e6f 	.word	0x74206e6f
 8001148:	6874206f 	.word	0x6874206f
 800114c:	53552065 	.word	0x53552065
 8001150:	0a545241 	.word	0x0a545241
 8001154:	0000000d 	.word	0x0000000d

08001158 <COM_USART_CLK>:
 8001158:	00004000 00020000                       .@......

08001160 <COM_TX_PORT_CLK>:
 8001160:	00000004 00000004                       ........

08001168 <COM_RX_PORT_CLK>:
 8001168:	00000004 00000004                       ........

08001170 <COM_TX_PIN>:
 8001170:	00040200                                ....

08001174 <COM_RX_PIN>:
 8001174:	00080400                                ....

08001178 <_init>:
 8001178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800117a:	bf00      	nop
 800117c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800117e:	bc08      	pop	{r3}
 8001180:	469e      	mov	lr, r3
 8001182:	4770      	bx	lr

08001184 <_fini>:
 8001184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001186:	bf00      	nop
 8001188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800118a:	bc08      	pop	{r3}
 800118c:	469e      	mov	lr, r3
 800118e:	4770      	bx	lr
